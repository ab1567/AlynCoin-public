// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nft.proto

#include "nft.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR NFTProto::NFTProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transferledger_)*/{}
  , /*decltype(_impl_.bundled_assets_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.owner_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.image_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.zk_stark_proof_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nft_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proof_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extra_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creator_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dilithium_signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encrypted_metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.expiry_timestamp_)*/int64_t{0}
  , /*decltype(_impl_.revoked_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NFTProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NFTProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NFTProtoDefaultTypeInternal() {}
  union {
    NFTProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NFTProtoDefaultTypeInternal _NFTProto_default_instance_;
static ::_pb::Metadata file_level_metadata_nft_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_nft_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_nft_2eproto = nullptr;

const uint32_t TableStruct_nft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFTProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.creator_),
  PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.owner_),
  PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.image_hash_),
  PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.signature_),
  PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.zk_stark_proof_),
  PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.nft_type_),
  PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.proof_hash_),
  PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.extra_data_),
  PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.transferledger_),
  PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.creator_identity_),
  PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.bundled_assets_),
  PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.dilithium_signature_),
  PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.expiry_timestamp_),
  PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.revoked_),
  PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.encrypted_metadata_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::NFTProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_NFTProto_default_instance_._instance,
};

const char descriptor_table_protodef_nft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tnft.proto\"\223\003\n\010NFTProto\022\n\n\002id\030\001 \001(\t\022\017\n\007"
  "creator\030\002 \001(\t\022\r\n\005owner\030\003 \001(\t\022\020\n\010metadata"
  "\030\004 \001(\t\022\022\n\nimage_hash\030\005 \001(\t\022\021\n\ttimestamp\030"
  "\006 \001(\003\022\021\n\tsignature\030\007 \001(\014\022\026\n\016zk_stark_pro"
  "of\030\010 \001(\014\022\017\n\007version\030\t \001(\t\022\020\n\010nft_type\030\n "
  "\001(\t\022\022\n\nproof_hash\030\013 \001(\t\022\022\n\nextra_data\030\014 "
  "\001(\t\022\026\n\016transferLedger\030\r \003(\t\022\030\n\020creator_i"
  "dentity\030\016 \001(\t\022\026\n\016bundled_assets\030\017 \003(\t\022\033\n"
  "\023dilithium_signature\030\020 \001(\014\022\030\n\020expiry_tim"
  "estamp\030\021 \001(\003\022\017\n\007revoked\030\022 \001(\010\022\032\n\022encrypt"
  "ed_metadata\030\023 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_nft_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_nft_2eproto = {
    false, false, 425, descriptor_table_protodef_nft_2eproto,
    "nft.proto",
    &descriptor_table_nft_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_nft_2eproto::offsets,
    file_level_metadata_nft_2eproto, file_level_enum_descriptors_nft_2eproto,
    file_level_service_descriptors_nft_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_nft_2eproto_getter() {
  return &descriptor_table_nft_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_nft_2eproto(&descriptor_table_nft_2eproto);

// ===================================================================

class NFTProto::_Internal {
 public:
};

NFTProto::NFTProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NFTProto)
}
NFTProto::NFTProto(const NFTProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NFTProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transferledger_){from._impl_.transferledger_}
    , decltype(_impl_.bundled_assets_){from._impl_.bundled_assets_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.creator_){}
    , decltype(_impl_.owner_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.image_hash_){}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.zk_stark_proof_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.nft_type_){}
    , decltype(_impl_.proof_hash_){}
    , decltype(_impl_.extra_data_){}
    , decltype(_impl_.creator_identity_){}
    , decltype(_impl_.dilithium_signature_){}
    , decltype(_impl_.encrypted_metadata_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.expiry_timestamp_){}
    , decltype(_impl_.revoked_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator().empty()) {
    _this->_impl_.creator_.Set(from._internal_creator(), 
      _this->GetArenaForAllocation());
  }
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner().empty()) {
    _this->_impl_.owner_.Set(from._internal_owner(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.image_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image_hash().empty()) {
    _this->_impl_.image_hash_.Set(from._internal_image_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  _impl_.zk_stark_proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.zk_stark_proof_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_zk_stark_proof().empty()) {
    _this->_impl_.zk_stark_proof_.Set(from._internal_zk_stark_proof(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nft_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nft_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nft_type().empty()) {
    _this->_impl_.nft_type_.Set(from._internal_nft_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.proof_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proof_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof_hash().empty()) {
    _this->_impl_.proof_hash_.Set(from._internal_proof_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.extra_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extra_data().empty()) {
    _this->_impl_.extra_data_.Set(from._internal_extra_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creator_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator_identity().empty()) {
    _this->_impl_.creator_identity_.Set(from._internal_creator_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dilithium_signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dilithium_signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dilithium_signature().empty()) {
    _this->_impl_.dilithium_signature_.Set(from._internal_dilithium_signature(), 
      _this->GetArenaForAllocation());
  }
  _impl_.encrypted_metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encrypted_metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encrypted_metadata().empty()) {
    _this->_impl_.encrypted_metadata_.Set(from._internal_encrypted_metadata(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.revoked_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.revoked_));
  // @@protoc_insertion_point(copy_constructor:NFTProto)
}

inline void NFTProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transferledger_){arena}
    , decltype(_impl_.bundled_assets_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.creator_){}
    , decltype(_impl_.owner_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.image_hash_){}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.zk_stark_proof_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.nft_type_){}
    , decltype(_impl_.proof_hash_){}
    , decltype(_impl_.extra_data_){}
    , decltype(_impl_.creator_identity_){}
    , decltype(_impl_.dilithium_signature_){}
    , decltype(_impl_.encrypted_metadata_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.expiry_timestamp_){int64_t{0}}
    , decltype(_impl_.revoked_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.image_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zk_stark_proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.zk_stark_proof_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nft_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nft_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proof_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proof_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.extra_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creator_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dilithium_signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dilithium_signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encrypted_metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encrypted_metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NFTProto::~NFTProto() {
  // @@protoc_insertion_point(destructor:NFTProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NFTProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transferledger_.~RepeatedPtrField();
  _impl_.bundled_assets_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.creator_.Destroy();
  _impl_.owner_.Destroy();
  _impl_.metadata_.Destroy();
  _impl_.image_hash_.Destroy();
  _impl_.signature_.Destroy();
  _impl_.zk_stark_proof_.Destroy();
  _impl_.version_.Destroy();
  _impl_.nft_type_.Destroy();
  _impl_.proof_hash_.Destroy();
  _impl_.extra_data_.Destroy();
  _impl_.creator_identity_.Destroy();
  _impl_.dilithium_signature_.Destroy();
  _impl_.encrypted_metadata_.Destroy();
}

void NFTProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NFTProto::Clear() {
// @@protoc_insertion_point(message_clear_start:NFTProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transferledger_.Clear();
  _impl_.bundled_assets_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.creator_.ClearToEmpty();
  _impl_.owner_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  _impl_.image_hash_.ClearToEmpty();
  _impl_.signature_.ClearToEmpty();
  _impl_.zk_stark_proof_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.nft_type_.ClearToEmpty();
  _impl_.proof_hash_.ClearToEmpty();
  _impl_.extra_data_.ClearToEmpty();
  _impl_.creator_identity_.ClearToEmpty();
  _impl_.dilithium_signature_.ClearToEmpty();
  _impl_.encrypted_metadata_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.revoked_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.revoked_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NFTProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NFTProto.id"));
        } else
          goto handle_unusual;
        continue;
      // string creator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_creator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NFTProto.creator"));
        } else
          goto handle_unusual;
        continue;
      // string owner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NFTProto.owner"));
        } else
          goto handle_unusual;
        continue;
      // string metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NFTProto.metadata"));
        } else
          goto handle_unusual;
        continue;
      // string image_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_image_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NFTProto.image_hash"));
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes signature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes zk_stark_proof = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_zk_stark_proof();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NFTProto.version"));
        } else
          goto handle_unusual;
        continue;
      // string nft_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_nft_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NFTProto.nft_type"));
        } else
          goto handle_unusual;
        continue;
      // string proof_hash = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_proof_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NFTProto.proof_hash"));
        } else
          goto handle_unusual;
        continue;
      // string extra_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NFTProto.extra_data"));
        } else
          goto handle_unusual;
        continue;
      // repeated string transferLedger = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_transferledger();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "NFTProto.transferLedger"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string creator_identity = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_creator_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NFTProto.creator_identity"));
        } else
          goto handle_unusual;
        continue;
      // repeated string bundled_assets = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bundled_assets();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "NFTProto.bundled_assets"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes dilithium_signature = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_dilithium_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 expiry_timestamp = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.expiry_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool revoked = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.revoked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string encrypted_metadata = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_encrypted_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NFTProto.encrypted_metadata"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NFTProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFTProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NFTProto.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string creator = 2;
  if (!this->_internal_creator().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator().data(), static_cast<int>(this->_internal_creator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NFTProto.creator");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_creator(), target);
  }

  // string owner = 3;
  if (!this->_internal_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NFTProto.owner");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_owner(), target);
  }

  // string metadata = 4;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NFTProto.metadata");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_metadata(), target);
  }

  // string image_hash = 5;
  if (!this->_internal_image_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_hash().data(), static_cast<int>(this->_internal_image_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NFTProto.image_hash");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_image_hash(), target);
  }

  // int64 timestamp = 6;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_timestamp(), target);
  }

  // bytes signature = 7;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_signature(), target);
  }

  // bytes zk_stark_proof = 8;
  if (!this->_internal_zk_stark_proof().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_zk_stark_proof(), target);
  }

  // string version = 9;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NFTProto.version");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_version(), target);
  }

  // string nft_type = 10;
  if (!this->_internal_nft_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nft_type().data(), static_cast<int>(this->_internal_nft_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NFTProto.nft_type");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_nft_type(), target);
  }

  // string proof_hash = 11;
  if (!this->_internal_proof_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proof_hash().data(), static_cast<int>(this->_internal_proof_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NFTProto.proof_hash");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_proof_hash(), target);
  }

  // string extra_data = 12;
  if (!this->_internal_extra_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extra_data().data(), static_cast<int>(this->_internal_extra_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NFTProto.extra_data");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_extra_data(), target);
  }

  // repeated string transferLedger = 13;
  for (int i = 0, n = this->_internal_transferledger_size(); i < n; i++) {
    const auto& s = this->_internal_transferledger(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NFTProto.transferLedger");
    target = stream->WriteString(13, s, target);
  }

  // string creator_identity = 14;
  if (!this->_internal_creator_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator_identity().data(), static_cast<int>(this->_internal_creator_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NFTProto.creator_identity");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_creator_identity(), target);
  }

  // repeated string bundled_assets = 15;
  for (int i = 0, n = this->_internal_bundled_assets_size(); i < n; i++) {
    const auto& s = this->_internal_bundled_assets(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NFTProto.bundled_assets");
    target = stream->WriteString(15, s, target);
  }

  // bytes dilithium_signature = 16;
  if (!this->_internal_dilithium_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_dilithium_signature(), target);
  }

  // int64 expiry_timestamp = 17;
  if (this->_internal_expiry_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_expiry_timestamp(), target);
  }

  // bool revoked = 18;
  if (this->_internal_revoked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_revoked(), target);
  }

  // string encrypted_metadata = 19;
  if (!this->_internal_encrypted_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encrypted_metadata().data(), static_cast<int>(this->_internal_encrypted_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NFTProto.encrypted_metadata");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_encrypted_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFTProto)
  return target;
}

size_t NFTProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFTProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string transferLedger = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.transferledger_.size());
  for (int i = 0, n = _impl_.transferledger_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.transferledger_.Get(i));
  }

  // repeated string bundled_assets = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.bundled_assets_.size());
  for (int i = 0, n = _impl_.bundled_assets_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.bundled_assets_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string creator = 2;
  if (!this->_internal_creator().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator());
  }

  // string owner = 3;
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string metadata = 4;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // string image_hash = 5;
  if (!this->_internal_image_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_hash());
  }

  // bytes signature = 7;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // bytes zk_stark_proof = 8;
  if (!this->_internal_zk_stark_proof().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_zk_stark_proof());
  }

  // string version = 9;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string nft_type = 10;
  if (!this->_internal_nft_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nft_type());
  }

  // string proof_hash = 11;
  if (!this->_internal_proof_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proof_hash());
  }

  // string extra_data = 12;
  if (!this->_internal_extra_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extra_data());
  }

  // string creator_identity = 14;
  if (!this->_internal_creator_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator_identity());
  }

  // bytes dilithium_signature = 16;
  if (!this->_internal_dilithium_signature().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dilithium_signature());
  }

  // string encrypted_metadata = 19;
  if (!this->_internal_encrypted_metadata().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encrypted_metadata());
  }

  // int64 timestamp = 6;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int64 expiry_timestamp = 17;
  if (this->_internal_expiry_timestamp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_expiry_timestamp());
  }

  // bool revoked = 18;
  if (this->_internal_revoked() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NFTProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NFTProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NFTProto::GetClassData() const { return &_class_data_; }


void NFTProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NFTProto*>(&to_msg);
  auto& from = static_cast<const NFTProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NFTProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.transferledger_.MergeFrom(from._impl_.transferledger_);
  _this->_impl_.bundled_assets_.MergeFrom(from._impl_.bundled_assets_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_creator().empty()) {
    _this->_internal_set_creator(from._internal_creator());
  }
  if (!from._internal_owner().empty()) {
    _this->_internal_set_owner(from._internal_owner());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (!from._internal_image_hash().empty()) {
    _this->_internal_set_image_hash(from._internal_image_hash());
  }
  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  if (!from._internal_zk_stark_proof().empty()) {
    _this->_internal_set_zk_stark_proof(from._internal_zk_stark_proof());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_nft_type().empty()) {
    _this->_internal_set_nft_type(from._internal_nft_type());
  }
  if (!from._internal_proof_hash().empty()) {
    _this->_internal_set_proof_hash(from._internal_proof_hash());
  }
  if (!from._internal_extra_data().empty()) {
    _this->_internal_set_extra_data(from._internal_extra_data());
  }
  if (!from._internal_creator_identity().empty()) {
    _this->_internal_set_creator_identity(from._internal_creator_identity());
  }
  if (!from._internal_dilithium_signature().empty()) {
    _this->_internal_set_dilithium_signature(from._internal_dilithium_signature());
  }
  if (!from._internal_encrypted_metadata().empty()) {
    _this->_internal_set_encrypted_metadata(from._internal_encrypted_metadata());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_expiry_timestamp() != 0) {
    _this->_internal_set_expiry_timestamp(from._internal_expiry_timestamp());
  }
  if (from._internal_revoked() != 0) {
    _this->_internal_set_revoked(from._internal_revoked());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NFTProto::CopyFrom(const NFTProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFTProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NFTProto::IsInitialized() const {
  return true;
}

void NFTProto::InternalSwap(NFTProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.transferledger_.InternalSwap(&other->_impl_.transferledger_);
  _impl_.bundled_assets_.InternalSwap(&other->_impl_.bundled_assets_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creator_, lhs_arena,
      &other->_impl_.creator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.owner_, lhs_arena,
      &other->_impl_.owner_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_hash_, lhs_arena,
      &other->_impl_.image_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.zk_stark_proof_, lhs_arena,
      &other->_impl_.zk_stark_proof_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nft_type_, lhs_arena,
      &other->_impl_.nft_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proof_hash_, lhs_arena,
      &other->_impl_.proof_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extra_data_, lhs_arena,
      &other->_impl_.extra_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creator_identity_, lhs_arena,
      &other->_impl_.creator_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dilithium_signature_, lhs_arena,
      &other->_impl_.dilithium_signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encrypted_metadata_, lhs_arena,
      &other->_impl_.encrypted_metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.revoked_)
      + sizeof(NFTProto::_impl_.revoked_)
      - PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NFTProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nft_2eproto_getter, &descriptor_table_nft_2eproto_once,
      file_level_metadata_nft_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NFTProto*
Arena::CreateMaybeMessage< ::NFTProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFTProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
