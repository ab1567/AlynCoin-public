// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction_protos.proto

#include "transaction_protos.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace alyncoin {
PROTOBUF_CONSTEXPR TransactionProto::TransactionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sender_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recipient_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.amount_)*/0
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.has_sender_)*/false
  , /*decltype(_impl_.has_recipient_)*/false
  , /*decltype(_impl_.has_amount_)*/false
  , /*decltype(_impl_.has_signature_)*/false
  , /*decltype(_impl_.has_timestamp_)*/false} {}
struct TransactionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionProtoDefaultTypeInternal() {}
  union {
    TransactionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionProtoDefaultTypeInternal _TransactionProto_default_instance_;
}  // namespace alyncoin
static ::_pb::Metadata file_level_metadata_transaction_5fprotos_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_transaction_5fprotos_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_transaction_5fprotos_2eproto = nullptr;

const uint32_t TableStruct_transaction_5fprotos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.sender_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.recipient_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.signature_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.has_sender_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.has_recipient_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.has_amount_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.has_signature_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.has_timestamp_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  4,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, -1, sizeof(::alyncoin::TransactionProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::alyncoin::_TransactionProto_default_instance_._instance,
};

const char descriptor_table_protodef_transaction_5fprotos_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030transaction_protos.proto\022\010alyncoin\"\305\002\n"
  "\020TransactionProto\022\016\n\006sender\030\001 \001(\t\022\021\n\trec"
  "ipient\030\002 \001(\t\022\016\n\006amount\030\003 \001(\001\022\021\n\tsignatur"
  "e\030\004 \001(\t\022\021\n\ttimestamp\030\005 \001(\004\022\027\n\nhas_sender"
  "\030\006 \001(\010H\000\210\001\001\022\032\n\rhas_recipient\030\007 \001(\010H\001\210\001\001\022"
  "\027\n\nhas_amount\030\010 \001(\010H\002\210\001\001\022\032\n\rhas_signatur"
  "e\030\t \001(\010H\003\210\001\001\022\032\n\rhas_timestamp\030\n \001(\010H\004\210\001\001"
  "B\r\n\013_has_senderB\020\n\016_has_recipientB\r\n\013_ha"
  "s_amountB\020\n\016_has_signatureB\020\n\016_has_times"
  "tampb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_transaction_5fprotos_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transaction_5fprotos_2eproto = {
    false, false, 372, descriptor_table_protodef_transaction_5fprotos_2eproto,
    "transaction_protos.proto",
    &descriptor_table_transaction_5fprotos_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_transaction_5fprotos_2eproto::offsets,
    file_level_metadata_transaction_5fprotos_2eproto, file_level_enum_descriptors_transaction_5fprotos_2eproto,
    file_level_service_descriptors_transaction_5fprotos_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transaction_5fprotos_2eproto_getter() {
  return &descriptor_table_transaction_5fprotos_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transaction_5fprotos_2eproto(&descriptor_table_transaction_5fprotos_2eproto);
namespace alyncoin {

// ===================================================================

class TransactionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TransactionProto>()._impl_._has_bits_);
  static void set_has_has_sender(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_recipient(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TransactionProto::TransactionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:alyncoin.TransactionProto)
}
TransactionProto::TransactionProto(const TransactionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransactionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_){}
    , decltype(_impl_.recipient_){}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.amount_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.has_sender_){}
    , decltype(_impl_.has_recipient_){}
    , decltype(_impl_.has_amount_){}
    , decltype(_impl_.has_signature_){}
    , decltype(_impl_.has_timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), 
      _this->GetArenaForAllocation());
  }
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recipient().empty()) {
    _this->_impl_.recipient_.Set(from._internal_recipient(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.amount_, &from._impl_.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_timestamp_) -
    reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.has_timestamp_));
  // @@protoc_insertion_point(copy_constructor:alyncoin.TransactionProto)
}

inline void TransactionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_){}
    , decltype(_impl_.recipient_){}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.amount_){0}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.has_sender_){false}
    , decltype(_impl_.has_recipient_){false}
    , decltype(_impl_.has_amount_){false}
    , decltype(_impl_.has_signature_){false}
    , decltype(_impl_.has_timestamp_){false}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransactionProto::~TransactionProto() {
  // @@protoc_insertion_point(destructor:alyncoin.TransactionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransactionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.recipient_.Destroy();
  _impl_.signature_.Destroy();
}

void TransactionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransactionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:alyncoin.TransactionProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.recipient_.ClearToEmpty();
  _impl_.signature_.ClearToEmpty();
  ::memset(&_impl_.amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.timestamp_));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.has_sender_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.has_timestamp_) -
        reinterpret_cast<char*>(&_impl_.has_sender_)) + sizeof(_impl_.has_timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "alyncoin.TransactionProto.sender"));
        } else
          goto handle_unusual;
        continue;
      // string recipient = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_recipient();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "alyncoin.TransactionProto.recipient"));
        } else
          goto handle_unusual;
        continue;
      // double amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "alyncoin.TransactionProto.signature"));
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_sender = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_has_sender(&has_bits);
          _impl_.has_sender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_recipient = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_has_recipient(&has_bits);
          _impl_.has_recipient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_amount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_has_amount(&has_bits);
          _impl_.has_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_signature = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_has_signature(&has_bits);
          _impl_.has_signature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_has_timestamp(&has_bits);
          _impl_.has_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:alyncoin.TransactionProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1;
  if (!this->_internal_sender().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender().data(), static_cast<int>(this->_internal_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "alyncoin.TransactionProto.sender");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sender(), target);
  }

  // string recipient = 2;
  if (!this->_internal_recipient().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient().data(), static_cast<int>(this->_internal_recipient().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "alyncoin.TransactionProto.recipient");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_recipient(), target);
  }

  // double amount = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = this->_internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_amount(), target);
  }

  // string signature = 4;
  if (!this->_internal_signature().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "alyncoin.TransactionProto.signature");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_signature(), target);
  }

  // uint64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // optional bool has_sender = 6;
  if (_internal_has_has_sender()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_has_sender(), target);
  }

  // optional bool has_recipient = 7;
  if (_internal_has_has_recipient()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_has_recipient(), target);
  }

  // optional bool has_amount = 8;
  if (_internal_has_has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_has_amount(), target);
  }

  // optional bool has_signature = 9;
  if (_internal_has_has_signature()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_has_signature(), target);
  }

  // optional bool has_timestamp = 10;
  if (_internal_has_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_has_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alyncoin.TransactionProto)
  return target;
}

size_t TransactionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alyncoin.TransactionProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender());
  }

  // string recipient = 2;
  if (!this->_internal_recipient().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient());
  }

  // string signature = 4;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  // double amount = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = this->_internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    total_size += 1 + 8;
  }

  // uint64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool has_sender = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool has_recipient = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool has_amount = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool has_signature = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool has_timestamp = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransactionProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionProto::GetClassData() const { return &_class_data_; }


void TransactionProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransactionProto*>(&to_msg);
  auto& from = static_cast<const TransactionProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:alyncoin.TransactionProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_recipient().empty()) {
    _this->_internal_set_recipient(from._internal_recipient());
  }
  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = from._internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.has_sender_ = from._impl_.has_sender_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.has_recipient_ = from._impl_.has_recipient_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.has_amount_ = from._impl_.has_amount_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.has_signature_ = from._impl_.has_signature_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.has_timestamp_ = from._impl_.has_timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionProto::CopyFrom(const TransactionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alyncoin.TransactionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionProto::IsInitialized() const {
  return true;
}

void TransactionProto::InternalSwap(TransactionProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_, lhs_arena,
      &other->_impl_.sender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.recipient_, lhs_arena,
      &other->_impl_.recipient_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionProto, _impl_.has_timestamp_)
      + sizeof(TransactionProto::_impl_.has_timestamp_)
      - PROTOBUF_FIELD_OFFSET(TransactionProto, _impl_.amount_)>(
          reinterpret_cast<char*>(&_impl_.amount_),
          reinterpret_cast<char*>(&other->_impl_.amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transaction_5fprotos_2eproto_getter, &descriptor_table_transaction_5fprotos_2eproto_once,
      file_level_metadata_transaction_5fprotos_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace alyncoin
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::alyncoin::TransactionProto*
Arena::CreateMaybeMessage< ::alyncoin::TransactionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::alyncoin::TransactionProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
