// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: atomic_swap.proto

#include "atomic_swap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace atomic {
PROTOBUF_CONSTEXPR AtomicSwapProto::AtomicSwapProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.senderaddress_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.receiveraddress_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.secrethash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.secret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.zkproof_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.falconsignature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dilithiumsignature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.amount_)*/uint64_t{0u}
  , /*decltype(_impl_.createdat_)*/int64_t{0}
  , /*decltype(_impl_.expiresat_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AtomicSwapProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AtomicSwapProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AtomicSwapProtoDefaultTypeInternal() {}
  union {
    AtomicSwapProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AtomicSwapProtoDefaultTypeInternal _AtomicSwapProto_default_instance_;
}  // namespace atomic
static ::_pb::Metadata file_level_metadata_atomic_5fswap_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_atomic_5fswap_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_atomic_5fswap_2eproto = nullptr;

const uint32_t TableStruct_atomic_5fswap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atomic::AtomicSwapProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atomic::AtomicSwapProto, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::atomic::AtomicSwapProto, _impl_.senderaddress_),
  PROTOBUF_FIELD_OFFSET(::atomic::AtomicSwapProto, _impl_.receiveraddress_),
  PROTOBUF_FIELD_OFFSET(::atomic::AtomicSwapProto, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::atomic::AtomicSwapProto, _impl_.secrethash_),
  PROTOBUF_FIELD_OFFSET(::atomic::AtomicSwapProto, _impl_.secret_),
  PROTOBUF_FIELD_OFFSET(::atomic::AtomicSwapProto, _impl_.createdat_),
  PROTOBUF_FIELD_OFFSET(::atomic::AtomicSwapProto, _impl_.expiresat_),
  PROTOBUF_FIELD_OFFSET(::atomic::AtomicSwapProto, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::atomic::AtomicSwapProto, _impl_.zkproof_),
  PROTOBUF_FIELD_OFFSET(::atomic::AtomicSwapProto, _impl_.falconsignature_),
  PROTOBUF_FIELD_OFFSET(::atomic::AtomicSwapProto, _impl_.dilithiumsignature_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::atomic::AtomicSwapProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::atomic::_AtomicSwapProto_default_instance_._instance,
};

const char descriptor_table_protodef_atomic_5fswap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021atomic_swap.proto\022\006atomic\"\376\001\n\017AtomicSw"
  "apProto\022\014\n\004uuid\030\001 \001(\t\022\025\n\rsenderAddress\030\002"
  " \001(\t\022\027\n\017receiverAddress\030\003 \001(\t\022\016\n\006amount\030"
  "\004 \001(\004\022\022\n\nsecretHash\030\005 \001(\t\022\016\n\006secret\030\006 \001("
  "\t\022\021\n\tcreatedAt\030\007 \001(\003\022\021\n\texpiresAt\030\010 \001(\003\022"
  "\r\n\005state\030\t \001(\005\022\017\n\007zkProof\030\n \001(\t\022\027\n\017falco"
  "nSignature\030\013 \001(\t\022\032\n\022dilithiumSignature\030\014"
  " \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_atomic_5fswap_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_atomic_5fswap_2eproto = {
    false, false, 292, descriptor_table_protodef_atomic_5fswap_2eproto,
    "atomic_swap.proto",
    &descriptor_table_atomic_5fswap_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_atomic_5fswap_2eproto::offsets,
    file_level_metadata_atomic_5fswap_2eproto, file_level_enum_descriptors_atomic_5fswap_2eproto,
    file_level_service_descriptors_atomic_5fswap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_atomic_5fswap_2eproto_getter() {
  return &descriptor_table_atomic_5fswap_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_atomic_5fswap_2eproto(&descriptor_table_atomic_5fswap_2eproto);
namespace atomic {

// ===================================================================

class AtomicSwapProto::_Internal {
 public:
};

AtomicSwapProto::AtomicSwapProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:atomic.AtomicSwapProto)
}
AtomicSwapProto::AtomicSwapProto(const AtomicSwapProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AtomicSwapProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.senderaddress_){}
    , decltype(_impl_.receiveraddress_){}
    , decltype(_impl_.secrethash_){}
    , decltype(_impl_.secret_){}
    , decltype(_impl_.zkproof_){}
    , decltype(_impl_.falconsignature_){}
    , decltype(_impl_.dilithiumsignature_){}
    , decltype(_impl_.amount_){}
    , decltype(_impl_.createdat_){}
    , decltype(_impl_.expiresat_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.senderaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.senderaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_senderaddress().empty()) {
    _this->_impl_.senderaddress_.Set(from._internal_senderaddress(), 
      _this->GetArenaForAllocation());
  }
  _impl_.receiveraddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.receiveraddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiveraddress().empty()) {
    _this->_impl_.receiveraddress_.Set(from._internal_receiveraddress(), 
      _this->GetArenaForAllocation());
  }
  _impl_.secrethash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secrethash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secrethash().empty()) {
    _this->_impl_.secrethash_.Set(from._internal_secrethash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret().empty()) {
    _this->_impl_.secret_.Set(from._internal_secret(), 
      _this->GetArenaForAllocation());
  }
  _impl_.zkproof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.zkproof_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_zkproof().empty()) {
    _this->_impl_.zkproof_.Set(from._internal_zkproof(), 
      _this->GetArenaForAllocation());
  }
  _impl_.falconsignature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.falconsignature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_falconsignature().empty()) {
    _this->_impl_.falconsignature_.Set(from._internal_falconsignature(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dilithiumsignature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dilithiumsignature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dilithiumsignature().empty()) {
    _this->_impl_.dilithiumsignature_.Set(from._internal_dilithiumsignature(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.amount_, &from._impl_.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:atomic.AtomicSwapProto)
}

inline void AtomicSwapProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.senderaddress_){}
    , decltype(_impl_.receiveraddress_){}
    , decltype(_impl_.secrethash_){}
    , decltype(_impl_.secret_){}
    , decltype(_impl_.zkproof_){}
    , decltype(_impl_.falconsignature_){}
    , decltype(_impl_.dilithiumsignature_){}
    , decltype(_impl_.amount_){uint64_t{0u}}
    , decltype(_impl_.createdat_){int64_t{0}}
    , decltype(_impl_.expiresat_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.senderaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.senderaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.receiveraddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.receiveraddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secrethash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secrethash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zkproof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.zkproof_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.falconsignature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.falconsignature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dilithiumsignature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dilithiumsignature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AtomicSwapProto::~AtomicSwapProto() {
  // @@protoc_insertion_point(destructor:atomic.AtomicSwapProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AtomicSwapProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
  _impl_.senderaddress_.Destroy();
  _impl_.receiveraddress_.Destroy();
  _impl_.secrethash_.Destroy();
  _impl_.secret_.Destroy();
  _impl_.zkproof_.Destroy();
  _impl_.falconsignature_.Destroy();
  _impl_.dilithiumsignature_.Destroy();
}

void AtomicSwapProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AtomicSwapProto::Clear() {
// @@protoc_insertion_point(message_clear_start:atomic.AtomicSwapProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  _impl_.senderaddress_.ClearToEmpty();
  _impl_.receiveraddress_.ClearToEmpty();
  _impl_.secrethash_.ClearToEmpty();
  _impl_.secret_.ClearToEmpty();
  _impl_.zkproof_.ClearToEmpty();
  _impl_.falconsignature_.ClearToEmpty();
  _impl_.dilithiumsignature_.ClearToEmpty();
  ::memset(&_impl_.amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AtomicSwapProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "atomic.AtomicSwapProto.uuid"));
        } else
          goto handle_unusual;
        continue;
      // string senderAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_senderaddress();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "atomic.AtomicSwapProto.senderAddress"));
        } else
          goto handle_unusual;
        continue;
      // string receiverAddress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_receiveraddress();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "atomic.AtomicSwapProto.receiverAddress"));
        } else
          goto handle_unusual;
        continue;
      // uint64 amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string secretHash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_secrethash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "atomic.AtomicSwapProto.secretHash"));
        } else
          goto handle_unusual;
        continue;
      // string secret = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "atomic.AtomicSwapProto.secret"));
        } else
          goto handle_unusual;
        continue;
      // int64 createdAt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.createdat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 expiresAt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.expiresat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string zkProof = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_zkproof();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "atomic.AtomicSwapProto.zkProof"));
        } else
          goto handle_unusual;
        continue;
      // string falconSignature = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_falconsignature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "atomic.AtomicSwapProto.falconSignature"));
        } else
          goto handle_unusual;
        continue;
      // string dilithiumSignature = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_dilithiumsignature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "atomic.AtomicSwapProto.dilithiumSignature"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AtomicSwapProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atomic.AtomicSwapProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atomic.AtomicSwapProto.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // string senderAddress = 2;
  if (!this->_internal_senderaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_senderaddress().data(), static_cast<int>(this->_internal_senderaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atomic.AtomicSwapProto.senderAddress");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_senderaddress(), target);
  }

  // string receiverAddress = 3;
  if (!this->_internal_receiveraddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiveraddress().data(), static_cast<int>(this->_internal_receiveraddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atomic.AtomicSwapProto.receiverAddress");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_receiveraddress(), target);
  }

  // uint64 amount = 4;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_amount(), target);
  }

  // string secretHash = 5;
  if (!this->_internal_secrethash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secrethash().data(), static_cast<int>(this->_internal_secrethash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atomic.AtomicSwapProto.secretHash");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_secrethash(), target);
  }

  // string secret = 6;
  if (!this->_internal_secret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atomic.AtomicSwapProto.secret");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_secret(), target);
  }

  // int64 createdAt = 7;
  if (this->_internal_createdat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_createdat(), target);
  }

  // int64 expiresAt = 8;
  if (this->_internal_expiresat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_expiresat(), target);
  }

  // int32 state = 9;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_state(), target);
  }

  // string zkProof = 10;
  if (!this->_internal_zkproof().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_zkproof().data(), static_cast<int>(this->_internal_zkproof().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atomic.AtomicSwapProto.zkProof");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_zkproof(), target);
  }

  // string falconSignature = 11;
  if (!this->_internal_falconsignature().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_falconsignature().data(), static_cast<int>(this->_internal_falconsignature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atomic.AtomicSwapProto.falconSignature");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_falconsignature(), target);
  }

  // string dilithiumSignature = 12;
  if (!this->_internal_dilithiumsignature().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dilithiumsignature().data(), static_cast<int>(this->_internal_dilithiumsignature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atomic.AtomicSwapProto.dilithiumSignature");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_dilithiumsignature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atomic.AtomicSwapProto)
  return target;
}

size_t AtomicSwapProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atomic.AtomicSwapProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string senderAddress = 2;
  if (!this->_internal_senderaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_senderaddress());
  }

  // string receiverAddress = 3;
  if (!this->_internal_receiveraddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiveraddress());
  }

  // string secretHash = 5;
  if (!this->_internal_secrethash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secrethash());
  }

  // string secret = 6;
  if (!this->_internal_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string zkProof = 10;
  if (!this->_internal_zkproof().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_zkproof());
  }

  // string falconSignature = 11;
  if (!this->_internal_falconsignature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_falconsignature());
  }

  // string dilithiumSignature = 12;
  if (!this->_internal_dilithiumsignature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dilithiumsignature());
  }

  // uint64 amount = 4;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  // int64 createdAt = 7;
  if (this->_internal_createdat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_createdat());
  }

  // int64 expiresAt = 8;
  if (this->_internal_expiresat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_expiresat());
  }

  // int32 state = 9;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AtomicSwapProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AtomicSwapProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AtomicSwapProto::GetClassData() const { return &_class_data_; }


void AtomicSwapProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AtomicSwapProto*>(&to_msg);
  auto& from = static_cast<const AtomicSwapProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:atomic.AtomicSwapProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_senderaddress().empty()) {
    _this->_internal_set_senderaddress(from._internal_senderaddress());
  }
  if (!from._internal_receiveraddress().empty()) {
    _this->_internal_set_receiveraddress(from._internal_receiveraddress());
  }
  if (!from._internal_secrethash().empty()) {
    _this->_internal_set_secrethash(from._internal_secrethash());
  }
  if (!from._internal_secret().empty()) {
    _this->_internal_set_secret(from._internal_secret());
  }
  if (!from._internal_zkproof().empty()) {
    _this->_internal_set_zkproof(from._internal_zkproof());
  }
  if (!from._internal_falconsignature().empty()) {
    _this->_internal_set_falconsignature(from._internal_falconsignature());
  }
  if (!from._internal_dilithiumsignature().empty()) {
    _this->_internal_set_dilithiumsignature(from._internal_dilithiumsignature());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_createdat() != 0) {
    _this->_internal_set_createdat(from._internal_createdat());
  }
  if (from._internal_expiresat() != 0) {
    _this->_internal_set_expiresat(from._internal_expiresat());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AtomicSwapProto::CopyFrom(const AtomicSwapProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atomic.AtomicSwapProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtomicSwapProto::IsInitialized() const {
  return true;
}

void AtomicSwapProto::InternalSwap(AtomicSwapProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.senderaddress_, lhs_arena,
      &other->_impl_.senderaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.receiveraddress_, lhs_arena,
      &other->_impl_.receiveraddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.secrethash_, lhs_arena,
      &other->_impl_.secrethash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.secret_, lhs_arena,
      &other->_impl_.secret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.zkproof_, lhs_arena,
      &other->_impl_.zkproof_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.falconsignature_, lhs_arena,
      &other->_impl_.falconsignature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dilithiumsignature_, lhs_arena,
      &other->_impl_.dilithiumsignature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AtomicSwapProto, _impl_.state_)
      + sizeof(AtomicSwapProto::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(AtomicSwapProto, _impl_.amount_)>(
          reinterpret_cast<char*>(&_impl_.amount_),
          reinterpret_cast<char*>(&other->_impl_.amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AtomicSwapProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_atomic_5fswap_2eproto_getter, &descriptor_table_atomic_5fswap_2eproto_once,
      file_level_metadata_atomic_5fswap_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace atomic
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::atomic::AtomicSwapProto*
Arena::CreateMaybeMessage< ::atomic::AtomicSwapProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atomic::AtomicSwapProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
