// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: identity.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_identity_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_identity_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_identity_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_identity_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_identity_2eproto;
namespace identity {
class ZkIdentityProto;
struct ZkIdentityProtoDefaultTypeInternal;
extern ZkIdentityProtoDefaultTypeInternal _ZkIdentityProto_default_instance_;
}  // namespace identity
PROTOBUF_NAMESPACE_OPEN
template<> ::identity::ZkIdentityProto* Arena::CreateMaybeMessage<::identity::ZkIdentityProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace identity {

// ===================================================================

class ZkIdentityProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:identity.ZkIdentityProto) */ {
 public:
  inline ZkIdentityProto() : ZkIdentityProto(nullptr) {}
  ~ZkIdentityProto() override;
  explicit PROTOBUF_CONSTEXPR ZkIdentityProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZkIdentityProto(const ZkIdentityProto& from);
  ZkIdentityProto(ZkIdentityProto&& from) noexcept
    : ZkIdentityProto() {
    *this = ::std::move(from);
  }

  inline ZkIdentityProto& operator=(const ZkIdentityProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZkIdentityProto& operator=(ZkIdentityProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZkIdentityProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZkIdentityProto* internal_default_instance() {
    return reinterpret_cast<const ZkIdentityProto*>(
               &_ZkIdentityProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ZkIdentityProto& a, ZkIdentityProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ZkIdentityProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZkIdentityProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZkIdentityProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZkIdentityProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZkIdentityProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZkIdentityProto& from) {
    ZkIdentityProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZkIdentityProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "identity.ZkIdentityProto";
  }
  protected:
  explicit ZkIdentityProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kNameFieldNumber = 2,
    kPublicKeyFieldNumber = 3,
    kMetadataHashFieldNumber = 4,
    kZkProofFieldNumber = 6,
    kFalconSignatureFieldNumber = 7,
    kDilithiumSignatureFieldNumber = 8,
    kCreatedAtFieldNumber = 5,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string publicKey = 3;
  void clear_publickey();
  const std::string& publickey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_publickey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_publickey();
  PROTOBUF_NODISCARD std::string* release_publickey();
  void set_allocated_publickey(std::string* publickey);
  private:
  const std::string& _internal_publickey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_publickey(const std::string& value);
  std::string* _internal_mutable_publickey();
  public:

  // string metadataHash = 4;
  void clear_metadatahash();
  const std::string& metadatahash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadatahash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadatahash();
  PROTOBUF_NODISCARD std::string* release_metadatahash();
  void set_allocated_metadatahash(std::string* metadatahash);
  private:
  const std::string& _internal_metadatahash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadatahash(const std::string& value);
  std::string* _internal_mutable_metadatahash();
  public:

  // string zkProof = 6;
  void clear_zkproof();
  const std::string& zkproof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zkproof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zkproof();
  PROTOBUF_NODISCARD std::string* release_zkproof();
  void set_allocated_zkproof(std::string* zkproof);
  private:
  const std::string& _internal_zkproof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zkproof(const std::string& value);
  std::string* _internal_mutable_zkproof();
  public:

  // string falconSignature = 7;
  void clear_falconsignature();
  const std::string& falconsignature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_falconsignature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_falconsignature();
  PROTOBUF_NODISCARD std::string* release_falconsignature();
  void set_allocated_falconsignature(std::string* falconsignature);
  private:
  const std::string& _internal_falconsignature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_falconsignature(const std::string& value);
  std::string* _internal_mutable_falconsignature();
  public:

  // string dilithiumSignature = 8;
  void clear_dilithiumsignature();
  const std::string& dilithiumsignature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dilithiumsignature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dilithiumsignature();
  PROTOBUF_NODISCARD std::string* release_dilithiumsignature();
  void set_allocated_dilithiumsignature(std::string* dilithiumsignature);
  private:
  const std::string& _internal_dilithiumsignature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dilithiumsignature(const std::string& value);
  std::string* _internal_mutable_dilithiumsignature();
  public:

  // int64 createdAt = 5;
  void clear_createdat();
  int64_t createdat() const;
  void set_createdat(int64_t value);
  private:
  int64_t _internal_createdat() const;
  void _internal_set_createdat(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:identity.ZkIdentityProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publickey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadatahash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zkproof_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr falconsignature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dilithiumsignature_;
    int64_t createdat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_identity_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ZkIdentityProto

// string uuid = 1;
inline void ZkIdentityProto::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& ZkIdentityProto::uuid() const {
  // @@protoc_insertion_point(field_get:identity.ZkIdentityProto.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZkIdentityProto::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:identity.ZkIdentityProto.uuid)
}
inline std::string* ZkIdentityProto::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:identity.ZkIdentityProto.uuid)
  return _s;
}
inline const std::string& ZkIdentityProto::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void ZkIdentityProto::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* ZkIdentityProto::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* ZkIdentityProto::release_uuid() {
  // @@protoc_insertion_point(field_release:identity.ZkIdentityProto.uuid)
  return _impl_.uuid_.Release();
}
inline void ZkIdentityProto::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:identity.ZkIdentityProto.uuid)
}

// string name = 2;
inline void ZkIdentityProto::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ZkIdentityProto::name() const {
  // @@protoc_insertion_point(field_get:identity.ZkIdentityProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZkIdentityProto::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:identity.ZkIdentityProto.name)
}
inline std::string* ZkIdentityProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:identity.ZkIdentityProto.name)
  return _s;
}
inline const std::string& ZkIdentityProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ZkIdentityProto::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ZkIdentityProto::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ZkIdentityProto::release_name() {
  // @@protoc_insertion_point(field_release:identity.ZkIdentityProto.name)
  return _impl_.name_.Release();
}
inline void ZkIdentityProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:identity.ZkIdentityProto.name)
}

// string publicKey = 3;
inline void ZkIdentityProto::clear_publickey() {
  _impl_.publickey_.ClearToEmpty();
}
inline const std::string& ZkIdentityProto::publickey() const {
  // @@protoc_insertion_point(field_get:identity.ZkIdentityProto.publicKey)
  return _internal_publickey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZkIdentityProto::set_publickey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.publickey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:identity.ZkIdentityProto.publicKey)
}
inline std::string* ZkIdentityProto::mutable_publickey() {
  std::string* _s = _internal_mutable_publickey();
  // @@protoc_insertion_point(field_mutable:identity.ZkIdentityProto.publicKey)
  return _s;
}
inline const std::string& ZkIdentityProto::_internal_publickey() const {
  return _impl_.publickey_.Get();
}
inline void ZkIdentityProto::_internal_set_publickey(const std::string& value) {
  
  _impl_.publickey_.Set(value, GetArenaForAllocation());
}
inline std::string* ZkIdentityProto::_internal_mutable_publickey() {
  
  return _impl_.publickey_.Mutable(GetArenaForAllocation());
}
inline std::string* ZkIdentityProto::release_publickey() {
  // @@protoc_insertion_point(field_release:identity.ZkIdentityProto.publicKey)
  return _impl_.publickey_.Release();
}
inline void ZkIdentityProto::set_allocated_publickey(std::string* publickey) {
  if (publickey != nullptr) {
    
  } else {
    
  }
  _impl_.publickey_.SetAllocated(publickey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.publickey_.IsDefault()) {
    _impl_.publickey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:identity.ZkIdentityProto.publicKey)
}

// string metadataHash = 4;
inline void ZkIdentityProto::clear_metadatahash() {
  _impl_.metadatahash_.ClearToEmpty();
}
inline const std::string& ZkIdentityProto::metadatahash() const {
  // @@protoc_insertion_point(field_get:identity.ZkIdentityProto.metadataHash)
  return _internal_metadatahash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZkIdentityProto::set_metadatahash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metadatahash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:identity.ZkIdentityProto.metadataHash)
}
inline std::string* ZkIdentityProto::mutable_metadatahash() {
  std::string* _s = _internal_mutable_metadatahash();
  // @@protoc_insertion_point(field_mutable:identity.ZkIdentityProto.metadataHash)
  return _s;
}
inline const std::string& ZkIdentityProto::_internal_metadatahash() const {
  return _impl_.metadatahash_.Get();
}
inline void ZkIdentityProto::_internal_set_metadatahash(const std::string& value) {
  
  _impl_.metadatahash_.Set(value, GetArenaForAllocation());
}
inline std::string* ZkIdentityProto::_internal_mutable_metadatahash() {
  
  return _impl_.metadatahash_.Mutable(GetArenaForAllocation());
}
inline std::string* ZkIdentityProto::release_metadatahash() {
  // @@protoc_insertion_point(field_release:identity.ZkIdentityProto.metadataHash)
  return _impl_.metadatahash_.Release();
}
inline void ZkIdentityProto::set_allocated_metadatahash(std::string* metadatahash) {
  if (metadatahash != nullptr) {
    
  } else {
    
  }
  _impl_.metadatahash_.SetAllocated(metadatahash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadatahash_.IsDefault()) {
    _impl_.metadatahash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:identity.ZkIdentityProto.metadataHash)
}

// int64 createdAt = 5;
inline void ZkIdentityProto::clear_createdat() {
  _impl_.createdat_ = int64_t{0};
}
inline int64_t ZkIdentityProto::_internal_createdat() const {
  return _impl_.createdat_;
}
inline int64_t ZkIdentityProto::createdat() const {
  // @@protoc_insertion_point(field_get:identity.ZkIdentityProto.createdAt)
  return _internal_createdat();
}
inline void ZkIdentityProto::_internal_set_createdat(int64_t value) {
  
  _impl_.createdat_ = value;
}
inline void ZkIdentityProto::set_createdat(int64_t value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:identity.ZkIdentityProto.createdAt)
}

// string zkProof = 6;
inline void ZkIdentityProto::clear_zkproof() {
  _impl_.zkproof_.ClearToEmpty();
}
inline const std::string& ZkIdentityProto::zkproof() const {
  // @@protoc_insertion_point(field_get:identity.ZkIdentityProto.zkProof)
  return _internal_zkproof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZkIdentityProto::set_zkproof(ArgT0&& arg0, ArgT... args) {
 
 _impl_.zkproof_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:identity.ZkIdentityProto.zkProof)
}
inline std::string* ZkIdentityProto::mutable_zkproof() {
  std::string* _s = _internal_mutable_zkproof();
  // @@protoc_insertion_point(field_mutable:identity.ZkIdentityProto.zkProof)
  return _s;
}
inline const std::string& ZkIdentityProto::_internal_zkproof() const {
  return _impl_.zkproof_.Get();
}
inline void ZkIdentityProto::_internal_set_zkproof(const std::string& value) {
  
  _impl_.zkproof_.Set(value, GetArenaForAllocation());
}
inline std::string* ZkIdentityProto::_internal_mutable_zkproof() {
  
  return _impl_.zkproof_.Mutable(GetArenaForAllocation());
}
inline std::string* ZkIdentityProto::release_zkproof() {
  // @@protoc_insertion_point(field_release:identity.ZkIdentityProto.zkProof)
  return _impl_.zkproof_.Release();
}
inline void ZkIdentityProto::set_allocated_zkproof(std::string* zkproof) {
  if (zkproof != nullptr) {
    
  } else {
    
  }
  _impl_.zkproof_.SetAllocated(zkproof, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zkproof_.IsDefault()) {
    _impl_.zkproof_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:identity.ZkIdentityProto.zkProof)
}

// string falconSignature = 7;
inline void ZkIdentityProto::clear_falconsignature() {
  _impl_.falconsignature_.ClearToEmpty();
}
inline const std::string& ZkIdentityProto::falconsignature() const {
  // @@protoc_insertion_point(field_get:identity.ZkIdentityProto.falconSignature)
  return _internal_falconsignature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZkIdentityProto::set_falconsignature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.falconsignature_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:identity.ZkIdentityProto.falconSignature)
}
inline std::string* ZkIdentityProto::mutable_falconsignature() {
  std::string* _s = _internal_mutable_falconsignature();
  // @@protoc_insertion_point(field_mutable:identity.ZkIdentityProto.falconSignature)
  return _s;
}
inline const std::string& ZkIdentityProto::_internal_falconsignature() const {
  return _impl_.falconsignature_.Get();
}
inline void ZkIdentityProto::_internal_set_falconsignature(const std::string& value) {
  
  _impl_.falconsignature_.Set(value, GetArenaForAllocation());
}
inline std::string* ZkIdentityProto::_internal_mutable_falconsignature() {
  
  return _impl_.falconsignature_.Mutable(GetArenaForAllocation());
}
inline std::string* ZkIdentityProto::release_falconsignature() {
  // @@protoc_insertion_point(field_release:identity.ZkIdentityProto.falconSignature)
  return _impl_.falconsignature_.Release();
}
inline void ZkIdentityProto::set_allocated_falconsignature(std::string* falconsignature) {
  if (falconsignature != nullptr) {
    
  } else {
    
  }
  _impl_.falconsignature_.SetAllocated(falconsignature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.falconsignature_.IsDefault()) {
    _impl_.falconsignature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:identity.ZkIdentityProto.falconSignature)
}

// string dilithiumSignature = 8;
inline void ZkIdentityProto::clear_dilithiumsignature() {
  _impl_.dilithiumsignature_.ClearToEmpty();
}
inline const std::string& ZkIdentityProto::dilithiumsignature() const {
  // @@protoc_insertion_point(field_get:identity.ZkIdentityProto.dilithiumSignature)
  return _internal_dilithiumsignature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZkIdentityProto::set_dilithiumsignature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dilithiumsignature_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:identity.ZkIdentityProto.dilithiumSignature)
}
inline std::string* ZkIdentityProto::mutable_dilithiumsignature() {
  std::string* _s = _internal_mutable_dilithiumsignature();
  // @@protoc_insertion_point(field_mutable:identity.ZkIdentityProto.dilithiumSignature)
  return _s;
}
inline const std::string& ZkIdentityProto::_internal_dilithiumsignature() const {
  return _impl_.dilithiumsignature_.Get();
}
inline void ZkIdentityProto::_internal_set_dilithiumsignature(const std::string& value) {
  
  _impl_.dilithiumsignature_.Set(value, GetArenaForAllocation());
}
inline std::string* ZkIdentityProto::_internal_mutable_dilithiumsignature() {
  
  return _impl_.dilithiumsignature_.Mutable(GetArenaForAllocation());
}
inline std::string* ZkIdentityProto::release_dilithiumsignature() {
  // @@protoc_insertion_point(field_release:identity.ZkIdentityProto.dilithiumSignature)
  return _impl_.dilithiumsignature_.Release();
}
inline void ZkIdentityProto::set_allocated_dilithiumsignature(std::string* dilithiumsignature) {
  if (dilithiumsignature != nullptr) {
    
  } else {
    
  }
  _impl_.dilithiumsignature_.SetAllocated(dilithiumsignature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dilithiumsignature_.IsDefault()) {
    _impl_.dilithiumsignature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:identity.ZkIdentityProto.dilithiumSignature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace identity

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_identity_2eproto
