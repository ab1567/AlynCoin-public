// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_protos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_crypto_5fprotos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_crypto_5fprotos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_crypto_5fprotos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_crypto_5fprotos_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_crypto_5fprotos_2eproto;
namespace alyncoin {
class AddressProto;
struct AddressProtoDefaultTypeInternal;
extern AddressProtoDefaultTypeInternal _AddressProto_default_instance_;
class CryptoKeysProto;
struct CryptoKeysProtoDefaultTypeInternal;
extern CryptoKeysProtoDefaultTypeInternal _CryptoKeysProto_default_instance_;
class SignatureProto;
struct SignatureProtoDefaultTypeInternal;
extern SignatureProtoDefaultTypeInternal _SignatureProto_default_instance_;
}  // namespace alyncoin
PROTOBUF_NAMESPACE_OPEN
template<> ::alyncoin::AddressProto* Arena::CreateMaybeMessage<::alyncoin::AddressProto>(Arena*);
template<> ::alyncoin::CryptoKeysProto* Arena::CreateMaybeMessage<::alyncoin::CryptoKeysProto>(Arena*);
template<> ::alyncoin::SignatureProto* Arena::CreateMaybeMessage<::alyncoin::SignatureProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace alyncoin {

// ===================================================================

class CryptoKeysProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alyncoin.CryptoKeysProto) */ {
 public:
  inline CryptoKeysProto() : CryptoKeysProto(nullptr) {}
  ~CryptoKeysProto() override;
  explicit PROTOBUF_CONSTEXPR CryptoKeysProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CryptoKeysProto(const CryptoKeysProto& from);
  CryptoKeysProto(CryptoKeysProto&& from) noexcept
    : CryptoKeysProto() {
    *this = ::std::move(from);
  }

  inline CryptoKeysProto& operator=(const CryptoKeysProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CryptoKeysProto& operator=(CryptoKeysProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CryptoKeysProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CryptoKeysProto* internal_default_instance() {
    return reinterpret_cast<const CryptoKeysProto*>(
               &_CryptoKeysProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CryptoKeysProto& a, CryptoKeysProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CryptoKeysProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CryptoKeysProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CryptoKeysProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CryptoKeysProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CryptoKeysProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CryptoKeysProto& from) {
    CryptoKeysProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CryptoKeysProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alyncoin.CryptoKeysProto";
  }
  protected:
  explicit CryptoKeysProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateKeyFieldNumber = 1,
    kPublicKeyFieldNumber = 2,
  };
  // string private_key = 1;
  void clear_private_key();
  const std::string& private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // string public_key = 2;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // @@protoc_insertion_point(class_scope:alyncoin.CryptoKeysProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fprotos_2eproto;
};
// -------------------------------------------------------------------

class SignatureProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alyncoin.SignatureProto) */ {
 public:
  inline SignatureProto() : SignatureProto(nullptr) {}
  ~SignatureProto() override;
  explicit PROTOBUF_CONSTEXPR SignatureProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignatureProto(const SignatureProto& from);
  SignatureProto(SignatureProto&& from) noexcept
    : SignatureProto() {
    *this = ::std::move(from);
  }

  inline SignatureProto& operator=(const SignatureProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureProto& operator=(SignatureProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignatureProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignatureProto* internal_default_instance() {
    return reinterpret_cast<const SignatureProto*>(
               &_SignatureProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SignatureProto& a, SignatureProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SignatureProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignatureProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignatureProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignatureProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignatureProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignatureProto& from) {
    SignatureProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignatureProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alyncoin.SignatureProto";
  }
  protected:
  explicit SignatureProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
  };
  // string signature = 1;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:alyncoin.SignatureProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fprotos_2eproto;
};
// -------------------------------------------------------------------

class AddressProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alyncoin.AddressProto) */ {
 public:
  inline AddressProto() : AddressProto(nullptr) {}
  ~AddressProto() override;
  explicit PROTOBUF_CONSTEXPR AddressProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddressProto(const AddressProto& from);
  AddressProto(AddressProto&& from) noexcept
    : AddressProto() {
    *this = ::std::move(from);
  }

  inline AddressProto& operator=(const AddressProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressProto& operator=(AddressProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddressProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddressProto* internal_default_instance() {
    return reinterpret_cast<const AddressProto*>(
               &_AddressProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AddressProto& a, AddressProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddressProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddressProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddressProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddressProto& from) {
    AddressProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alyncoin.AddressProto";
  }
  protected:
  explicit AddressProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinerAddressFieldNumber = 1,
  };
  // string miner_address = 1;
  void clear_miner_address();
  const std::string& miner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_miner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_miner_address();
  PROTOBUF_NODISCARD std::string* release_miner_address();
  void set_allocated_miner_address(std::string* miner_address);
  private:
  const std::string& _internal_miner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_miner_address(const std::string& value);
  std::string* _internal_mutable_miner_address();
  public:

  // @@protoc_insertion_point(class_scope:alyncoin.AddressProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr miner_address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fprotos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CryptoKeysProto

// string private_key = 1;
inline void CryptoKeysProto::clear_private_key() {
  _impl_.private_key_.ClearToEmpty();
}
inline const std::string& CryptoKeysProto::private_key() const {
  // @@protoc_insertion_point(field_get:alyncoin.CryptoKeysProto.private_key)
  return _internal_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CryptoKeysProto::set_private_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.private_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.CryptoKeysProto.private_key)
}
inline std::string* CryptoKeysProto::mutable_private_key() {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:alyncoin.CryptoKeysProto.private_key)
  return _s;
}
inline const std::string& CryptoKeysProto::_internal_private_key() const {
  return _impl_.private_key_.Get();
}
inline void CryptoKeysProto::_internal_set_private_key(const std::string& value) {
  
  _impl_.private_key_.Set(value, GetArenaForAllocation());
}
inline std::string* CryptoKeysProto::_internal_mutable_private_key() {
  
  return _impl_.private_key_.Mutable(GetArenaForAllocation());
}
inline std::string* CryptoKeysProto::release_private_key() {
  // @@protoc_insertion_point(field_release:alyncoin.CryptoKeysProto.private_key)
  return _impl_.private_key_.Release();
}
inline void CryptoKeysProto::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  _impl_.private_key_.SetAllocated(private_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.private_key_.IsDefault()) {
    _impl_.private_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.CryptoKeysProto.private_key)
}

// string public_key = 2;
inline void CryptoKeysProto::clear_public_key() {
  _impl_.public_key_.ClearToEmpty();
}
inline const std::string& CryptoKeysProto::public_key() const {
  // @@protoc_insertion_point(field_get:alyncoin.CryptoKeysProto.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CryptoKeysProto::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.public_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.CryptoKeysProto.public_key)
}
inline std::string* CryptoKeysProto::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:alyncoin.CryptoKeysProto.public_key)
  return _s;
}
inline const std::string& CryptoKeysProto::_internal_public_key() const {
  return _impl_.public_key_.Get();
}
inline void CryptoKeysProto::_internal_set_public_key(const std::string& value) {
  
  _impl_.public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* CryptoKeysProto::_internal_mutable_public_key() {
  
  return _impl_.public_key_.Mutable(GetArenaForAllocation());
}
inline std::string* CryptoKeysProto::release_public_key() {
  // @@protoc_insertion_point(field_release:alyncoin.CryptoKeysProto.public_key)
  return _impl_.public_key_.Release();
}
inline void CryptoKeysProto::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  _impl_.public_key_.SetAllocated(public_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.public_key_.IsDefault()) {
    _impl_.public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.CryptoKeysProto.public_key)
}

// -------------------------------------------------------------------

// SignatureProto

// string signature = 1;
inline void SignatureProto::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& SignatureProto::signature() const {
  // @@protoc_insertion_point(field_get:alyncoin.SignatureProto.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignatureProto::set_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signature_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.SignatureProto.signature)
}
inline std::string* SignatureProto::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:alyncoin.SignatureProto.signature)
  return _s;
}
inline const std::string& SignatureProto::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void SignatureProto::_internal_set_signature(const std::string& value) {
  
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* SignatureProto::_internal_mutable_signature() {
  
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* SignatureProto::release_signature() {
  // @@protoc_insertion_point(field_release:alyncoin.SignatureProto.signature)
  return _impl_.signature_.Release();
}
inline void SignatureProto::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.SignatureProto.signature)
}

// -------------------------------------------------------------------

// AddressProto

// string miner_address = 1;
inline void AddressProto::clear_miner_address() {
  _impl_.miner_address_.ClearToEmpty();
}
inline const std::string& AddressProto::miner_address() const {
  // @@protoc_insertion_point(field_get:alyncoin.AddressProto.miner_address)
  return _internal_miner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddressProto::set_miner_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.miner_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.AddressProto.miner_address)
}
inline std::string* AddressProto::mutable_miner_address() {
  std::string* _s = _internal_mutable_miner_address();
  // @@protoc_insertion_point(field_mutable:alyncoin.AddressProto.miner_address)
  return _s;
}
inline const std::string& AddressProto::_internal_miner_address() const {
  return _impl_.miner_address_.Get();
}
inline void AddressProto::_internal_set_miner_address(const std::string& value) {
  
  _impl_.miner_address_.Set(value, GetArenaForAllocation());
}
inline std::string* AddressProto::_internal_mutable_miner_address() {
  
  return _impl_.miner_address_.Mutable(GetArenaForAllocation());
}
inline std::string* AddressProto::release_miner_address() {
  // @@protoc_insertion_point(field_release:alyncoin.AddressProto.miner_address)
  return _impl_.miner_address_.Release();
}
inline void AddressProto::set_allocated_miner_address(std::string* miner_address) {
  if (miner_address != nullptr) {
    
  } else {
    
  }
  _impl_.miner_address_.SetAllocated(miner_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.miner_address_.IsDefault()) {
    _impl_.miner_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.AddressProto.miner_address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace alyncoin

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_crypto_5fprotos_2eproto
