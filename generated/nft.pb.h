// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nft.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nft_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nft_2eproto;
class NFTProto;
struct NFTProtoDefaultTypeInternal;
extern NFTProtoDefaultTypeInternal _NFTProto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::NFTProto* Arena::CreateMaybeMessage<::NFTProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class NFTProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFTProto) */ {
 public:
  inline NFTProto() : NFTProto(nullptr) {}
  ~NFTProto() override;
  explicit PROTOBUF_CONSTEXPR NFTProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NFTProto(const NFTProto& from);
  NFTProto(NFTProto&& from) noexcept
    : NFTProto() {
    *this = ::std::move(from);
  }

  inline NFTProto& operator=(const NFTProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NFTProto& operator=(NFTProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NFTProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const NFTProto* internal_default_instance() {
    return reinterpret_cast<const NFTProto*>(
               &_NFTProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NFTProto& a, NFTProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NFTProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NFTProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NFTProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NFTProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NFTProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NFTProto& from) {
    NFTProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NFTProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFTProto";
  }
  protected:
  explicit NFTProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransferLedgerFieldNumber = 13,
    kBundledAssetsFieldNumber = 15,
    kPreviousVersionsFieldNumber = 20,
    kIdFieldNumber = 1,
    kCreatorFieldNumber = 2,
    kOwnerFieldNumber = 3,
    kMetadataFieldNumber = 4,
    kImageHashFieldNumber = 5,
    kSignatureFieldNumber = 7,
    kZkStarkProofFieldNumber = 8,
    kVersionFieldNumber = 9,
    kNftTypeFieldNumber = 10,
    kProofHashFieldNumber = 11,
    kExtraDataFieldNumber = 12,
    kCreatorIdentityFieldNumber = 14,
    kDilithiumSignatureFieldNumber = 16,
    kEncryptedMetadataFieldNumber = 19,
    kTimestampFieldNumber = 6,
    kExpiryTimestampFieldNumber = 17,
    kRevokedFieldNumber = 18,
  };
  // repeated string transferLedger = 13;
  int transferledger_size() const;
  private:
  int _internal_transferledger_size() const;
  public:
  void clear_transferledger();
  const std::string& transferledger(int index) const;
  std::string* mutable_transferledger(int index);
  void set_transferledger(int index, const std::string& value);
  void set_transferledger(int index, std::string&& value);
  void set_transferledger(int index, const char* value);
  void set_transferledger(int index, const char* value, size_t size);
  std::string* add_transferledger();
  void add_transferledger(const std::string& value);
  void add_transferledger(std::string&& value);
  void add_transferledger(const char* value);
  void add_transferledger(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& transferledger() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_transferledger();
  private:
  const std::string& _internal_transferledger(int index) const;
  std::string* _internal_add_transferledger();
  public:

  // repeated string bundled_assets = 15;
  int bundled_assets_size() const;
  private:
  int _internal_bundled_assets_size() const;
  public:
  void clear_bundled_assets();
  const std::string& bundled_assets(int index) const;
  std::string* mutable_bundled_assets(int index);
  void set_bundled_assets(int index, const std::string& value);
  void set_bundled_assets(int index, std::string&& value);
  void set_bundled_assets(int index, const char* value);
  void set_bundled_assets(int index, const char* value, size_t size);
  std::string* add_bundled_assets();
  void add_bundled_assets(const std::string& value);
  void add_bundled_assets(std::string&& value);
  void add_bundled_assets(const char* value);
  void add_bundled_assets(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bundled_assets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bundled_assets();
  private:
  const std::string& _internal_bundled_assets(int index) const;
  std::string* _internal_add_bundled_assets();
  public:

  // repeated string previous_versions = 20;
  int previous_versions_size() const;
  private:
  int _internal_previous_versions_size() const;
  public:
  void clear_previous_versions();
  const std::string& previous_versions(int index) const;
  std::string* mutable_previous_versions(int index);
  void set_previous_versions(int index, const std::string& value);
  void set_previous_versions(int index, std::string&& value);
  void set_previous_versions(int index, const char* value);
  void set_previous_versions(int index, const char* value, size_t size);
  std::string* add_previous_versions();
  void add_previous_versions(const std::string& value);
  void add_previous_versions(std::string&& value);
  void add_previous_versions(const char* value);
  void add_previous_versions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& previous_versions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_previous_versions();
  private:
  const std::string& _internal_previous_versions(int index) const;
  std::string* _internal_add_previous_versions();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string creator = 2;
  void clear_creator();
  const std::string& creator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* creator);
  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(const std::string& value);
  std::string* _internal_mutable_creator();
  public:

  // string owner = 3;
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string metadata = 4;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // string image_hash = 5;
  void clear_image_hash();
  const std::string& image_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_hash();
  PROTOBUF_NODISCARD std::string* release_image_hash();
  void set_allocated_image_hash(std::string* image_hash);
  private:
  const std::string& _internal_image_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_hash(const std::string& value);
  std::string* _internal_mutable_image_hash();
  public:

  // bytes signature = 7;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // bytes zk_stark_proof = 8;
  void clear_zk_stark_proof();
  const std::string& zk_stark_proof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zk_stark_proof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zk_stark_proof();
  PROTOBUF_NODISCARD std::string* release_zk_stark_proof();
  void set_allocated_zk_stark_proof(std::string* zk_stark_proof);
  private:
  const std::string& _internal_zk_stark_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zk_stark_proof(const std::string& value);
  std::string* _internal_mutable_zk_stark_proof();
  public:

  // string version = 9;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string nft_type = 10;
  void clear_nft_type();
  const std::string& nft_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nft_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nft_type();
  PROTOBUF_NODISCARD std::string* release_nft_type();
  void set_allocated_nft_type(std::string* nft_type);
  private:
  const std::string& _internal_nft_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nft_type(const std::string& value);
  std::string* _internal_mutable_nft_type();
  public:

  // string proof_hash = 11;
  void clear_proof_hash();
  const std::string& proof_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proof_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proof_hash();
  PROTOBUF_NODISCARD std::string* release_proof_hash();
  void set_allocated_proof_hash(std::string* proof_hash);
  private:
  const std::string& _internal_proof_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof_hash(const std::string& value);
  std::string* _internal_mutable_proof_hash();
  public:

  // string extra_data = 12;
  void clear_extra_data();
  const std::string& extra_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra_data();
  PROTOBUF_NODISCARD std::string* release_extra_data();
  void set_allocated_extra_data(std::string* extra_data);
  private:
  const std::string& _internal_extra_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra_data(const std::string& value);
  std::string* _internal_mutable_extra_data();
  public:

  // string creator_identity = 14;
  void clear_creator_identity();
  const std::string& creator_identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator_identity();
  PROTOBUF_NODISCARD std::string* release_creator_identity();
  void set_allocated_creator_identity(std::string* creator_identity);
  private:
  const std::string& _internal_creator_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator_identity(const std::string& value);
  std::string* _internal_mutable_creator_identity();
  public:

  // bytes dilithium_signature = 16;
  void clear_dilithium_signature();
  const std::string& dilithium_signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dilithium_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dilithium_signature();
  PROTOBUF_NODISCARD std::string* release_dilithium_signature();
  void set_allocated_dilithium_signature(std::string* dilithium_signature);
  private:
  const std::string& _internal_dilithium_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dilithium_signature(const std::string& value);
  std::string* _internal_mutable_dilithium_signature();
  public:

  // string encrypted_metadata = 19;
  void clear_encrypted_metadata();
  const std::string& encrypted_metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encrypted_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encrypted_metadata();
  PROTOBUF_NODISCARD std::string* release_encrypted_metadata();
  void set_allocated_encrypted_metadata(std::string* encrypted_metadata);
  private:
  const std::string& _internal_encrypted_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_metadata(const std::string& value);
  std::string* _internal_mutable_encrypted_metadata();
  public:

  // int64 timestamp = 6;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int64 expiry_timestamp = 17;
  void clear_expiry_timestamp();
  int64_t expiry_timestamp() const;
  void set_expiry_timestamp(int64_t value);
  private:
  int64_t _internal_expiry_timestamp() const;
  void _internal_set_expiry_timestamp(int64_t value);
  public:

  // bool revoked = 18;
  void clear_revoked();
  bool revoked() const;
  void set_revoked(bool value);
  private:
  bool _internal_revoked() const;
  void _internal_set_revoked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:NFTProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> transferledger_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bundled_assets_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> previous_versions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zk_stark_proof_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nft_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dilithium_signature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_metadata_;
    int64_t timestamp_;
    int64_t expiry_timestamp_;
    bool revoked_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NFTProto

// string id = 1;
inline void NFTProto::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& NFTProto::id() const {
  // @@protoc_insertion_point(field_get:NFTProto.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NFTProto::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFTProto.id)
}
inline std::string* NFTProto::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:NFTProto.id)
  return _s;
}
inline const std::string& NFTProto::_internal_id() const {
  return _impl_.id_.Get();
}
inline void NFTProto::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* NFTProto::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* NFTProto::release_id() {
  // @@protoc_insertion_point(field_release:NFTProto.id)
  return _impl_.id_.Release();
}
inline void NFTProto::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFTProto.id)
}

// string creator = 2;
inline void NFTProto::clear_creator() {
  _impl_.creator_.ClearToEmpty();
}
inline const std::string& NFTProto::creator() const {
  // @@protoc_insertion_point(field_get:NFTProto.creator)
  return _internal_creator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NFTProto::set_creator(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFTProto.creator)
}
inline std::string* NFTProto::mutable_creator() {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:NFTProto.creator)
  return _s;
}
inline const std::string& NFTProto::_internal_creator() const {
  return _impl_.creator_.Get();
}
inline void NFTProto::_internal_set_creator(const std::string& value) {
  
  _impl_.creator_.Set(value, GetArenaForAllocation());
}
inline std::string* NFTProto::_internal_mutable_creator() {
  
  return _impl_.creator_.Mutable(GetArenaForAllocation());
}
inline std::string* NFTProto::release_creator() {
  // @@protoc_insertion_point(field_release:NFTProto.creator)
  return _impl_.creator_.Release();
}
inline void NFTProto::set_allocated_creator(std::string* creator) {
  if (creator != nullptr) {
    
  } else {
    
  }
  _impl_.creator_.SetAllocated(creator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creator_.IsDefault()) {
    _impl_.creator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFTProto.creator)
}

// string owner = 3;
inline void NFTProto::clear_owner() {
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& NFTProto::owner() const {
  // @@protoc_insertion_point(field_get:NFTProto.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NFTProto::set_owner(ArgT0&& arg0, ArgT... args) {
 
 _impl_.owner_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFTProto.owner)
}
inline std::string* NFTProto::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:NFTProto.owner)
  return _s;
}
inline const std::string& NFTProto::_internal_owner() const {
  return _impl_.owner_.Get();
}
inline void NFTProto::_internal_set_owner(const std::string& value) {
  
  _impl_.owner_.Set(value, GetArenaForAllocation());
}
inline std::string* NFTProto::_internal_mutable_owner() {
  
  return _impl_.owner_.Mutable(GetArenaForAllocation());
}
inline std::string* NFTProto::release_owner() {
  // @@protoc_insertion_point(field_release:NFTProto.owner)
  return _impl_.owner_.Release();
}
inline void NFTProto::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  _impl_.owner_.SetAllocated(owner, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFTProto.owner)
}

// string metadata = 4;
inline void NFTProto::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& NFTProto::metadata() const {
  // @@protoc_insertion_point(field_get:NFTProto.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NFTProto::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFTProto.metadata)
}
inline std::string* NFTProto::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:NFTProto.metadata)
  return _s;
}
inline const std::string& NFTProto::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void NFTProto::_internal_set_metadata(const std::string& value) {
  
  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* NFTProto::_internal_mutable_metadata() {
  
  return _impl_.metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* NFTProto::release_metadata() {
  // @@protoc_insertion_point(field_release:NFTProto.metadata)
  return _impl_.metadata_.Release();
}
inline void NFTProto::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  _impl_.metadata_.SetAllocated(metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFTProto.metadata)
}

// string image_hash = 5;
inline void NFTProto::clear_image_hash() {
  _impl_.image_hash_.ClearToEmpty();
}
inline const std::string& NFTProto::image_hash() const {
  // @@protoc_insertion_point(field_get:NFTProto.image_hash)
  return _internal_image_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NFTProto::set_image_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.image_hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFTProto.image_hash)
}
inline std::string* NFTProto::mutable_image_hash() {
  std::string* _s = _internal_mutable_image_hash();
  // @@protoc_insertion_point(field_mutable:NFTProto.image_hash)
  return _s;
}
inline const std::string& NFTProto::_internal_image_hash() const {
  return _impl_.image_hash_.Get();
}
inline void NFTProto::_internal_set_image_hash(const std::string& value) {
  
  _impl_.image_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* NFTProto::_internal_mutable_image_hash() {
  
  return _impl_.image_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* NFTProto::release_image_hash() {
  // @@protoc_insertion_point(field_release:NFTProto.image_hash)
  return _impl_.image_hash_.Release();
}
inline void NFTProto::set_allocated_image_hash(std::string* image_hash) {
  if (image_hash != nullptr) {
    
  } else {
    
  }
  _impl_.image_hash_.SetAllocated(image_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_hash_.IsDefault()) {
    _impl_.image_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFTProto.image_hash)
}

// int64 timestamp = 6;
inline void NFTProto::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t NFTProto::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t NFTProto::timestamp() const {
  // @@protoc_insertion_point(field_get:NFTProto.timestamp)
  return _internal_timestamp();
}
inline void NFTProto::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void NFTProto::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:NFTProto.timestamp)
}

// bytes signature = 7;
inline void NFTProto::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& NFTProto::signature() const {
  // @@protoc_insertion_point(field_get:NFTProto.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NFTProto::set_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFTProto.signature)
}
inline std::string* NFTProto::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:NFTProto.signature)
  return _s;
}
inline const std::string& NFTProto::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void NFTProto::_internal_set_signature(const std::string& value) {
  
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* NFTProto::_internal_mutable_signature() {
  
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* NFTProto::release_signature() {
  // @@protoc_insertion_point(field_release:NFTProto.signature)
  return _impl_.signature_.Release();
}
inline void NFTProto::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFTProto.signature)
}

// bytes zk_stark_proof = 8;
inline void NFTProto::clear_zk_stark_proof() {
  _impl_.zk_stark_proof_.ClearToEmpty();
}
inline const std::string& NFTProto::zk_stark_proof() const {
  // @@protoc_insertion_point(field_get:NFTProto.zk_stark_proof)
  return _internal_zk_stark_proof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NFTProto::set_zk_stark_proof(ArgT0&& arg0, ArgT... args) {
 
 _impl_.zk_stark_proof_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFTProto.zk_stark_proof)
}
inline std::string* NFTProto::mutable_zk_stark_proof() {
  std::string* _s = _internal_mutable_zk_stark_proof();
  // @@protoc_insertion_point(field_mutable:NFTProto.zk_stark_proof)
  return _s;
}
inline const std::string& NFTProto::_internal_zk_stark_proof() const {
  return _impl_.zk_stark_proof_.Get();
}
inline void NFTProto::_internal_set_zk_stark_proof(const std::string& value) {
  
  _impl_.zk_stark_proof_.Set(value, GetArenaForAllocation());
}
inline std::string* NFTProto::_internal_mutable_zk_stark_proof() {
  
  return _impl_.zk_stark_proof_.Mutable(GetArenaForAllocation());
}
inline std::string* NFTProto::release_zk_stark_proof() {
  // @@protoc_insertion_point(field_release:NFTProto.zk_stark_proof)
  return _impl_.zk_stark_proof_.Release();
}
inline void NFTProto::set_allocated_zk_stark_proof(std::string* zk_stark_proof) {
  if (zk_stark_proof != nullptr) {
    
  } else {
    
  }
  _impl_.zk_stark_proof_.SetAllocated(zk_stark_proof, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zk_stark_proof_.IsDefault()) {
    _impl_.zk_stark_proof_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFTProto.zk_stark_proof)
}

// string version = 9;
inline void NFTProto::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& NFTProto::version() const {
  // @@protoc_insertion_point(field_get:NFTProto.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NFTProto::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFTProto.version)
}
inline std::string* NFTProto::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:NFTProto.version)
  return _s;
}
inline const std::string& NFTProto::_internal_version() const {
  return _impl_.version_.Get();
}
inline void NFTProto::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* NFTProto::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* NFTProto::release_version() {
  // @@protoc_insertion_point(field_release:NFTProto.version)
  return _impl_.version_.Release();
}
inline void NFTProto::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFTProto.version)
}

// string nft_type = 10;
inline void NFTProto::clear_nft_type() {
  _impl_.nft_type_.ClearToEmpty();
}
inline const std::string& NFTProto::nft_type() const {
  // @@protoc_insertion_point(field_get:NFTProto.nft_type)
  return _internal_nft_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NFTProto::set_nft_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nft_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFTProto.nft_type)
}
inline std::string* NFTProto::mutable_nft_type() {
  std::string* _s = _internal_mutable_nft_type();
  // @@protoc_insertion_point(field_mutable:NFTProto.nft_type)
  return _s;
}
inline const std::string& NFTProto::_internal_nft_type() const {
  return _impl_.nft_type_.Get();
}
inline void NFTProto::_internal_set_nft_type(const std::string& value) {
  
  _impl_.nft_type_.Set(value, GetArenaForAllocation());
}
inline std::string* NFTProto::_internal_mutable_nft_type() {
  
  return _impl_.nft_type_.Mutable(GetArenaForAllocation());
}
inline std::string* NFTProto::release_nft_type() {
  // @@protoc_insertion_point(field_release:NFTProto.nft_type)
  return _impl_.nft_type_.Release();
}
inline void NFTProto::set_allocated_nft_type(std::string* nft_type) {
  if (nft_type != nullptr) {
    
  } else {
    
  }
  _impl_.nft_type_.SetAllocated(nft_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nft_type_.IsDefault()) {
    _impl_.nft_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFTProto.nft_type)
}

// string proof_hash = 11;
inline void NFTProto::clear_proof_hash() {
  _impl_.proof_hash_.ClearToEmpty();
}
inline const std::string& NFTProto::proof_hash() const {
  // @@protoc_insertion_point(field_get:NFTProto.proof_hash)
  return _internal_proof_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NFTProto::set_proof_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.proof_hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFTProto.proof_hash)
}
inline std::string* NFTProto::mutable_proof_hash() {
  std::string* _s = _internal_mutable_proof_hash();
  // @@protoc_insertion_point(field_mutable:NFTProto.proof_hash)
  return _s;
}
inline const std::string& NFTProto::_internal_proof_hash() const {
  return _impl_.proof_hash_.Get();
}
inline void NFTProto::_internal_set_proof_hash(const std::string& value) {
  
  _impl_.proof_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* NFTProto::_internal_mutable_proof_hash() {
  
  return _impl_.proof_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* NFTProto::release_proof_hash() {
  // @@protoc_insertion_point(field_release:NFTProto.proof_hash)
  return _impl_.proof_hash_.Release();
}
inline void NFTProto::set_allocated_proof_hash(std::string* proof_hash) {
  if (proof_hash != nullptr) {
    
  } else {
    
  }
  _impl_.proof_hash_.SetAllocated(proof_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proof_hash_.IsDefault()) {
    _impl_.proof_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFTProto.proof_hash)
}

// string extra_data = 12;
inline void NFTProto::clear_extra_data() {
  _impl_.extra_data_.ClearToEmpty();
}
inline const std::string& NFTProto::extra_data() const {
  // @@protoc_insertion_point(field_get:NFTProto.extra_data)
  return _internal_extra_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NFTProto::set_extra_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.extra_data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFTProto.extra_data)
}
inline std::string* NFTProto::mutable_extra_data() {
  std::string* _s = _internal_mutable_extra_data();
  // @@protoc_insertion_point(field_mutable:NFTProto.extra_data)
  return _s;
}
inline const std::string& NFTProto::_internal_extra_data() const {
  return _impl_.extra_data_.Get();
}
inline void NFTProto::_internal_set_extra_data(const std::string& value) {
  
  _impl_.extra_data_.Set(value, GetArenaForAllocation());
}
inline std::string* NFTProto::_internal_mutable_extra_data() {
  
  return _impl_.extra_data_.Mutable(GetArenaForAllocation());
}
inline std::string* NFTProto::release_extra_data() {
  // @@protoc_insertion_point(field_release:NFTProto.extra_data)
  return _impl_.extra_data_.Release();
}
inline void NFTProto::set_allocated_extra_data(std::string* extra_data) {
  if (extra_data != nullptr) {
    
  } else {
    
  }
  _impl_.extra_data_.SetAllocated(extra_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.extra_data_.IsDefault()) {
    _impl_.extra_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFTProto.extra_data)
}

// repeated string transferLedger = 13;
inline int NFTProto::_internal_transferledger_size() const {
  return _impl_.transferledger_.size();
}
inline int NFTProto::transferledger_size() const {
  return _internal_transferledger_size();
}
inline void NFTProto::clear_transferledger() {
  _impl_.transferledger_.Clear();
}
inline std::string* NFTProto::add_transferledger() {
  std::string* _s = _internal_add_transferledger();
  // @@protoc_insertion_point(field_add_mutable:NFTProto.transferLedger)
  return _s;
}
inline const std::string& NFTProto::_internal_transferledger(int index) const {
  return _impl_.transferledger_.Get(index);
}
inline const std::string& NFTProto::transferledger(int index) const {
  // @@protoc_insertion_point(field_get:NFTProto.transferLedger)
  return _internal_transferledger(index);
}
inline std::string* NFTProto::mutable_transferledger(int index) {
  // @@protoc_insertion_point(field_mutable:NFTProto.transferLedger)
  return _impl_.transferledger_.Mutable(index);
}
inline void NFTProto::set_transferledger(int index, const std::string& value) {
  _impl_.transferledger_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:NFTProto.transferLedger)
}
inline void NFTProto::set_transferledger(int index, std::string&& value) {
  _impl_.transferledger_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:NFTProto.transferLedger)
}
inline void NFTProto::set_transferledger(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.transferledger_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFTProto.transferLedger)
}
inline void NFTProto::set_transferledger(int index, const char* value, size_t size) {
  _impl_.transferledger_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFTProto.transferLedger)
}
inline std::string* NFTProto::_internal_add_transferledger() {
  return _impl_.transferledger_.Add();
}
inline void NFTProto::add_transferledger(const std::string& value) {
  _impl_.transferledger_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFTProto.transferLedger)
}
inline void NFTProto::add_transferledger(std::string&& value) {
  _impl_.transferledger_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFTProto.transferLedger)
}
inline void NFTProto::add_transferledger(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.transferledger_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFTProto.transferLedger)
}
inline void NFTProto::add_transferledger(const char* value, size_t size) {
  _impl_.transferledger_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFTProto.transferLedger)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NFTProto::transferledger() const {
  // @@protoc_insertion_point(field_list:NFTProto.transferLedger)
  return _impl_.transferledger_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NFTProto::mutable_transferledger() {
  // @@protoc_insertion_point(field_mutable_list:NFTProto.transferLedger)
  return &_impl_.transferledger_;
}

// string creator_identity = 14;
inline void NFTProto::clear_creator_identity() {
  _impl_.creator_identity_.ClearToEmpty();
}
inline const std::string& NFTProto::creator_identity() const {
  // @@protoc_insertion_point(field_get:NFTProto.creator_identity)
  return _internal_creator_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NFTProto::set_creator_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creator_identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFTProto.creator_identity)
}
inline std::string* NFTProto::mutable_creator_identity() {
  std::string* _s = _internal_mutable_creator_identity();
  // @@protoc_insertion_point(field_mutable:NFTProto.creator_identity)
  return _s;
}
inline const std::string& NFTProto::_internal_creator_identity() const {
  return _impl_.creator_identity_.Get();
}
inline void NFTProto::_internal_set_creator_identity(const std::string& value) {
  
  _impl_.creator_identity_.Set(value, GetArenaForAllocation());
}
inline std::string* NFTProto::_internal_mutable_creator_identity() {
  
  return _impl_.creator_identity_.Mutable(GetArenaForAllocation());
}
inline std::string* NFTProto::release_creator_identity() {
  // @@protoc_insertion_point(field_release:NFTProto.creator_identity)
  return _impl_.creator_identity_.Release();
}
inline void NFTProto::set_allocated_creator_identity(std::string* creator_identity) {
  if (creator_identity != nullptr) {
    
  } else {
    
  }
  _impl_.creator_identity_.SetAllocated(creator_identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creator_identity_.IsDefault()) {
    _impl_.creator_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFTProto.creator_identity)
}

// repeated string bundled_assets = 15;
inline int NFTProto::_internal_bundled_assets_size() const {
  return _impl_.bundled_assets_.size();
}
inline int NFTProto::bundled_assets_size() const {
  return _internal_bundled_assets_size();
}
inline void NFTProto::clear_bundled_assets() {
  _impl_.bundled_assets_.Clear();
}
inline std::string* NFTProto::add_bundled_assets() {
  std::string* _s = _internal_add_bundled_assets();
  // @@protoc_insertion_point(field_add_mutable:NFTProto.bundled_assets)
  return _s;
}
inline const std::string& NFTProto::_internal_bundled_assets(int index) const {
  return _impl_.bundled_assets_.Get(index);
}
inline const std::string& NFTProto::bundled_assets(int index) const {
  // @@protoc_insertion_point(field_get:NFTProto.bundled_assets)
  return _internal_bundled_assets(index);
}
inline std::string* NFTProto::mutable_bundled_assets(int index) {
  // @@protoc_insertion_point(field_mutable:NFTProto.bundled_assets)
  return _impl_.bundled_assets_.Mutable(index);
}
inline void NFTProto::set_bundled_assets(int index, const std::string& value) {
  _impl_.bundled_assets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:NFTProto.bundled_assets)
}
inline void NFTProto::set_bundled_assets(int index, std::string&& value) {
  _impl_.bundled_assets_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:NFTProto.bundled_assets)
}
inline void NFTProto::set_bundled_assets(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bundled_assets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFTProto.bundled_assets)
}
inline void NFTProto::set_bundled_assets(int index, const char* value, size_t size) {
  _impl_.bundled_assets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFTProto.bundled_assets)
}
inline std::string* NFTProto::_internal_add_bundled_assets() {
  return _impl_.bundled_assets_.Add();
}
inline void NFTProto::add_bundled_assets(const std::string& value) {
  _impl_.bundled_assets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFTProto.bundled_assets)
}
inline void NFTProto::add_bundled_assets(std::string&& value) {
  _impl_.bundled_assets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFTProto.bundled_assets)
}
inline void NFTProto::add_bundled_assets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bundled_assets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFTProto.bundled_assets)
}
inline void NFTProto::add_bundled_assets(const char* value, size_t size) {
  _impl_.bundled_assets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFTProto.bundled_assets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NFTProto::bundled_assets() const {
  // @@protoc_insertion_point(field_list:NFTProto.bundled_assets)
  return _impl_.bundled_assets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NFTProto::mutable_bundled_assets() {
  // @@protoc_insertion_point(field_mutable_list:NFTProto.bundled_assets)
  return &_impl_.bundled_assets_;
}

// bytes dilithium_signature = 16;
inline void NFTProto::clear_dilithium_signature() {
  _impl_.dilithium_signature_.ClearToEmpty();
}
inline const std::string& NFTProto::dilithium_signature() const {
  // @@protoc_insertion_point(field_get:NFTProto.dilithium_signature)
  return _internal_dilithium_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NFTProto::set_dilithium_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dilithium_signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFTProto.dilithium_signature)
}
inline std::string* NFTProto::mutable_dilithium_signature() {
  std::string* _s = _internal_mutable_dilithium_signature();
  // @@protoc_insertion_point(field_mutable:NFTProto.dilithium_signature)
  return _s;
}
inline const std::string& NFTProto::_internal_dilithium_signature() const {
  return _impl_.dilithium_signature_.Get();
}
inline void NFTProto::_internal_set_dilithium_signature(const std::string& value) {
  
  _impl_.dilithium_signature_.Set(value, GetArenaForAllocation());
}
inline std::string* NFTProto::_internal_mutable_dilithium_signature() {
  
  return _impl_.dilithium_signature_.Mutable(GetArenaForAllocation());
}
inline std::string* NFTProto::release_dilithium_signature() {
  // @@protoc_insertion_point(field_release:NFTProto.dilithium_signature)
  return _impl_.dilithium_signature_.Release();
}
inline void NFTProto::set_allocated_dilithium_signature(std::string* dilithium_signature) {
  if (dilithium_signature != nullptr) {
    
  } else {
    
  }
  _impl_.dilithium_signature_.SetAllocated(dilithium_signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dilithium_signature_.IsDefault()) {
    _impl_.dilithium_signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFTProto.dilithium_signature)
}

// int64 expiry_timestamp = 17;
inline void NFTProto::clear_expiry_timestamp() {
  _impl_.expiry_timestamp_ = int64_t{0};
}
inline int64_t NFTProto::_internal_expiry_timestamp() const {
  return _impl_.expiry_timestamp_;
}
inline int64_t NFTProto::expiry_timestamp() const {
  // @@protoc_insertion_point(field_get:NFTProto.expiry_timestamp)
  return _internal_expiry_timestamp();
}
inline void NFTProto::_internal_set_expiry_timestamp(int64_t value) {
  
  _impl_.expiry_timestamp_ = value;
}
inline void NFTProto::set_expiry_timestamp(int64_t value) {
  _internal_set_expiry_timestamp(value);
  // @@protoc_insertion_point(field_set:NFTProto.expiry_timestamp)
}

// bool revoked = 18;
inline void NFTProto::clear_revoked() {
  _impl_.revoked_ = false;
}
inline bool NFTProto::_internal_revoked() const {
  return _impl_.revoked_;
}
inline bool NFTProto::revoked() const {
  // @@protoc_insertion_point(field_get:NFTProto.revoked)
  return _internal_revoked();
}
inline void NFTProto::_internal_set_revoked(bool value) {
  
  _impl_.revoked_ = value;
}
inline void NFTProto::set_revoked(bool value) {
  _internal_set_revoked(value);
  // @@protoc_insertion_point(field_set:NFTProto.revoked)
}

// string encrypted_metadata = 19;
inline void NFTProto::clear_encrypted_metadata() {
  _impl_.encrypted_metadata_.ClearToEmpty();
}
inline const std::string& NFTProto::encrypted_metadata() const {
  // @@protoc_insertion_point(field_get:NFTProto.encrypted_metadata)
  return _internal_encrypted_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NFTProto::set_encrypted_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.encrypted_metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NFTProto.encrypted_metadata)
}
inline std::string* NFTProto::mutable_encrypted_metadata() {
  std::string* _s = _internal_mutable_encrypted_metadata();
  // @@protoc_insertion_point(field_mutable:NFTProto.encrypted_metadata)
  return _s;
}
inline const std::string& NFTProto::_internal_encrypted_metadata() const {
  return _impl_.encrypted_metadata_.Get();
}
inline void NFTProto::_internal_set_encrypted_metadata(const std::string& value) {
  
  _impl_.encrypted_metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* NFTProto::_internal_mutable_encrypted_metadata() {
  
  return _impl_.encrypted_metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* NFTProto::release_encrypted_metadata() {
  // @@protoc_insertion_point(field_release:NFTProto.encrypted_metadata)
  return _impl_.encrypted_metadata_.Release();
}
inline void NFTProto::set_allocated_encrypted_metadata(std::string* encrypted_metadata) {
  if (encrypted_metadata != nullptr) {
    
  } else {
    
  }
  _impl_.encrypted_metadata_.SetAllocated(encrypted_metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encrypted_metadata_.IsDefault()) {
    _impl_.encrypted_metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NFTProto.encrypted_metadata)
}

// repeated string previous_versions = 20;
inline int NFTProto::_internal_previous_versions_size() const {
  return _impl_.previous_versions_.size();
}
inline int NFTProto::previous_versions_size() const {
  return _internal_previous_versions_size();
}
inline void NFTProto::clear_previous_versions() {
  _impl_.previous_versions_.Clear();
}
inline std::string* NFTProto::add_previous_versions() {
  std::string* _s = _internal_add_previous_versions();
  // @@protoc_insertion_point(field_add_mutable:NFTProto.previous_versions)
  return _s;
}
inline const std::string& NFTProto::_internal_previous_versions(int index) const {
  return _impl_.previous_versions_.Get(index);
}
inline const std::string& NFTProto::previous_versions(int index) const {
  // @@protoc_insertion_point(field_get:NFTProto.previous_versions)
  return _internal_previous_versions(index);
}
inline std::string* NFTProto::mutable_previous_versions(int index) {
  // @@protoc_insertion_point(field_mutable:NFTProto.previous_versions)
  return _impl_.previous_versions_.Mutable(index);
}
inline void NFTProto::set_previous_versions(int index, const std::string& value) {
  _impl_.previous_versions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:NFTProto.previous_versions)
}
inline void NFTProto::set_previous_versions(int index, std::string&& value) {
  _impl_.previous_versions_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:NFTProto.previous_versions)
}
inline void NFTProto::set_previous_versions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.previous_versions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFTProto.previous_versions)
}
inline void NFTProto::set_previous_versions(int index, const char* value, size_t size) {
  _impl_.previous_versions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFTProto.previous_versions)
}
inline std::string* NFTProto::_internal_add_previous_versions() {
  return _impl_.previous_versions_.Add();
}
inline void NFTProto::add_previous_versions(const std::string& value) {
  _impl_.previous_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFTProto.previous_versions)
}
inline void NFTProto::add_previous_versions(std::string&& value) {
  _impl_.previous_versions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFTProto.previous_versions)
}
inline void NFTProto::add_previous_versions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.previous_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFTProto.previous_versions)
}
inline void NFTProto::add_previous_versions(const char* value, size_t size) {
  _impl_.previous_versions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFTProto.previous_versions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NFTProto::previous_versions() const {
  // @@protoc_insertion_point(field_list:NFTProto.previous_versions)
  return _impl_.previous_versions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NFTProto::mutable_previous_versions() {
  // @@protoc_insertion_point(field_mutable_list:NFTProto.previous_versions)
  return &_impl_.previous_versions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nft_2eproto
