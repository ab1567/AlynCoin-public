// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: identity.proto
// Protobuf C++ Version: 5.29.3

#include "identity.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace identity {

inline constexpr ZkIdentityProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : uuid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        publickey_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        metadatahash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        zkproof_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        falconsignature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dilithiumsignature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        createdat_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ZkIdentityProto::ZkIdentityProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ZkIdentityProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZkIdentityProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZkIdentityProtoDefaultTypeInternal() {}
  union {
    ZkIdentityProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZkIdentityProtoDefaultTypeInternal _ZkIdentityProto_default_instance_;
}  // namespace identity
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_identity_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_identity_2eproto = nullptr;
const ::uint32_t
    TableStruct_identity_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::identity::ZkIdentityProto, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::identity::ZkIdentityProto, _impl_.uuid_),
        PROTOBUF_FIELD_OFFSET(::identity::ZkIdentityProto, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::identity::ZkIdentityProto, _impl_.publickey_),
        PROTOBUF_FIELD_OFFSET(::identity::ZkIdentityProto, _impl_.metadatahash_),
        PROTOBUF_FIELD_OFFSET(::identity::ZkIdentityProto, _impl_.createdat_),
        PROTOBUF_FIELD_OFFSET(::identity::ZkIdentityProto, _impl_.zkproof_),
        PROTOBUF_FIELD_OFFSET(::identity::ZkIdentityProto, _impl_.falconsignature_),
        PROTOBUF_FIELD_OFFSET(::identity::ZkIdentityProto, _impl_.dilithiumsignature_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::identity::ZkIdentityProto)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::identity::_ZkIdentityProto_default_instance_._instance,
};
const char descriptor_table_protodef_identity_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\016identity.proto\022\010identity\"\257\001\n\017ZkIdentit"
    "yProto\022\014\n\004uuid\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\021\n\tpu"
    "blicKey\030\003 \001(\t\022\024\n\014metadataHash\030\004 \001(\t\022\021\n\tc"
    "reatedAt\030\005 \001(\003\022\017\n\007zkProof\030\006 \001(\014\022\027\n\017falco"
    "nSignature\030\007 \001(\014\022\032\n\022dilithiumSignature\030\010"
    " \001(\014b\006proto3"
};
static ::absl::once_flag descriptor_table_identity_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_identity_2eproto = {
    false,
    false,
    212,
    descriptor_table_protodef_identity_2eproto,
    "identity.proto",
    &descriptor_table_identity_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_identity_2eproto::offsets,
    file_level_enum_descriptors_identity_2eproto,
    file_level_service_descriptors_identity_2eproto,
};
namespace identity {
// ===================================================================

class ZkIdentityProto::_Internal {
 public:
};

ZkIdentityProto::ZkIdentityProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:identity.ZkIdentityProto)
}
inline PROTOBUF_NDEBUG_INLINE ZkIdentityProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::identity::ZkIdentityProto& from_msg)
      : uuid_(arena, from.uuid_),
        name_(arena, from.name_),
        publickey_(arena, from.publickey_),
        metadatahash_(arena, from.metadatahash_),
        zkproof_(arena, from.zkproof_),
        falconsignature_(arena, from.falconsignature_),
        dilithiumsignature_(arena, from.dilithiumsignature_),
        _cached_size_{0} {}

ZkIdentityProto::ZkIdentityProto(
    ::google::protobuf::Arena* arena,
    const ZkIdentityProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ZkIdentityProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.createdat_ = from._impl_.createdat_;

  // @@protoc_insertion_point(copy_constructor:identity.ZkIdentityProto)
}
inline PROTOBUF_NDEBUG_INLINE ZkIdentityProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : uuid_(arena),
        name_(arena),
        publickey_(arena),
        metadatahash_(arena),
        zkproof_(arena),
        falconsignature_(arena),
        dilithiumsignature_(arena),
        _cached_size_{0} {}

inline void ZkIdentityProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.createdat_ = {};
}
ZkIdentityProto::~ZkIdentityProto() {
  // @@protoc_insertion_point(destructor:identity.ZkIdentityProto)
  SharedDtor(*this);
}
inline void ZkIdentityProto::SharedDtor(MessageLite& self) {
  ZkIdentityProto& this_ = static_cast<ZkIdentityProto&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.uuid_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.publickey_.Destroy();
  this_._impl_.metadatahash_.Destroy();
  this_._impl_.zkproof_.Destroy();
  this_._impl_.falconsignature_.Destroy();
  this_._impl_.dilithiumsignature_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ZkIdentityProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ZkIdentityProto(arena);
}
constexpr auto ZkIdentityProto::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ZkIdentityProto),
                                            alignof(ZkIdentityProto));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ZkIdentityProto::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ZkIdentityProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ZkIdentityProto::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ZkIdentityProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ZkIdentityProto::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ZkIdentityProto>(), &ZkIdentityProto::ByteSizeLong,
            &ZkIdentityProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ZkIdentityProto, _impl_._cached_size_),
        false,
    },
    &ZkIdentityProto::kDescriptorMethods,
    &descriptor_table_identity_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ZkIdentityProto::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 70, 2> ZkIdentityProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::identity::ZkIdentityProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bytes dilithiumSignature = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(ZkIdentityProto, _impl_.dilithiumsignature_)}},
    // string uuid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ZkIdentityProto, _impl_.uuid_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ZkIdentityProto, _impl_.name_)}},
    // string publicKey = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ZkIdentityProto, _impl_.publickey_)}},
    // string metadataHash = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ZkIdentityProto, _impl_.metadatahash_)}},
    // int64 createdAt = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ZkIdentityProto, _impl_.createdat_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ZkIdentityProto, _impl_.createdat_)}},
    // bytes zkProof = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ZkIdentityProto, _impl_.zkproof_)}},
    // bytes falconSignature = 7;
    {::_pbi::TcParser::FastBS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(ZkIdentityProto, _impl_.falconsignature_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string uuid = 1;
    {PROTOBUF_FIELD_OFFSET(ZkIdentityProto, _impl_.uuid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(ZkIdentityProto, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string publicKey = 3;
    {PROTOBUF_FIELD_OFFSET(ZkIdentityProto, _impl_.publickey_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string metadataHash = 4;
    {PROTOBUF_FIELD_OFFSET(ZkIdentityProto, _impl_.metadatahash_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 createdAt = 5;
    {PROTOBUF_FIELD_OFFSET(ZkIdentityProto, _impl_.createdat_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bytes zkProof = 6;
    {PROTOBUF_FIELD_OFFSET(ZkIdentityProto, _impl_.zkproof_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes falconSignature = 7;
    {PROTOBUF_FIELD_OFFSET(ZkIdentityProto, _impl_.falconsignature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes dilithiumSignature = 8;
    {PROTOBUF_FIELD_OFFSET(ZkIdentityProto, _impl_.dilithiumsignature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\30\4\4\11\14\0\0\0\0\0\0\0\0\0\0\0"
    "identity.ZkIdentityProto"
    "uuid"
    "name"
    "publicKey"
    "metadataHash"
  }},
};

PROTOBUF_NOINLINE void ZkIdentityProto::Clear() {
// @@protoc_insertion_point(message_clear_start:identity.ZkIdentityProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.publickey_.ClearToEmpty();
  _impl_.metadatahash_.ClearToEmpty();
  _impl_.zkproof_.ClearToEmpty();
  _impl_.falconsignature_.ClearToEmpty();
  _impl_.dilithiumsignature_.ClearToEmpty();
  _impl_.createdat_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ZkIdentityProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ZkIdentityProto& this_ = static_cast<const ZkIdentityProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ZkIdentityProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ZkIdentityProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:identity.ZkIdentityProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string uuid = 1;
          if (!this_._internal_uuid().empty()) {
            const std::string& _s = this_._internal_uuid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "identity.ZkIdentityProto.uuid");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string name = 2;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "identity.ZkIdentityProto.name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string publicKey = 3;
          if (!this_._internal_publickey().empty()) {
            const std::string& _s = this_._internal_publickey();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "identity.ZkIdentityProto.publicKey");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string metadataHash = 4;
          if (!this_._internal_metadatahash().empty()) {
            const std::string& _s = this_._internal_metadatahash();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "identity.ZkIdentityProto.metadataHash");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // int64 createdAt = 5;
          if (this_._internal_createdat() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<5>(
                    stream, this_._internal_createdat(), target);
          }

          // bytes zkProof = 6;
          if (!this_._internal_zkproof().empty()) {
            const std::string& _s = this_._internal_zkproof();
            target = stream->WriteBytesMaybeAliased(6, _s, target);
          }

          // bytes falconSignature = 7;
          if (!this_._internal_falconsignature().empty()) {
            const std::string& _s = this_._internal_falconsignature();
            target = stream->WriteBytesMaybeAliased(7, _s, target);
          }

          // bytes dilithiumSignature = 8;
          if (!this_._internal_dilithiumsignature().empty()) {
            const std::string& _s = this_._internal_dilithiumsignature();
            target = stream->WriteBytesMaybeAliased(8, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:identity.ZkIdentityProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ZkIdentityProto::ByteSizeLong(const MessageLite& base) {
          const ZkIdentityProto& this_ = static_cast<const ZkIdentityProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ZkIdentityProto::ByteSizeLong() const {
          const ZkIdentityProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:identity.ZkIdentityProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string uuid = 1;
            if (!this_._internal_uuid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uuid());
            }
            // string name = 2;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string publicKey = 3;
            if (!this_._internal_publickey().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_publickey());
            }
            // string metadataHash = 4;
            if (!this_._internal_metadatahash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_metadatahash());
            }
            // bytes zkProof = 6;
            if (!this_._internal_zkproof().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_zkproof());
            }
            // bytes falconSignature = 7;
            if (!this_._internal_falconsignature().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_falconsignature());
            }
            // bytes dilithiumSignature = 8;
            if (!this_._internal_dilithiumsignature().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_dilithiumsignature());
            }
            // int64 createdAt = 5;
            if (this_._internal_createdat() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_createdat());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ZkIdentityProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ZkIdentityProto*>(&to_msg);
  auto& from = static_cast<const ZkIdentityProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:identity.ZkIdentityProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_publickey().empty()) {
    _this->_internal_set_publickey(from._internal_publickey());
  }
  if (!from._internal_metadatahash().empty()) {
    _this->_internal_set_metadatahash(from._internal_metadatahash());
  }
  if (!from._internal_zkproof().empty()) {
    _this->_internal_set_zkproof(from._internal_zkproof());
  }
  if (!from._internal_falconsignature().empty()) {
    _this->_internal_set_falconsignature(from._internal_falconsignature());
  }
  if (!from._internal_dilithiumsignature().empty()) {
    _this->_internal_set_dilithiumsignature(from._internal_dilithiumsignature());
  }
  if (from._internal_createdat() != 0) {
    _this->_impl_.createdat_ = from._impl_.createdat_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ZkIdentityProto::CopyFrom(const ZkIdentityProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:identity.ZkIdentityProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ZkIdentityProto::InternalSwap(ZkIdentityProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uuid_, &other->_impl_.uuid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.publickey_, &other->_impl_.publickey_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadatahash_, &other->_impl_.metadatahash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zkproof_, &other->_impl_.zkproof_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.falconsignature_, &other->_impl_.falconsignature_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dilithiumsignature_, &other->_impl_.dilithiumsignature_, arena);
        swap(_impl_.createdat_, other->_impl_.createdat_);
}

::google::protobuf::Metadata ZkIdentityProto::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace identity
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_identity_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
