// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: nft.proto
// Protobuf C++ Version: 5.29.3

#include "nft.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr NFTProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : transferledger_{},
        bundled_assets_{},
        previous_versions_{},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        creator_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        owner_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        metadata_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        image_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        signature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        zk_stark_proof_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nft_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        proof_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        extra_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        creator_identity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dilithium_signature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        encrypted_metadata_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{::int64_t{0}},
        expiry_timestamp_{::int64_t{0}},
        revoked_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NFTProto::NFTProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct NFTProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NFTProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NFTProtoDefaultTypeInternal() {}
  union {
    NFTProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NFTProtoDefaultTypeInternal _NFTProto_default_instance_;
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_nft_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_nft_2eproto = nullptr;
const ::uint32_t
    TableStruct_nft_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NFTProto, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.creator_),
        PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.owner_),
        PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.metadata_),
        PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.image_hash_),
        PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.signature_),
        PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.zk_stark_proof_),
        PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.nft_type_),
        PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.proof_hash_),
        PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.extra_data_),
        PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.transferledger_),
        PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.creator_identity_),
        PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.bundled_assets_),
        PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.dilithium_signature_),
        PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.expiry_timestamp_),
        PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.revoked_),
        PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.encrypted_metadata_),
        PROTOBUF_FIELD_OFFSET(::NFTProto, _impl_.previous_versions_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::NFTProto)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_NFTProto_default_instance_._instance,
};
const char descriptor_table_protodef_nft_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\tnft.proto\"\256\003\n\010NFTProto\022\n\n\002id\030\001 \001(\t\022\017\n\007"
    "creator\030\002 \001(\t\022\r\n\005owner\030\003 \001(\t\022\020\n\010metadata"
    "\030\004 \001(\t\022\022\n\nimage_hash\030\005 \001(\t\022\021\n\ttimestamp\030"
    "\006 \001(\003\022\021\n\tsignature\030\007 \001(\014\022\026\n\016zk_stark_pro"
    "of\030\010 \001(\014\022\017\n\007version\030\t \001(\t\022\020\n\010nft_type\030\n "
    "\001(\t\022\022\n\nproof_hash\030\013 \001(\t\022\022\n\nextra_data\030\014 "
    "\001(\t\022\026\n\016transferLedger\030\r \003(\t\022\030\n\020creator_i"
    "dentity\030\016 \001(\t\022\026\n\016bundled_assets\030\017 \003(\t\022\033\n"
    "\023dilithium_signature\030\020 \001(\014\022\030\n\020expiry_tim"
    "estamp\030\021 \001(\003\022\017\n\007revoked\030\022 \001(\010\022\032\n\022encrypt"
    "ed_metadata\030\023 \001(\t\022\031\n\021previous_versions\030\024"
    " \003(\tb\006proto3"
};
static ::absl::once_flag descriptor_table_nft_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_nft_2eproto = {
    false,
    false,
    452,
    descriptor_table_protodef_nft_2eproto,
    "nft.proto",
    &descriptor_table_nft_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_nft_2eproto::offsets,
    file_level_enum_descriptors_nft_2eproto,
    file_level_service_descriptors_nft_2eproto,
};
// ===================================================================

class NFTProto::_Internal {
 public:
};

NFTProto::NFTProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFTProto)
}
inline PROTOBUF_NDEBUG_INLINE NFTProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::NFTProto& from_msg)
      : transferledger_{visibility, arena, from.transferledger_},
        bundled_assets_{visibility, arena, from.bundled_assets_},
        previous_versions_{visibility, arena, from.previous_versions_},
        id_(arena, from.id_),
        creator_(arena, from.creator_),
        owner_(arena, from.owner_),
        metadata_(arena, from.metadata_),
        image_hash_(arena, from.image_hash_),
        signature_(arena, from.signature_),
        zk_stark_proof_(arena, from.zk_stark_proof_),
        version_(arena, from.version_),
        nft_type_(arena, from.nft_type_),
        proof_hash_(arena, from.proof_hash_),
        extra_data_(arena, from.extra_data_),
        creator_identity_(arena, from.creator_identity_),
        dilithium_signature_(arena, from.dilithium_signature_),
        encrypted_metadata_(arena, from.encrypted_metadata_),
        _cached_size_{0} {}

NFTProto::NFTProto(
    ::google::protobuf::Arena* arena,
    const NFTProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  NFTProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, timestamp_),
           offsetof(Impl_, revoked_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::revoked_));

  // @@protoc_insertion_point(copy_constructor:NFTProto)
}
inline PROTOBUF_NDEBUG_INLINE NFTProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : transferledger_{visibility, arena},
        bundled_assets_{visibility, arena},
        previous_versions_{visibility, arena},
        id_(arena),
        creator_(arena),
        owner_(arena),
        metadata_(arena),
        image_hash_(arena),
        signature_(arena),
        zk_stark_proof_(arena),
        version_(arena),
        nft_type_(arena),
        proof_hash_(arena),
        extra_data_(arena),
        creator_identity_(arena),
        dilithium_signature_(arena),
        encrypted_metadata_(arena),
        _cached_size_{0} {}

inline void NFTProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, revoked_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::revoked_));
}
NFTProto::~NFTProto() {
  // @@protoc_insertion_point(destructor:NFTProto)
  SharedDtor(*this);
}
inline void NFTProto::SharedDtor(MessageLite& self) {
  NFTProto& this_ = static_cast<NFTProto&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.creator_.Destroy();
  this_._impl_.owner_.Destroy();
  this_._impl_.metadata_.Destroy();
  this_._impl_.image_hash_.Destroy();
  this_._impl_.signature_.Destroy();
  this_._impl_.zk_stark_proof_.Destroy();
  this_._impl_.version_.Destroy();
  this_._impl_.nft_type_.Destroy();
  this_._impl_.proof_hash_.Destroy();
  this_._impl_.extra_data_.Destroy();
  this_._impl_.creator_identity_.Destroy();
  this_._impl_.dilithium_signature_.Destroy();
  this_._impl_.encrypted_metadata_.Destroy();
  this_._impl_.~Impl_();
}

inline void* NFTProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) NFTProto(arena);
}
constexpr auto NFTProto::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.transferledger_) +
          decltype(NFTProto::_impl_.transferledger_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.bundled_assets_) +
          decltype(NFTProto::_impl_.bundled_assets_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.previous_versions_) +
          decltype(NFTProto::_impl_.previous_versions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(NFTProto), alignof(NFTProto), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&NFTProto::PlacementNew_,
                                 sizeof(NFTProto),
                                 alignof(NFTProto));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull NFTProto::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_NFTProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &NFTProto::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<NFTProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &NFTProto::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<NFTProto>(), &NFTProto::ByteSizeLong,
            &NFTProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(NFTProto, _impl_._cached_size_),
        false,
    },
    &NFTProto::kDescriptorMethods,
    &descriptor_table_nft_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* NFTProto::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 20, 0, 179, 2> NFTProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    20, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4293918720,  // skipmap
    offsetof(decltype(_table_), field_entries),
    20,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::NFTProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.id_)}},
    // string creator = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.creator_)}},
    // string owner = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.owner_)}},
    // string metadata = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.metadata_)}},
    // string image_hash = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.image_hash_)}},
    // int64 timestamp = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(NFTProto, _impl_.timestamp_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.timestamp_)}},
    // bytes signature = 7;
    {::_pbi::TcParser::FastBS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.signature_)}},
    // bytes zk_stark_proof = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.zk_stark_proof_)}},
    // string version = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.version_)}},
    // string nft_type = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.nft_type_)}},
    // string proof_hash = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.proof_hash_)}},
    // string extra_data = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.extra_data_)}},
    // repeated string transferLedger = 13;
    {::_pbi::TcParser::FastUR1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.transferledger_)}},
    // string creator_identity = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.creator_identity_)}},
    // repeated string bundled_assets = 15;
    {::_pbi::TcParser::FastUR1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.bundled_assets_)}},
    // bytes dilithium_signature = 16;
    {::_pbi::TcParser::FastBS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.dilithium_signature_)}},
    // int64 expiry_timestamp = 17;
    {::_pbi::TcParser::FastV64S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.expiry_timestamp_)}},
    // bool revoked = 18;
    {::_pbi::TcParser::FastV8S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.revoked_)}},
    // string encrypted_metadata = 19;
    {::_pbi::TcParser::FastUS2,
     {410, 63, 0, PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.encrypted_metadata_)}},
    // repeated string previous_versions = 20;
    {::_pbi::TcParser::FastUR2,
     {418, 63, 0, PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.previous_versions_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1;
    {PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string creator = 2;
    {PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.creator_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string owner = 3;
    {PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.owner_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string metadata = 4;
    {PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.metadata_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string image_hash = 5;
    {PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.image_hash_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 timestamp = 6;
    {PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bytes signature = 7;
    {PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.signature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes zk_stark_proof = 8;
    {PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.zk_stark_proof_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string version = 9;
    {PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string nft_type = 10;
    {PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.nft_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string proof_hash = 11;
    {PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.proof_hash_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string extra_data = 12;
    {PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.extra_data_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string transferLedger = 13;
    {PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.transferledger_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string creator_identity = 14;
    {PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.creator_identity_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string bundled_assets = 15;
    {PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.bundled_assets_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bytes dilithium_signature = 16;
    {PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.dilithium_signature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // int64 expiry_timestamp = 17;
    {PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.expiry_timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool revoked = 18;
    {PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.revoked_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string encrypted_metadata = 19;
    {PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.encrypted_metadata_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string previous_versions = 20;
    {PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.previous_versions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\10\2\7\5\10\12\0\0\0\7\10\12\12\16\20\16\0\0\0\22\21\0\0\0"
    "NFTProto"
    "id"
    "creator"
    "owner"
    "metadata"
    "image_hash"
    "version"
    "nft_type"
    "proof_hash"
    "extra_data"
    "transferLedger"
    "creator_identity"
    "bundled_assets"
    "encrypted_metadata"
    "previous_versions"
  }},
};

PROTOBUF_NOINLINE void NFTProto::Clear() {
// @@protoc_insertion_point(message_clear_start:NFTProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transferledger_.Clear();
  _impl_.bundled_assets_.Clear();
  _impl_.previous_versions_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.creator_.ClearToEmpty();
  _impl_.owner_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  _impl_.image_hash_.ClearToEmpty();
  _impl_.signature_.ClearToEmpty();
  _impl_.zk_stark_proof_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.nft_type_.ClearToEmpty();
  _impl_.proof_hash_.ClearToEmpty();
  _impl_.extra_data_.ClearToEmpty();
  _impl_.creator_identity_.ClearToEmpty();
  _impl_.dilithium_signature_.ClearToEmpty();
  _impl_.encrypted_metadata_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.revoked_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.revoked_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* NFTProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const NFTProto& this_ = static_cast<const NFTProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* NFTProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const NFTProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:NFTProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1;
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NFTProto.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string creator = 2;
          if (!this_._internal_creator().empty()) {
            const std::string& _s = this_._internal_creator();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NFTProto.creator");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string owner = 3;
          if (!this_._internal_owner().empty()) {
            const std::string& _s = this_._internal_owner();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NFTProto.owner");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string metadata = 4;
          if (!this_._internal_metadata().empty()) {
            const std::string& _s = this_._internal_metadata();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NFTProto.metadata");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string image_hash = 5;
          if (!this_._internal_image_hash().empty()) {
            const std::string& _s = this_._internal_image_hash();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NFTProto.image_hash");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // int64 timestamp = 6;
          if (this_._internal_timestamp() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<6>(
                    stream, this_._internal_timestamp(), target);
          }

          // bytes signature = 7;
          if (!this_._internal_signature().empty()) {
            const std::string& _s = this_._internal_signature();
            target = stream->WriteBytesMaybeAliased(7, _s, target);
          }

          // bytes zk_stark_proof = 8;
          if (!this_._internal_zk_stark_proof().empty()) {
            const std::string& _s = this_._internal_zk_stark_proof();
            target = stream->WriteBytesMaybeAliased(8, _s, target);
          }

          // string version = 9;
          if (!this_._internal_version().empty()) {
            const std::string& _s = this_._internal_version();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NFTProto.version");
            target = stream->WriteStringMaybeAliased(9, _s, target);
          }

          // string nft_type = 10;
          if (!this_._internal_nft_type().empty()) {
            const std::string& _s = this_._internal_nft_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NFTProto.nft_type");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          // string proof_hash = 11;
          if (!this_._internal_proof_hash().empty()) {
            const std::string& _s = this_._internal_proof_hash();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NFTProto.proof_hash");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          // string extra_data = 12;
          if (!this_._internal_extra_data().empty()) {
            const std::string& _s = this_._internal_extra_data();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NFTProto.extra_data");
            target = stream->WriteStringMaybeAliased(12, _s, target);
          }

          // repeated string transferLedger = 13;
          for (int i = 0, n = this_._internal_transferledger_size(); i < n; ++i) {
            const auto& s = this_._internal_transferledger().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NFTProto.transferLedger");
            target = stream->WriteString(13, s, target);
          }

          // string creator_identity = 14;
          if (!this_._internal_creator_identity().empty()) {
            const std::string& _s = this_._internal_creator_identity();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NFTProto.creator_identity");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          // repeated string bundled_assets = 15;
          for (int i = 0, n = this_._internal_bundled_assets_size(); i < n; ++i) {
            const auto& s = this_._internal_bundled_assets().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NFTProto.bundled_assets");
            target = stream->WriteString(15, s, target);
          }

          // bytes dilithium_signature = 16;
          if (!this_._internal_dilithium_signature().empty()) {
            const std::string& _s = this_._internal_dilithium_signature();
            target = stream->WriteBytesMaybeAliased(16, _s, target);
          }

          // int64 expiry_timestamp = 17;
          if (this_._internal_expiry_timestamp() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                17, this_._internal_expiry_timestamp(), target);
          }

          // bool revoked = 18;
          if (this_._internal_revoked() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                18, this_._internal_revoked(), target);
          }

          // string encrypted_metadata = 19;
          if (!this_._internal_encrypted_metadata().empty()) {
            const std::string& _s = this_._internal_encrypted_metadata();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NFTProto.encrypted_metadata");
            target = stream->WriteStringMaybeAliased(19, _s, target);
          }

          // repeated string previous_versions = 20;
          for (int i = 0, n = this_._internal_previous_versions_size(); i < n; ++i) {
            const auto& s = this_._internal_previous_versions().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "NFTProto.previous_versions");
            target = stream->WriteString(20, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:NFTProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t NFTProto::ByteSizeLong(const MessageLite& base) {
          const NFTProto& this_ = static_cast<const NFTProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t NFTProto::ByteSizeLong() const {
          const NFTProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:NFTProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string transferLedger = 13;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_transferledger().size());
              for (int i = 0, n = this_._internal_transferledger().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_transferledger().Get(i));
              }
            }
            // repeated string bundled_assets = 15;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_bundled_assets().size());
              for (int i = 0, n = this_._internal_bundled_assets().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_bundled_assets().Get(i));
              }
            }
            // repeated string previous_versions = 20;
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_previous_versions().size());
              for (int i = 0, n = this_._internal_previous_versions().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_previous_versions().Get(i));
              }
            }
          }
           {
            // string id = 1;
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
            // string creator = 2;
            if (!this_._internal_creator().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_creator());
            }
            // string owner = 3;
            if (!this_._internal_owner().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_owner());
            }
            // string metadata = 4;
            if (!this_._internal_metadata().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_metadata());
            }
            // string image_hash = 5;
            if (!this_._internal_image_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_image_hash());
            }
            // bytes signature = 7;
            if (!this_._internal_signature().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_signature());
            }
            // bytes zk_stark_proof = 8;
            if (!this_._internal_zk_stark_proof().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_zk_stark_proof());
            }
            // string version = 9;
            if (!this_._internal_version().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_version());
            }
            // string nft_type = 10;
            if (!this_._internal_nft_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_nft_type());
            }
            // string proof_hash = 11;
            if (!this_._internal_proof_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_proof_hash());
            }
            // string extra_data = 12;
            if (!this_._internal_extra_data().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_extra_data());
            }
            // string creator_identity = 14;
            if (!this_._internal_creator_identity().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_creator_identity());
            }
            // bytes dilithium_signature = 16;
            if (!this_._internal_dilithium_signature().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_dilithium_signature());
            }
            // string encrypted_metadata = 19;
            if (!this_._internal_encrypted_metadata().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_encrypted_metadata());
            }
            // int64 timestamp = 6;
            if (this_._internal_timestamp() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_timestamp());
            }
            // int64 expiry_timestamp = 17;
            if (this_._internal_expiry_timestamp() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_expiry_timestamp());
            }
            // bool revoked = 18;
            if (this_._internal_revoked() != 0) {
              total_size += 3;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void NFTProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NFTProto*>(&to_msg);
  auto& from = static_cast<const NFTProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NFTProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_transferledger()->MergeFrom(from._internal_transferledger());
  _this->_internal_mutable_bundled_assets()->MergeFrom(from._internal_bundled_assets());
  _this->_internal_mutable_previous_versions()->MergeFrom(from._internal_previous_versions());
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_creator().empty()) {
    _this->_internal_set_creator(from._internal_creator());
  }
  if (!from._internal_owner().empty()) {
    _this->_internal_set_owner(from._internal_owner());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (!from._internal_image_hash().empty()) {
    _this->_internal_set_image_hash(from._internal_image_hash());
  }
  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  if (!from._internal_zk_stark_proof().empty()) {
    _this->_internal_set_zk_stark_proof(from._internal_zk_stark_proof());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_nft_type().empty()) {
    _this->_internal_set_nft_type(from._internal_nft_type());
  }
  if (!from._internal_proof_hash().empty()) {
    _this->_internal_set_proof_hash(from._internal_proof_hash());
  }
  if (!from._internal_extra_data().empty()) {
    _this->_internal_set_extra_data(from._internal_extra_data());
  }
  if (!from._internal_creator_identity().empty()) {
    _this->_internal_set_creator_identity(from._internal_creator_identity());
  }
  if (!from._internal_dilithium_signature().empty()) {
    _this->_internal_set_dilithium_signature(from._internal_dilithium_signature());
  }
  if (!from._internal_encrypted_metadata().empty()) {
    _this->_internal_set_encrypted_metadata(from._internal_encrypted_metadata());
  }
  if (from._internal_timestamp() != 0) {
    _this->_impl_.timestamp_ = from._impl_.timestamp_;
  }
  if (from._internal_expiry_timestamp() != 0) {
    _this->_impl_.expiry_timestamp_ = from._impl_.expiry_timestamp_;
  }
  if (from._internal_revoked() != 0) {
    _this->_impl_.revoked_ = from._impl_.revoked_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NFTProto::CopyFrom(const NFTProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFTProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NFTProto::InternalSwap(NFTProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.transferledger_.InternalSwap(&other->_impl_.transferledger_);
  _impl_.bundled_assets_.InternalSwap(&other->_impl_.bundled_assets_);
  _impl_.previous_versions_.InternalSwap(&other->_impl_.previous_versions_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.creator_, &other->_impl_.creator_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owner_, &other->_impl_.owner_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_, &other->_impl_.metadata_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.image_hash_, &other->_impl_.image_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, &other->_impl_.signature_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zk_stark_proof_, &other->_impl_.zk_stark_proof_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, &other->_impl_.version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nft_type_, &other->_impl_.nft_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_hash_, &other->_impl_.proof_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.extra_data_, &other->_impl_.extra_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.creator_identity_, &other->_impl_.creator_identity_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dilithium_signature_, &other->_impl_.dilithium_signature_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encrypted_metadata_, &other->_impl_.encrypted_metadata_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.revoked_)
      + sizeof(NFTProto::_impl_.revoked_)
      - PROTOBUF_FIELD_OFFSET(NFTProto, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata NFTProto::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_nft_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
