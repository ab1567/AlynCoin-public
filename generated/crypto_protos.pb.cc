// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_protos.proto

#include "crypto_protos.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace alyncoin {
PROTOBUF_CONSTEXPR CryptoKeysProto::CryptoKeysProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.private_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.public_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CryptoKeysProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CryptoKeysProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CryptoKeysProtoDefaultTypeInternal() {}
  union {
    CryptoKeysProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CryptoKeysProtoDefaultTypeInternal _CryptoKeysProto_default_instance_;
PROTOBUF_CONSTEXPR SignatureProto::SignatureProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignatureProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignatureProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignatureProtoDefaultTypeInternal() {}
  union {
    SignatureProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignatureProtoDefaultTypeInternal _SignatureProto_default_instance_;
PROTOBUF_CONSTEXPR AddressProto::AddressProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.miner_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddressProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddressProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddressProtoDefaultTypeInternal() {}
  union {
    AddressProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddressProtoDefaultTypeInternal _AddressProto_default_instance_;
}  // namespace alyncoin
static ::_pb::Metadata file_level_metadata_crypto_5fprotos_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_crypto_5fprotos_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_crypto_5fprotos_2eproto = nullptr;

const uint32_t TableStruct_crypto_5fprotos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::alyncoin::CryptoKeysProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::alyncoin::CryptoKeysProto, _impl_.private_key_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::CryptoKeysProto, _impl_.public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::alyncoin::SignatureProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::alyncoin::SignatureProto, _impl_.signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::alyncoin::AddressProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::alyncoin::AddressProto, _impl_.miner_address_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::alyncoin::CryptoKeysProto)},
  { 8, -1, -1, sizeof(::alyncoin::SignatureProto)},
  { 15, -1, -1, sizeof(::alyncoin::AddressProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::alyncoin::_CryptoKeysProto_default_instance_._instance,
  &::alyncoin::_SignatureProto_default_instance_._instance,
  &::alyncoin::_AddressProto_default_instance_._instance,
};

const char descriptor_table_protodef_crypto_5fprotos_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023crypto_protos.proto\022\010alyncoin\":\n\017Crypt"
  "oKeysProto\022\023\n\013private_key\030\001 \001(\014\022\022\n\npubli"
  "c_key\030\002 \001(\014\"#\n\016SignatureProto\022\021\n\tsignatu"
  "re\030\001 \001(\014\"%\n\014AddressProto\022\025\n\rminer_addres"
  "s\030\001 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_crypto_5fprotos_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_crypto_5fprotos_2eproto = {
    false, false, 175, descriptor_table_protodef_crypto_5fprotos_2eproto,
    "crypto_protos.proto",
    &descriptor_table_crypto_5fprotos_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_crypto_5fprotos_2eproto::offsets,
    file_level_metadata_crypto_5fprotos_2eproto, file_level_enum_descriptors_crypto_5fprotos_2eproto,
    file_level_service_descriptors_crypto_5fprotos_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_crypto_5fprotos_2eproto_getter() {
  return &descriptor_table_crypto_5fprotos_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_crypto_5fprotos_2eproto(&descriptor_table_crypto_5fprotos_2eproto);
namespace alyncoin {

// ===================================================================

class CryptoKeysProto::_Internal {
 public:
};

CryptoKeysProto::CryptoKeysProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:alyncoin.CryptoKeysProto)
}
CryptoKeysProto::CryptoKeysProto(const CryptoKeysProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CryptoKeysProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.private_key_){}
    , decltype(_impl_.public_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.private_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_private_key().empty()) {
    _this->_impl_.private_key_.Set(from._internal_private_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    _this->_impl_.public_key_.Set(from._internal_public_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:alyncoin.CryptoKeysProto)
}

inline void CryptoKeysProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.private_key_){}
    , decltype(_impl_.public_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.private_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CryptoKeysProto::~CryptoKeysProto() {
  // @@protoc_insertion_point(destructor:alyncoin.CryptoKeysProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CryptoKeysProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.private_key_.Destroy();
  _impl_.public_key_.Destroy();
}

void CryptoKeysProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CryptoKeysProto::Clear() {
// @@protoc_insertion_point(message_clear_start:alyncoin.CryptoKeysProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.private_key_.ClearToEmpty();
  _impl_.public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CryptoKeysProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes private_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_private_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CryptoKeysProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:alyncoin.CryptoKeysProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes private_key = 1;
  if (!this->_internal_private_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_private_key(), target);
  }

  // bytes public_key = 2;
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alyncoin.CryptoKeysProto)
  return target;
}

size_t CryptoKeysProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alyncoin.CryptoKeysProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes private_key = 1;
  if (!this->_internal_private_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  // bytes public_key = 2;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CryptoKeysProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CryptoKeysProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CryptoKeysProto::GetClassData() const { return &_class_data_; }


void CryptoKeysProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CryptoKeysProto*>(&to_msg);
  auto& from = static_cast<const CryptoKeysProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:alyncoin.CryptoKeysProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_private_key().empty()) {
    _this->_internal_set_private_key(from._internal_private_key());
  }
  if (!from._internal_public_key().empty()) {
    _this->_internal_set_public_key(from._internal_public_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CryptoKeysProto::CopyFrom(const CryptoKeysProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alyncoin.CryptoKeysProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoKeysProto::IsInitialized() const {
  return true;
}

void CryptoKeysProto::InternalSwap(CryptoKeysProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.private_key_, lhs_arena,
      &other->_impl_.private_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_key_, lhs_arena,
      &other->_impl_.public_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CryptoKeysProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fprotos_2eproto_getter, &descriptor_table_crypto_5fprotos_2eproto_once,
      file_level_metadata_crypto_5fprotos_2eproto[0]);
}

// ===================================================================

class SignatureProto::_Internal {
 public:
};

SignatureProto::SignatureProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:alyncoin.SignatureProto)
}
SignatureProto::SignatureProto(const SignatureProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignatureProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signature_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:alyncoin.SignatureProto)
}

inline void SignatureProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signature_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignatureProto::~SignatureProto() {
  // @@protoc_insertion_point(destructor:alyncoin.SignatureProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignatureProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signature_.Destroy();
}

void SignatureProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignatureProto::Clear() {
// @@protoc_insertion_point(message_clear_start:alyncoin.SignatureProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signature_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignatureProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignatureProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:alyncoin.SignatureProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature = 1;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alyncoin.SignatureProto)
  return target;
}

size_t SignatureProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alyncoin.SignatureProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 1;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignatureProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignatureProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignatureProto::GetClassData() const { return &_class_data_; }


void SignatureProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignatureProto*>(&to_msg);
  auto& from = static_cast<const SignatureProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:alyncoin.SignatureProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignatureProto::CopyFrom(const SignatureProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alyncoin.SignatureProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureProto::IsInitialized() const {
  return true;
}

void SignatureProto::InternalSwap(SignatureProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fprotos_2eproto_getter, &descriptor_table_crypto_5fprotos_2eproto_once,
      file_level_metadata_crypto_5fprotos_2eproto[1]);
}

// ===================================================================

class AddressProto::_Internal {
 public:
};

AddressProto::AddressProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:alyncoin.AddressProto)
}
AddressProto::AddressProto(const AddressProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddressProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.miner_address_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.miner_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.miner_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_miner_address().empty()) {
    _this->_impl_.miner_address_.Set(from._internal_miner_address(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:alyncoin.AddressProto)
}

inline void AddressProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.miner_address_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.miner_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.miner_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddressProto::~AddressProto() {
  // @@protoc_insertion_point(destructor:alyncoin.AddressProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddressProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.miner_address_.Destroy();
}

void AddressProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddressProto::Clear() {
// @@protoc_insertion_point(message_clear_start:alyncoin.AddressProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.miner_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string miner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_miner_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "alyncoin.AddressProto.miner_address"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddressProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:alyncoin.AddressProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string miner_address = 1;
  if (!this->_internal_miner_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_miner_address().data(), static_cast<int>(this->_internal_miner_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "alyncoin.AddressProto.miner_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_miner_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alyncoin.AddressProto)
  return target;
}

size_t AddressProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alyncoin.AddressProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string miner_address = 1;
  if (!this->_internal_miner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_miner_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddressProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressProto::GetClassData() const { return &_class_data_; }


void AddressProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddressProto*>(&to_msg);
  auto& from = static_cast<const AddressProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:alyncoin.AddressProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_miner_address().empty()) {
    _this->_internal_set_miner_address(from._internal_miner_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressProto::CopyFrom(const AddressProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alyncoin.AddressProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressProto::IsInitialized() const {
  return true;
}

void AddressProto::InternalSwap(AddressProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.miner_address_, lhs_arena,
      &other->_impl_.miner_address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fprotos_2eproto_getter, &descriptor_table_crypto_5fprotos_2eproto_once,
      file_level_metadata_crypto_5fprotos_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace alyncoin
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::alyncoin::CryptoKeysProto*
Arena::CreateMaybeMessage< ::alyncoin::CryptoKeysProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::alyncoin::CryptoKeysProto >(arena);
}
template<> PROTOBUF_NOINLINE ::alyncoin::SignatureProto*
Arena::CreateMaybeMessage< ::alyncoin::SignatureProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::alyncoin::SignatureProto >(arena);
}
template<> PROTOBUF_NOINLINE ::alyncoin::AddressProto*
Arena::CreateMaybeMessage< ::alyncoin::AddressProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::alyncoin::AddressProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
