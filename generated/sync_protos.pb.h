// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync_protos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sync_5fprotos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sync_5fprotos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "block_protos.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sync_5fprotos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sync_5fprotos_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sync_5fprotos_2eproto;
namespace alyncoin {
class BlockRequestProto;
struct BlockRequestProtoDefaultTypeInternal;
extern BlockRequestProtoDefaultTypeInternal _BlockRequestProto_default_instance_;
class BlockchainSyncProto;
struct BlockchainSyncProtoDefaultTypeInternal;
extern BlockchainSyncProtoDefaultTypeInternal _BlockchainSyncProto_default_instance_;
class SnapshotProto;
struct SnapshotProtoDefaultTypeInternal;
extern SnapshotProtoDefaultTypeInternal _SnapshotProto_default_instance_;
class StateProofProto;
struct StateProofProtoDefaultTypeInternal;
extern StateProofProtoDefaultTypeInternal _StateProofProto_default_instance_;
class SyncRequestProto;
struct SyncRequestProtoDefaultTypeInternal;
extern SyncRequestProtoDefaultTypeInternal _SyncRequestProto_default_instance_;
class SyncResponseProto;
struct SyncResponseProtoDefaultTypeInternal;
extern SyncResponseProtoDefaultTypeInternal _SyncResponseProto_default_instance_;
class TailBlocksProto;
struct TailBlocksProtoDefaultTypeInternal;
extern TailBlocksProtoDefaultTypeInternal _TailBlocksProto_default_instance_;
}  // namespace alyncoin
PROTOBUF_NAMESPACE_OPEN
template<> ::alyncoin::BlockRequestProto* Arena::CreateMaybeMessage<::alyncoin::BlockRequestProto>(Arena*);
template<> ::alyncoin::BlockchainSyncProto* Arena::CreateMaybeMessage<::alyncoin::BlockchainSyncProto>(Arena*);
template<> ::alyncoin::SnapshotProto* Arena::CreateMaybeMessage<::alyncoin::SnapshotProto>(Arena*);
template<> ::alyncoin::StateProofProto* Arena::CreateMaybeMessage<::alyncoin::StateProofProto>(Arena*);
template<> ::alyncoin::SyncRequestProto* Arena::CreateMaybeMessage<::alyncoin::SyncRequestProto>(Arena*);
template<> ::alyncoin::SyncResponseProto* Arena::CreateMaybeMessage<::alyncoin::SyncResponseProto>(Arena*);
template<> ::alyncoin::TailBlocksProto* Arena::CreateMaybeMessage<::alyncoin::TailBlocksProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace alyncoin {

// ===================================================================

class SyncRequestProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alyncoin.SyncRequestProto) */ {
 public:
  inline SyncRequestProto() : SyncRequestProto(nullptr) {}
  ~SyncRequestProto() override;
  explicit PROTOBUF_CONSTEXPR SyncRequestProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncRequestProto(const SyncRequestProto& from);
  SyncRequestProto(SyncRequestProto&& from) noexcept
    : SyncRequestProto() {
    *this = ::std::move(from);
  }

  inline SyncRequestProto& operator=(const SyncRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncRequestProto& operator=(SyncRequestProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncRequestProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncRequestProto* internal_default_instance() {
    return reinterpret_cast<const SyncRequestProto*>(
               &_SyncRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SyncRequestProto& a, SyncRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncRequestProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncRequestProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncRequestProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncRequestProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncRequestProto& from) {
    SyncRequestProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncRequestProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alyncoin.SyncRequestProto";
  }
  protected:
  explicit SyncRequestProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestTypeFieldNumber = 1,
    kBlockHeightFieldNumber = 2,
  };
  // string request_type = 1;
  void clear_request_type();
  const std::string& request_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_type();
  PROTOBUF_NODISCARD std::string* release_request_type();
  void set_allocated_request_type(std::string* request_type);
  private:
  const std::string& _internal_request_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_type(const std::string& value);
  std::string* _internal_mutable_request_type();
  public:

  // int32 block_height = 2;
  void clear_block_height();
  int32_t block_height() const;
  void set_block_height(int32_t value);
  private:
  int32_t _internal_block_height() const;
  void _internal_set_block_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:alyncoin.SyncRequestProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_type_;
    int32_t block_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fprotos_2eproto;
};
// -------------------------------------------------------------------

class SyncResponseProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alyncoin.SyncResponseProto) */ {
 public:
  inline SyncResponseProto() : SyncResponseProto(nullptr) {}
  ~SyncResponseProto() override;
  explicit PROTOBUF_CONSTEXPR SyncResponseProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncResponseProto(const SyncResponseProto& from);
  SyncResponseProto(SyncResponseProto&& from) noexcept
    : SyncResponseProto() {
    *this = ::std::move(from);
  }

  inline SyncResponseProto& operator=(const SyncResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncResponseProto& operator=(SyncResponseProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncResponseProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncResponseProto* internal_default_instance() {
    return reinterpret_cast<const SyncResponseProto*>(
               &_SyncResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SyncResponseProto& a, SyncResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncResponseProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncResponseProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncResponseProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncResponseProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncResponseProto& from) {
    SyncResponseProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncResponseProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alyncoin.SyncResponseProto";
  }
  protected:
  explicit SyncResponseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:alyncoin.SyncResponseProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fprotos_2eproto;
};
// -------------------------------------------------------------------

class BlockRequestProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alyncoin.BlockRequestProto) */ {
 public:
  inline BlockRequestProto() : BlockRequestProto(nullptr) {}
  ~BlockRequestProto() override;
  explicit PROTOBUF_CONSTEXPR BlockRequestProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockRequestProto(const BlockRequestProto& from);
  BlockRequestProto(BlockRequestProto&& from) noexcept
    : BlockRequestProto() {
    *this = ::std::move(from);
  }

  inline BlockRequestProto& operator=(const BlockRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockRequestProto& operator=(BlockRequestProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockRequestProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockRequestProto* internal_default_instance() {
    return reinterpret_cast<const BlockRequestProto*>(
               &_BlockRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BlockRequestProto& a, BlockRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockRequestProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockRequestProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockRequestProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockRequestProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockRequestProto& from) {
    BlockRequestProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockRequestProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alyncoin.BlockRequestProto";
  }
  protected:
  explicit BlockRequestProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestTypeFieldNumber = 1,
    kBlockIndexFieldNumber = 2,
  };
  // string request_type = 1;
  void clear_request_type();
  const std::string& request_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_type();
  PROTOBUF_NODISCARD std::string* release_request_type();
  void set_allocated_request_type(std::string* request_type);
  private:
  const std::string& _internal_request_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_type(const std::string& value);
  std::string* _internal_mutable_request_type();
  public:

  // int32 block_index = 2;
  void clear_block_index();
  int32_t block_index() const;
  void set_block_index(int32_t value);
  private:
  int32_t _internal_block_index() const;
  void _internal_set_block_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:alyncoin.BlockRequestProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_type_;
    int32_t block_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fprotos_2eproto;
};
// -------------------------------------------------------------------

class BlockchainSyncProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alyncoin.BlockchainSyncProto) */ {
 public:
  inline BlockchainSyncProto() : BlockchainSyncProto(nullptr) {}
  ~BlockchainSyncProto() override;
  explicit PROTOBUF_CONSTEXPR BlockchainSyncProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockchainSyncProto(const BlockchainSyncProto& from);
  BlockchainSyncProto(BlockchainSyncProto&& from) noexcept
    : BlockchainSyncProto() {
    *this = ::std::move(from);
  }

  inline BlockchainSyncProto& operator=(const BlockchainSyncProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockchainSyncProto& operator=(BlockchainSyncProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockchainSyncProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockchainSyncProto* internal_default_instance() {
    return reinterpret_cast<const BlockchainSyncProto*>(
               &_BlockchainSyncProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BlockchainSyncProto& a, BlockchainSyncProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockchainSyncProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockchainSyncProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockchainSyncProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockchainSyncProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockchainSyncProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockchainSyncProto& from) {
    BlockchainSyncProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockchainSyncProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alyncoin.BlockchainSyncProto";
  }
  protected:
  explicit BlockchainSyncProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestTypeFieldNumber = 1,
  };
  // string request_type = 1;
  void clear_request_type();
  const std::string& request_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_type();
  PROTOBUF_NODISCARD std::string* release_request_type();
  void set_allocated_request_type(std::string* request_type);
  private:
  const std::string& _internal_request_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_type(const std::string& value);
  std::string* _internal_mutable_request_type();
  public:

  // @@protoc_insertion_point(class_scope:alyncoin.BlockchainSyncProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fprotos_2eproto;
};
// -------------------------------------------------------------------

class StateProofProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alyncoin.StateProofProto) */ {
 public:
  inline StateProofProto() : StateProofProto(nullptr) {}
  ~StateProofProto() override;
  explicit PROTOBUF_CONSTEXPR StateProofProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StateProofProto(const StateProofProto& from);
  StateProofProto(StateProofProto&& from) noexcept
    : StateProofProto() {
    *this = ::std::move(from);
  }

  inline StateProofProto& operator=(const StateProofProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateProofProto& operator=(StateProofProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StateProofProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const StateProofProto* internal_default_instance() {
    return reinterpret_cast<const StateProofProto*>(
               &_StateProofProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StateProofProto& a, StateProofProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StateProofProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateProofProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StateProofProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StateProofProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StateProofProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StateProofProto& from) {
    StateProofProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateProofProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alyncoin.StateProofProto";
  }
  protected:
  explicit StateProofProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateRootFieldNumber = 2,
    kZkProofFieldNumber = 3,
    kBlockHeightFieldNumber = 1,
  };
  // string state_root = 2;
  void clear_state_root();
  const std::string& state_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state_root();
  PROTOBUF_NODISCARD std::string* release_state_root();
  void set_allocated_state_root(std::string* state_root);
  private:
  const std::string& _internal_state_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state_root(const std::string& value);
  std::string* _internal_mutable_state_root();
  public:

  // bytes zk_proof = 3;
  void clear_zk_proof();
  const std::string& zk_proof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zk_proof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zk_proof();
  PROTOBUF_NODISCARD std::string* release_zk_proof();
  void set_allocated_zk_proof(std::string* zk_proof);
  private:
  const std::string& _internal_zk_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zk_proof(const std::string& value);
  std::string* _internal_mutable_zk_proof();
  public:

  // int32 block_height = 1;
  void clear_block_height();
  int32_t block_height() const;
  void set_block_height(int32_t value);
  private:
  int32_t _internal_block_height() const;
  void _internal_set_block_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:alyncoin.StateProofProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_root_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zk_proof_;
    int32_t block_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fprotos_2eproto;
};
// -------------------------------------------------------------------

class SnapshotProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alyncoin.SnapshotProto) */ {
 public:
  inline SnapshotProto() : SnapshotProto(nullptr) {}
  ~SnapshotProto() override;
  explicit PROTOBUF_CONSTEXPR SnapshotProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnapshotProto(const SnapshotProto& from);
  SnapshotProto(SnapshotProto&& from) noexcept
    : SnapshotProto() {
    *this = ::std::move(from);
  }

  inline SnapshotProto& operator=(const SnapshotProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotProto& operator=(SnapshotProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnapshotProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnapshotProto* internal_default_instance() {
    return reinterpret_cast<const SnapshotProto*>(
               &_SnapshotProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SnapshotProto& a, SnapshotProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnapshotProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnapshotProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnapshotProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SnapshotProto& from) {
    SnapshotProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alyncoin.SnapshotProto";
  }
  protected:
  explicit SnapshotProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 2,
    kMerkleRootFieldNumber = 3,
    kHeightFieldNumber = 1,
  };
  // repeated .alyncoin.BlockProto blocks = 2;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::alyncoin::BlockProto* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alyncoin::BlockProto >*
      mutable_blocks();
  private:
  const ::alyncoin::BlockProto& _internal_blocks(int index) const;
  ::alyncoin::BlockProto* _internal_add_blocks();
  public:
  const ::alyncoin::BlockProto& blocks(int index) const;
  ::alyncoin::BlockProto* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alyncoin::BlockProto >&
      blocks() const;

  // string merkle_root = 3;
  void clear_merkle_root();
  const std::string& merkle_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_merkle_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_merkle_root();
  PROTOBUF_NODISCARD std::string* release_merkle_root();
  void set_allocated_merkle_root(std::string* merkle_root);
  private:
  const std::string& _internal_merkle_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_merkle_root(const std::string& value);
  std::string* _internal_mutable_merkle_root();
  public:

  // int32 height = 1;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:alyncoin.SnapshotProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alyncoin::BlockProto > blocks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merkle_root_;
    int32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fprotos_2eproto;
};
// -------------------------------------------------------------------

class TailBlocksProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alyncoin.TailBlocksProto) */ {
 public:
  inline TailBlocksProto() : TailBlocksProto(nullptr) {}
  ~TailBlocksProto() override;
  explicit PROTOBUF_CONSTEXPR TailBlocksProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TailBlocksProto(const TailBlocksProto& from);
  TailBlocksProto(TailBlocksProto&& from) noexcept
    : TailBlocksProto() {
    *this = ::std::move(from);
  }

  inline TailBlocksProto& operator=(const TailBlocksProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TailBlocksProto& operator=(TailBlocksProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TailBlocksProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TailBlocksProto* internal_default_instance() {
    return reinterpret_cast<const TailBlocksProto*>(
               &_TailBlocksProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TailBlocksProto& a, TailBlocksProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TailBlocksProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TailBlocksProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TailBlocksProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TailBlocksProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TailBlocksProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TailBlocksProto& from) {
    TailBlocksProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TailBlocksProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alyncoin.TailBlocksProto";
  }
  protected:
  explicit TailBlocksProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 1,
  };
  // repeated .alyncoin.BlockProto blocks = 1;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::alyncoin::BlockProto* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alyncoin::BlockProto >*
      mutable_blocks();
  private:
  const ::alyncoin::BlockProto& _internal_blocks(int index) const;
  ::alyncoin::BlockProto* _internal_add_blocks();
  public:
  const ::alyncoin::BlockProto& blocks(int index) const;
  ::alyncoin::BlockProto* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alyncoin::BlockProto >&
      blocks() const;

  // @@protoc_insertion_point(class_scope:alyncoin.TailBlocksProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alyncoin::BlockProto > blocks_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_5fprotos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncRequestProto

// string request_type = 1;
inline void SyncRequestProto::clear_request_type() {
  _impl_.request_type_.ClearToEmpty();
}
inline const std::string& SyncRequestProto::request_type() const {
  // @@protoc_insertion_point(field_get:alyncoin.SyncRequestProto.request_type)
  return _internal_request_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncRequestProto::set_request_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.SyncRequestProto.request_type)
}
inline std::string* SyncRequestProto::mutable_request_type() {
  std::string* _s = _internal_mutable_request_type();
  // @@protoc_insertion_point(field_mutable:alyncoin.SyncRequestProto.request_type)
  return _s;
}
inline const std::string& SyncRequestProto::_internal_request_type() const {
  return _impl_.request_type_.Get();
}
inline void SyncRequestProto::_internal_set_request_type(const std::string& value) {
  
  _impl_.request_type_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncRequestProto::_internal_mutable_request_type() {
  
  return _impl_.request_type_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncRequestProto::release_request_type() {
  // @@protoc_insertion_point(field_release:alyncoin.SyncRequestProto.request_type)
  return _impl_.request_type_.Release();
}
inline void SyncRequestProto::set_allocated_request_type(std::string* request_type) {
  if (request_type != nullptr) {
    
  } else {
    
  }
  _impl_.request_type_.SetAllocated(request_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_type_.IsDefault()) {
    _impl_.request_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.SyncRequestProto.request_type)
}

// int32 block_height = 2;
inline void SyncRequestProto::clear_block_height() {
  _impl_.block_height_ = 0;
}
inline int32_t SyncRequestProto::_internal_block_height() const {
  return _impl_.block_height_;
}
inline int32_t SyncRequestProto::block_height() const {
  // @@protoc_insertion_point(field_get:alyncoin.SyncRequestProto.block_height)
  return _internal_block_height();
}
inline void SyncRequestProto::_internal_set_block_height(int32_t value) {
  
  _impl_.block_height_ = value;
}
inline void SyncRequestProto::set_block_height(int32_t value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:alyncoin.SyncRequestProto.block_height)
}

// -------------------------------------------------------------------

// SyncResponseProto

// string status = 1;
inline void SyncResponseProto::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& SyncResponseProto::status() const {
  // @@protoc_insertion_point(field_get:alyncoin.SyncResponseProto.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncResponseProto::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.SyncResponseProto.status)
}
inline std::string* SyncResponseProto::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:alyncoin.SyncResponseProto.status)
  return _s;
}
inline const std::string& SyncResponseProto::_internal_status() const {
  return _impl_.status_.Get();
}
inline void SyncResponseProto::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncResponseProto::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncResponseProto::release_status() {
  // @@protoc_insertion_point(field_release:alyncoin.SyncResponseProto.status)
  return _impl_.status_.Release();
}
inline void SyncResponseProto::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.SyncResponseProto.status)
}

// string data = 2;
inline void SyncResponseProto::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& SyncResponseProto::data() const {
  // @@protoc_insertion_point(field_get:alyncoin.SyncResponseProto.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncResponseProto::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.SyncResponseProto.data)
}
inline std::string* SyncResponseProto::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:alyncoin.SyncResponseProto.data)
  return _s;
}
inline const std::string& SyncResponseProto::_internal_data() const {
  return _impl_.data_.Get();
}
inline void SyncResponseProto::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncResponseProto::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncResponseProto::release_data() {
  // @@protoc_insertion_point(field_release:alyncoin.SyncResponseProto.data)
  return _impl_.data_.Release();
}
inline void SyncResponseProto::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.SyncResponseProto.data)
}

// -------------------------------------------------------------------

// BlockRequestProto

// string request_type = 1;
inline void BlockRequestProto::clear_request_type() {
  _impl_.request_type_.ClearToEmpty();
}
inline const std::string& BlockRequestProto::request_type() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockRequestProto.request_type)
  return _internal_request_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockRequestProto::set_request_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.BlockRequestProto.request_type)
}
inline std::string* BlockRequestProto::mutable_request_type() {
  std::string* _s = _internal_mutable_request_type();
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockRequestProto.request_type)
  return _s;
}
inline const std::string& BlockRequestProto::_internal_request_type() const {
  return _impl_.request_type_.Get();
}
inline void BlockRequestProto::_internal_set_request_type(const std::string& value) {
  
  _impl_.request_type_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockRequestProto::_internal_mutable_request_type() {
  
  return _impl_.request_type_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockRequestProto::release_request_type() {
  // @@protoc_insertion_point(field_release:alyncoin.BlockRequestProto.request_type)
  return _impl_.request_type_.Release();
}
inline void BlockRequestProto::set_allocated_request_type(std::string* request_type) {
  if (request_type != nullptr) {
    
  } else {
    
  }
  _impl_.request_type_.SetAllocated(request_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_type_.IsDefault()) {
    _impl_.request_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.BlockRequestProto.request_type)
}

// int32 block_index = 2;
inline void BlockRequestProto::clear_block_index() {
  _impl_.block_index_ = 0;
}
inline int32_t BlockRequestProto::_internal_block_index() const {
  return _impl_.block_index_;
}
inline int32_t BlockRequestProto::block_index() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockRequestProto.block_index)
  return _internal_block_index();
}
inline void BlockRequestProto::_internal_set_block_index(int32_t value) {
  
  _impl_.block_index_ = value;
}
inline void BlockRequestProto::set_block_index(int32_t value) {
  _internal_set_block_index(value);
  // @@protoc_insertion_point(field_set:alyncoin.BlockRequestProto.block_index)
}

// -------------------------------------------------------------------

// BlockchainSyncProto

// string request_type = 1;
inline void BlockchainSyncProto::clear_request_type() {
  _impl_.request_type_.ClearToEmpty();
}
inline const std::string& BlockchainSyncProto::request_type() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockchainSyncProto.request_type)
  return _internal_request_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockchainSyncProto::set_request_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.BlockchainSyncProto.request_type)
}
inline std::string* BlockchainSyncProto::mutable_request_type() {
  std::string* _s = _internal_mutable_request_type();
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockchainSyncProto.request_type)
  return _s;
}
inline const std::string& BlockchainSyncProto::_internal_request_type() const {
  return _impl_.request_type_.Get();
}
inline void BlockchainSyncProto::_internal_set_request_type(const std::string& value) {
  
  _impl_.request_type_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockchainSyncProto::_internal_mutable_request_type() {
  
  return _impl_.request_type_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockchainSyncProto::release_request_type() {
  // @@protoc_insertion_point(field_release:alyncoin.BlockchainSyncProto.request_type)
  return _impl_.request_type_.Release();
}
inline void BlockchainSyncProto::set_allocated_request_type(std::string* request_type) {
  if (request_type != nullptr) {
    
  } else {
    
  }
  _impl_.request_type_.SetAllocated(request_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_type_.IsDefault()) {
    _impl_.request_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.BlockchainSyncProto.request_type)
}

// -------------------------------------------------------------------

// StateProofProto

// int32 block_height = 1;
inline void StateProofProto::clear_block_height() {
  _impl_.block_height_ = 0;
}
inline int32_t StateProofProto::_internal_block_height() const {
  return _impl_.block_height_;
}
inline int32_t StateProofProto::block_height() const {
  // @@protoc_insertion_point(field_get:alyncoin.StateProofProto.block_height)
  return _internal_block_height();
}
inline void StateProofProto::_internal_set_block_height(int32_t value) {
  
  _impl_.block_height_ = value;
}
inline void StateProofProto::set_block_height(int32_t value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:alyncoin.StateProofProto.block_height)
}

// string state_root = 2;
inline void StateProofProto::clear_state_root() {
  _impl_.state_root_.ClearToEmpty();
}
inline const std::string& StateProofProto::state_root() const {
  // @@protoc_insertion_point(field_get:alyncoin.StateProofProto.state_root)
  return _internal_state_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StateProofProto::set_state_root(ArgT0&& arg0, ArgT... args) {
 
 _impl_.state_root_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.StateProofProto.state_root)
}
inline std::string* StateProofProto::mutable_state_root() {
  std::string* _s = _internal_mutable_state_root();
  // @@protoc_insertion_point(field_mutable:alyncoin.StateProofProto.state_root)
  return _s;
}
inline const std::string& StateProofProto::_internal_state_root() const {
  return _impl_.state_root_.Get();
}
inline void StateProofProto::_internal_set_state_root(const std::string& value) {
  
  _impl_.state_root_.Set(value, GetArenaForAllocation());
}
inline std::string* StateProofProto::_internal_mutable_state_root() {
  
  return _impl_.state_root_.Mutable(GetArenaForAllocation());
}
inline std::string* StateProofProto::release_state_root() {
  // @@protoc_insertion_point(field_release:alyncoin.StateProofProto.state_root)
  return _impl_.state_root_.Release();
}
inline void StateProofProto::set_allocated_state_root(std::string* state_root) {
  if (state_root != nullptr) {
    
  } else {
    
  }
  _impl_.state_root_.SetAllocated(state_root, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_root_.IsDefault()) {
    _impl_.state_root_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.StateProofProto.state_root)
}

// bytes zk_proof = 3;
inline void StateProofProto::clear_zk_proof() {
  _impl_.zk_proof_.ClearToEmpty();
}
inline const std::string& StateProofProto::zk_proof() const {
  // @@protoc_insertion_point(field_get:alyncoin.StateProofProto.zk_proof)
  return _internal_zk_proof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StateProofProto::set_zk_proof(ArgT0&& arg0, ArgT... args) {
 
 _impl_.zk_proof_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.StateProofProto.zk_proof)
}
inline std::string* StateProofProto::mutable_zk_proof() {
  std::string* _s = _internal_mutable_zk_proof();
  // @@protoc_insertion_point(field_mutable:alyncoin.StateProofProto.zk_proof)
  return _s;
}
inline const std::string& StateProofProto::_internal_zk_proof() const {
  return _impl_.zk_proof_.Get();
}
inline void StateProofProto::_internal_set_zk_proof(const std::string& value) {
  
  _impl_.zk_proof_.Set(value, GetArenaForAllocation());
}
inline std::string* StateProofProto::_internal_mutable_zk_proof() {
  
  return _impl_.zk_proof_.Mutable(GetArenaForAllocation());
}
inline std::string* StateProofProto::release_zk_proof() {
  // @@protoc_insertion_point(field_release:alyncoin.StateProofProto.zk_proof)
  return _impl_.zk_proof_.Release();
}
inline void StateProofProto::set_allocated_zk_proof(std::string* zk_proof) {
  if (zk_proof != nullptr) {
    
  } else {
    
  }
  _impl_.zk_proof_.SetAllocated(zk_proof, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zk_proof_.IsDefault()) {
    _impl_.zk_proof_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.StateProofProto.zk_proof)
}

// -------------------------------------------------------------------

// SnapshotProto

// int32 height = 1;
inline void SnapshotProto::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t SnapshotProto::_internal_height() const {
  return _impl_.height_;
}
inline int32_t SnapshotProto::height() const {
  // @@protoc_insertion_point(field_get:alyncoin.SnapshotProto.height)
  return _internal_height();
}
inline void SnapshotProto::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void SnapshotProto::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:alyncoin.SnapshotProto.height)
}

// repeated .alyncoin.BlockProto blocks = 2;
inline int SnapshotProto::_internal_blocks_size() const {
  return _impl_.blocks_.size();
}
inline int SnapshotProto::blocks_size() const {
  return _internal_blocks_size();
}
inline ::alyncoin::BlockProto* SnapshotProto::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:alyncoin.SnapshotProto.blocks)
  return _impl_.blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alyncoin::BlockProto >*
SnapshotProto::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:alyncoin.SnapshotProto.blocks)
  return &_impl_.blocks_;
}
inline const ::alyncoin::BlockProto& SnapshotProto::_internal_blocks(int index) const {
  return _impl_.blocks_.Get(index);
}
inline const ::alyncoin::BlockProto& SnapshotProto::blocks(int index) const {
  // @@protoc_insertion_point(field_get:alyncoin.SnapshotProto.blocks)
  return _internal_blocks(index);
}
inline ::alyncoin::BlockProto* SnapshotProto::_internal_add_blocks() {
  return _impl_.blocks_.Add();
}
inline ::alyncoin::BlockProto* SnapshotProto::add_blocks() {
  ::alyncoin::BlockProto* _add = _internal_add_blocks();
  // @@protoc_insertion_point(field_add:alyncoin.SnapshotProto.blocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alyncoin::BlockProto >&
SnapshotProto::blocks() const {
  // @@protoc_insertion_point(field_list:alyncoin.SnapshotProto.blocks)
  return _impl_.blocks_;
}

// string merkle_root = 3;
inline void SnapshotProto::clear_merkle_root() {
  _impl_.merkle_root_.ClearToEmpty();
}
inline const std::string& SnapshotProto::merkle_root() const {
  // @@protoc_insertion_point(field_get:alyncoin.SnapshotProto.merkle_root)
  return _internal_merkle_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SnapshotProto::set_merkle_root(ArgT0&& arg0, ArgT... args) {
 
 _impl_.merkle_root_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.SnapshotProto.merkle_root)
}
inline std::string* SnapshotProto::mutable_merkle_root() {
  std::string* _s = _internal_mutable_merkle_root();
  // @@protoc_insertion_point(field_mutable:alyncoin.SnapshotProto.merkle_root)
  return _s;
}
inline const std::string& SnapshotProto::_internal_merkle_root() const {
  return _impl_.merkle_root_.Get();
}
inline void SnapshotProto::_internal_set_merkle_root(const std::string& value) {
  
  _impl_.merkle_root_.Set(value, GetArenaForAllocation());
}
inline std::string* SnapshotProto::_internal_mutable_merkle_root() {
  
  return _impl_.merkle_root_.Mutable(GetArenaForAllocation());
}
inline std::string* SnapshotProto::release_merkle_root() {
  // @@protoc_insertion_point(field_release:alyncoin.SnapshotProto.merkle_root)
  return _impl_.merkle_root_.Release();
}
inline void SnapshotProto::set_allocated_merkle_root(std::string* merkle_root) {
  if (merkle_root != nullptr) {
    
  } else {
    
  }
  _impl_.merkle_root_.SetAllocated(merkle_root, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.merkle_root_.IsDefault()) {
    _impl_.merkle_root_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.SnapshotProto.merkle_root)
}

// -------------------------------------------------------------------

// TailBlocksProto

// repeated .alyncoin.BlockProto blocks = 1;
inline int TailBlocksProto::_internal_blocks_size() const {
  return _impl_.blocks_.size();
}
inline int TailBlocksProto::blocks_size() const {
  return _internal_blocks_size();
}
inline ::alyncoin::BlockProto* TailBlocksProto::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:alyncoin.TailBlocksProto.blocks)
  return _impl_.blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alyncoin::BlockProto >*
TailBlocksProto::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:alyncoin.TailBlocksProto.blocks)
  return &_impl_.blocks_;
}
inline const ::alyncoin::BlockProto& TailBlocksProto::_internal_blocks(int index) const {
  return _impl_.blocks_.Get(index);
}
inline const ::alyncoin::BlockProto& TailBlocksProto::blocks(int index) const {
  // @@protoc_insertion_point(field_get:alyncoin.TailBlocksProto.blocks)
  return _internal_blocks(index);
}
inline ::alyncoin::BlockProto* TailBlocksProto::_internal_add_blocks() {
  return _impl_.blocks_.Add();
}
inline ::alyncoin::BlockProto* TailBlocksProto::add_blocks() {
  ::alyncoin::BlockProto* _add = _internal_add_blocks();
  // @@protoc_insertion_point(field_add:alyncoin.TailBlocksProto.blocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alyncoin::BlockProto >&
TailBlocksProto::blocks() const {
  // @@protoc_insertion_point(field_list:alyncoin.TailBlocksProto.blocks)
  return _impl_.blocks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace alyncoin

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sync_5fprotos_2eproto
