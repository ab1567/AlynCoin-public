// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block_protos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_block_5fprotos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_block_5fprotos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "transaction_protos.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_block_5fprotos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_block_5fprotos_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_block_5fprotos_2eproto;
namespace alyncoin {
class BlockProto;
struct BlockProtoDefaultTypeInternal;
extern BlockProtoDefaultTypeInternal _BlockProto_default_instance_;
}  // namespace alyncoin
PROTOBUF_NAMESPACE_OPEN
template<> ::alyncoin::BlockProto* Arena::CreateMaybeMessage<::alyncoin::BlockProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace alyncoin {

// ===================================================================

class BlockProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alyncoin.BlockProto) */ {
 public:
  inline BlockProto() : BlockProto(nullptr) {}
  ~BlockProto() override;
  explicit PROTOBUF_CONSTEXPR BlockProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockProto(const BlockProto& from);
  BlockProto(BlockProto&& from) noexcept
    : BlockProto() {
    *this = ::std::move(from);
  }

  inline BlockProto& operator=(const BlockProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockProto& operator=(BlockProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockProto* internal_default_instance() {
    return reinterpret_cast<const BlockProto*>(
               &_BlockProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlockProto& a, BlockProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockProto& from) {
    BlockProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alyncoin.BlockProto";
  }
  protected:
  explicit BlockProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 3,
    kL2TransactionsFieldNumber = 19,
    kPreviousHashFieldNumber = 2,
    kHashFieldNumber = 4,
    kMinerAddressFieldNumber = 5,
    kBlockSignatureFieldNumber = 9,
    kKeccakHashFieldNumber = 10,
    kZkStarkProofFieldNumber = 11,
    kDilithiumSignatureFieldNumber = 12,
    kFalconSignatureFieldNumber = 13,
    kPublicKeyDilithiumFieldNumber = 14,
    kPublicKeyFalconFieldNumber = 15,
    kStateRootFieldNumber = 16,
    kTxMerkleRootFieldNumber = 17,
    kEpochRootFieldNumber = 20,
    kEpochProofFieldNumber = 21,
    kAccumulatedWorkFieldNumber = 22,
    kIndexFieldNumber = 1,
    kDifficultyFieldNumber = 8,
    kNonceFieldNumber = 6,
    kTimestampFieldNumber = 7,
    kRewardFieldNumber = 18,
  };
  // repeated .alyncoin.TransactionProto transactions = 3;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::alyncoin::TransactionProto* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alyncoin::TransactionProto >*
      mutable_transactions();
  private:
  const ::alyncoin::TransactionProto& _internal_transactions(int index) const;
  ::alyncoin::TransactionProto* _internal_add_transactions();
  public:
  const ::alyncoin::TransactionProto& transactions(int index) const;
  ::alyncoin::TransactionProto* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alyncoin::TransactionProto >&
      transactions() const;

  // repeated .alyncoin.TransactionProto l2_transactions = 19;
  int l2_transactions_size() const;
  private:
  int _internal_l2_transactions_size() const;
  public:
  void clear_l2_transactions();
  ::alyncoin::TransactionProto* mutable_l2_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alyncoin::TransactionProto >*
      mutable_l2_transactions();
  private:
  const ::alyncoin::TransactionProto& _internal_l2_transactions(int index) const;
  ::alyncoin::TransactionProto* _internal_add_l2_transactions();
  public:
  const ::alyncoin::TransactionProto& l2_transactions(int index) const;
  ::alyncoin::TransactionProto* add_l2_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alyncoin::TransactionProto >&
      l2_transactions() const;

  // string previous_hash = 2;
  void clear_previous_hash();
  const std::string& previous_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_previous_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_previous_hash();
  PROTOBUF_NODISCARD std::string* release_previous_hash();
  void set_allocated_previous_hash(std::string* previous_hash);
  private:
  const std::string& _internal_previous_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previous_hash(const std::string& value);
  std::string* _internal_mutable_previous_hash();
  public:

  // string hash = 4;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string miner_address = 5;
  void clear_miner_address();
  const std::string& miner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_miner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_miner_address();
  PROTOBUF_NODISCARD std::string* release_miner_address();
  void set_allocated_miner_address(std::string* miner_address);
  private:
  const std::string& _internal_miner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_miner_address(const std::string& value);
  std::string* _internal_mutable_miner_address();
  public:

  // bytes block_signature = 9;
  void clear_block_signature();
  const std::string& block_signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_signature();
  PROTOBUF_NODISCARD std::string* release_block_signature();
  void set_allocated_block_signature(std::string* block_signature);
  private:
  const std::string& _internal_block_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_signature(const std::string& value);
  std::string* _internal_mutable_block_signature();
  public:

  // string keccak_hash = 10;
  void clear_keccak_hash();
  const std::string& keccak_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keccak_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keccak_hash();
  PROTOBUF_NODISCARD std::string* release_keccak_hash();
  void set_allocated_keccak_hash(std::string* keccak_hash);
  private:
  const std::string& _internal_keccak_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keccak_hash(const std::string& value);
  std::string* _internal_mutable_keccak_hash();
  public:

  // bytes zk_stark_proof = 11;
  void clear_zk_stark_proof();
  const std::string& zk_stark_proof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zk_stark_proof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zk_stark_proof();
  PROTOBUF_NODISCARD std::string* release_zk_stark_proof();
  void set_allocated_zk_stark_proof(std::string* zk_stark_proof);
  private:
  const std::string& _internal_zk_stark_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zk_stark_proof(const std::string& value);
  std::string* _internal_mutable_zk_stark_proof();
  public:

  // bytes dilithium_signature = 12;
  void clear_dilithium_signature();
  const std::string& dilithium_signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dilithium_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dilithium_signature();
  PROTOBUF_NODISCARD std::string* release_dilithium_signature();
  void set_allocated_dilithium_signature(std::string* dilithium_signature);
  private:
  const std::string& _internal_dilithium_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dilithium_signature(const std::string& value);
  std::string* _internal_mutable_dilithium_signature();
  public:

  // bytes falcon_signature = 13;
  void clear_falcon_signature();
  const std::string& falcon_signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_falcon_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_falcon_signature();
  PROTOBUF_NODISCARD std::string* release_falcon_signature();
  void set_allocated_falcon_signature(std::string* falcon_signature);
  private:
  const std::string& _internal_falcon_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_falcon_signature(const std::string& value);
  std::string* _internal_mutable_falcon_signature();
  public:

  // bytes public_key_dilithium = 14;
  void clear_public_key_dilithium();
  const std::string& public_key_dilithium() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key_dilithium(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key_dilithium();
  PROTOBUF_NODISCARD std::string* release_public_key_dilithium();
  void set_allocated_public_key_dilithium(std::string* public_key_dilithium);
  private:
  const std::string& _internal_public_key_dilithium() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key_dilithium(const std::string& value);
  std::string* _internal_mutable_public_key_dilithium();
  public:

  // bytes public_key_falcon = 15;
  void clear_public_key_falcon();
  const std::string& public_key_falcon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key_falcon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key_falcon();
  PROTOBUF_NODISCARD std::string* release_public_key_falcon();
  void set_allocated_public_key_falcon(std::string* public_key_falcon);
  private:
  const std::string& _internal_public_key_falcon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key_falcon(const std::string& value);
  std::string* _internal_mutable_public_key_falcon();
  public:

  // string state_root = 16;
  void clear_state_root();
  const std::string& state_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state_root();
  PROTOBUF_NODISCARD std::string* release_state_root();
  void set_allocated_state_root(std::string* state_root);
  private:
  const std::string& _internal_state_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state_root(const std::string& value);
  std::string* _internal_mutable_state_root();
  public:

  // string tx_merkle_root = 17;
  void clear_tx_merkle_root();
  const std::string& tx_merkle_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tx_merkle_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tx_merkle_root();
  PROTOBUF_NODISCARD std::string* release_tx_merkle_root();
  void set_allocated_tx_merkle_root(std::string* tx_merkle_root);
  private:
  const std::string& _internal_tx_merkle_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx_merkle_root(const std::string& value);
  std::string* _internal_mutable_tx_merkle_root();
  public:

  // string epoch_root = 20;
  void clear_epoch_root();
  const std::string& epoch_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_epoch_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_epoch_root();
  PROTOBUF_NODISCARD std::string* release_epoch_root();
  void set_allocated_epoch_root(std::string* epoch_root);
  private:
  const std::string& _internal_epoch_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_epoch_root(const std::string& value);
  std::string* _internal_mutable_epoch_root();
  public:

  // bytes epoch_proof = 21;
  void clear_epoch_proof();
  const std::string& epoch_proof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_epoch_proof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_epoch_proof();
  PROTOBUF_NODISCARD std::string* release_epoch_proof();
  void set_allocated_epoch_proof(std::string* epoch_proof);
  private:
  const std::string& _internal_epoch_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_epoch_proof(const std::string& value);
  std::string* _internal_mutable_epoch_proof();
  public:

  // string accumulated_work = 22;
  void clear_accumulated_work();
  const std::string& accumulated_work() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accumulated_work(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accumulated_work();
  PROTOBUF_NODISCARD std::string* release_accumulated_work();
  void set_allocated_accumulated_work(std::string* accumulated_work);
  private:
  const std::string& _internal_accumulated_work() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accumulated_work(const std::string& value);
  std::string* _internal_mutable_accumulated_work();
  public:

  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 difficulty = 8;
  void clear_difficulty();
  int32_t difficulty() const;
  void set_difficulty(int32_t value);
  private:
  int32_t _internal_difficulty() const;
  void _internal_set_difficulty(int32_t value);
  public:

  // uint64 nonce = 6;
  void clear_nonce();
  uint64_t nonce() const;
  void set_nonce(uint64_t value);
  private:
  uint64_t _internal_nonce() const;
  void _internal_set_nonce(uint64_t value);
  public:

  // uint64 timestamp = 7;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // optional double reward = 18;
  bool has_reward() const;
  private:
  bool _internal_has_reward() const;
  public:
  void clear_reward();
  double reward() const;
  void set_reward(double value);
  private:
  double _internal_reward() const;
  void _internal_set_reward(double value);
  public:

  // @@protoc_insertion_point(class_scope:alyncoin.BlockProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alyncoin::TransactionProto > transactions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alyncoin::TransactionProto > l2_transactions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr miner_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_signature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keccak_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zk_stark_proof_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dilithium_signature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr falcon_signature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_dilithium_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_falcon_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_root_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_merkle_root_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr epoch_root_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr epoch_proof_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accumulated_work_;
    int32_t index_;
    int32_t difficulty_;
    uint64_t nonce_;
    uint64_t timestamp_;
    double reward_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_block_5fprotos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockProto

// int32 index = 1;
inline void BlockProto::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t BlockProto::_internal_index() const {
  return _impl_.index_;
}
inline int32_t BlockProto::index() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.index)
  return _internal_index();
}
inline void BlockProto::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void BlockProto::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:alyncoin.BlockProto.index)
}

// string previous_hash = 2;
inline void BlockProto::clear_previous_hash() {
  _impl_.previous_hash_.ClearToEmpty();
}
inline const std::string& BlockProto::previous_hash() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.previous_hash)
  return _internal_previous_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockProto::set_previous_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.previous_hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.BlockProto.previous_hash)
}
inline std::string* BlockProto::mutable_previous_hash() {
  std::string* _s = _internal_mutable_previous_hash();
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockProto.previous_hash)
  return _s;
}
inline const std::string& BlockProto::_internal_previous_hash() const {
  return _impl_.previous_hash_.Get();
}
inline void BlockProto::_internal_set_previous_hash(const std::string& value) {
  
  _impl_.previous_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockProto::_internal_mutable_previous_hash() {
  
  return _impl_.previous_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockProto::release_previous_hash() {
  // @@protoc_insertion_point(field_release:alyncoin.BlockProto.previous_hash)
  return _impl_.previous_hash_.Release();
}
inline void BlockProto::set_allocated_previous_hash(std::string* previous_hash) {
  if (previous_hash != nullptr) {
    
  } else {
    
  }
  _impl_.previous_hash_.SetAllocated(previous_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.previous_hash_.IsDefault()) {
    _impl_.previous_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.BlockProto.previous_hash)
}

// repeated .alyncoin.TransactionProto transactions = 3;
inline int BlockProto::_internal_transactions_size() const {
  return _impl_.transactions_.size();
}
inline int BlockProto::transactions_size() const {
  return _internal_transactions_size();
}
inline ::alyncoin::TransactionProto* BlockProto::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockProto.transactions)
  return _impl_.transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alyncoin::TransactionProto >*
BlockProto::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:alyncoin.BlockProto.transactions)
  return &_impl_.transactions_;
}
inline const ::alyncoin::TransactionProto& BlockProto::_internal_transactions(int index) const {
  return _impl_.transactions_.Get(index);
}
inline const ::alyncoin::TransactionProto& BlockProto::transactions(int index) const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.transactions)
  return _internal_transactions(index);
}
inline ::alyncoin::TransactionProto* BlockProto::_internal_add_transactions() {
  return _impl_.transactions_.Add();
}
inline ::alyncoin::TransactionProto* BlockProto::add_transactions() {
  ::alyncoin::TransactionProto* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:alyncoin.BlockProto.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alyncoin::TransactionProto >&
BlockProto::transactions() const {
  // @@protoc_insertion_point(field_list:alyncoin.BlockProto.transactions)
  return _impl_.transactions_;
}

// string hash = 4;
inline void BlockProto::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& BlockProto::hash() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockProto::set_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.BlockProto.hash)
}
inline std::string* BlockProto::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockProto.hash)
  return _s;
}
inline const std::string& BlockProto::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void BlockProto::_internal_set_hash(const std::string& value) {
  
  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockProto::_internal_mutable_hash() {
  
  return _impl_.hash_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockProto::release_hash() {
  // @@protoc_insertion_point(field_release:alyncoin.BlockProto.hash)
  return _impl_.hash_.Release();
}
inline void BlockProto::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  _impl_.hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.BlockProto.hash)
}

// string miner_address = 5;
inline void BlockProto::clear_miner_address() {
  _impl_.miner_address_.ClearToEmpty();
}
inline const std::string& BlockProto::miner_address() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.miner_address)
  return _internal_miner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockProto::set_miner_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.miner_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.BlockProto.miner_address)
}
inline std::string* BlockProto::mutable_miner_address() {
  std::string* _s = _internal_mutable_miner_address();
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockProto.miner_address)
  return _s;
}
inline const std::string& BlockProto::_internal_miner_address() const {
  return _impl_.miner_address_.Get();
}
inline void BlockProto::_internal_set_miner_address(const std::string& value) {
  
  _impl_.miner_address_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockProto::_internal_mutable_miner_address() {
  
  return _impl_.miner_address_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockProto::release_miner_address() {
  // @@protoc_insertion_point(field_release:alyncoin.BlockProto.miner_address)
  return _impl_.miner_address_.Release();
}
inline void BlockProto::set_allocated_miner_address(std::string* miner_address) {
  if (miner_address != nullptr) {
    
  } else {
    
  }
  _impl_.miner_address_.SetAllocated(miner_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.miner_address_.IsDefault()) {
    _impl_.miner_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.BlockProto.miner_address)
}

// uint64 nonce = 6;
inline void BlockProto::clear_nonce() {
  _impl_.nonce_ = uint64_t{0u};
}
inline uint64_t BlockProto::_internal_nonce() const {
  return _impl_.nonce_;
}
inline uint64_t BlockProto::nonce() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.nonce)
  return _internal_nonce();
}
inline void BlockProto::_internal_set_nonce(uint64_t value) {
  
  _impl_.nonce_ = value;
}
inline void BlockProto::set_nonce(uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:alyncoin.BlockProto.nonce)
}

// uint64 timestamp = 7;
inline void BlockProto::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
}
inline uint64_t BlockProto::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t BlockProto::timestamp() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.timestamp)
  return _internal_timestamp();
}
inline void BlockProto::_internal_set_timestamp(uint64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void BlockProto::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:alyncoin.BlockProto.timestamp)
}

// int32 difficulty = 8;
inline void BlockProto::clear_difficulty() {
  _impl_.difficulty_ = 0;
}
inline int32_t BlockProto::_internal_difficulty() const {
  return _impl_.difficulty_;
}
inline int32_t BlockProto::difficulty() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.difficulty)
  return _internal_difficulty();
}
inline void BlockProto::_internal_set_difficulty(int32_t value) {
  
  _impl_.difficulty_ = value;
}
inline void BlockProto::set_difficulty(int32_t value) {
  _internal_set_difficulty(value);
  // @@protoc_insertion_point(field_set:alyncoin.BlockProto.difficulty)
}

// bytes block_signature = 9;
inline void BlockProto::clear_block_signature() {
  _impl_.block_signature_.ClearToEmpty();
}
inline const std::string& BlockProto::block_signature() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.block_signature)
  return _internal_block_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockProto::set_block_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.block_signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.BlockProto.block_signature)
}
inline std::string* BlockProto::mutable_block_signature() {
  std::string* _s = _internal_mutable_block_signature();
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockProto.block_signature)
  return _s;
}
inline const std::string& BlockProto::_internal_block_signature() const {
  return _impl_.block_signature_.Get();
}
inline void BlockProto::_internal_set_block_signature(const std::string& value) {
  
  _impl_.block_signature_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockProto::_internal_mutable_block_signature() {
  
  return _impl_.block_signature_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockProto::release_block_signature() {
  // @@protoc_insertion_point(field_release:alyncoin.BlockProto.block_signature)
  return _impl_.block_signature_.Release();
}
inline void BlockProto::set_allocated_block_signature(std::string* block_signature) {
  if (block_signature != nullptr) {
    
  } else {
    
  }
  _impl_.block_signature_.SetAllocated(block_signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.block_signature_.IsDefault()) {
    _impl_.block_signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.BlockProto.block_signature)
}

// string keccak_hash = 10;
inline void BlockProto::clear_keccak_hash() {
  _impl_.keccak_hash_.ClearToEmpty();
}
inline const std::string& BlockProto::keccak_hash() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.keccak_hash)
  return _internal_keccak_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockProto::set_keccak_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.keccak_hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.BlockProto.keccak_hash)
}
inline std::string* BlockProto::mutable_keccak_hash() {
  std::string* _s = _internal_mutable_keccak_hash();
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockProto.keccak_hash)
  return _s;
}
inline const std::string& BlockProto::_internal_keccak_hash() const {
  return _impl_.keccak_hash_.Get();
}
inline void BlockProto::_internal_set_keccak_hash(const std::string& value) {
  
  _impl_.keccak_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockProto::_internal_mutable_keccak_hash() {
  
  return _impl_.keccak_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockProto::release_keccak_hash() {
  // @@protoc_insertion_point(field_release:alyncoin.BlockProto.keccak_hash)
  return _impl_.keccak_hash_.Release();
}
inline void BlockProto::set_allocated_keccak_hash(std::string* keccak_hash) {
  if (keccak_hash != nullptr) {
    
  } else {
    
  }
  _impl_.keccak_hash_.SetAllocated(keccak_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.keccak_hash_.IsDefault()) {
    _impl_.keccak_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.BlockProto.keccak_hash)
}

// bytes zk_stark_proof = 11;
inline void BlockProto::clear_zk_stark_proof() {
  _impl_.zk_stark_proof_.ClearToEmpty();
}
inline const std::string& BlockProto::zk_stark_proof() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.zk_stark_proof)
  return _internal_zk_stark_proof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockProto::set_zk_stark_proof(ArgT0&& arg0, ArgT... args) {
 
 _impl_.zk_stark_proof_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.BlockProto.zk_stark_proof)
}
inline std::string* BlockProto::mutable_zk_stark_proof() {
  std::string* _s = _internal_mutable_zk_stark_proof();
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockProto.zk_stark_proof)
  return _s;
}
inline const std::string& BlockProto::_internal_zk_stark_proof() const {
  return _impl_.zk_stark_proof_.Get();
}
inline void BlockProto::_internal_set_zk_stark_proof(const std::string& value) {
  
  _impl_.zk_stark_proof_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockProto::_internal_mutable_zk_stark_proof() {
  
  return _impl_.zk_stark_proof_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockProto::release_zk_stark_proof() {
  // @@protoc_insertion_point(field_release:alyncoin.BlockProto.zk_stark_proof)
  return _impl_.zk_stark_proof_.Release();
}
inline void BlockProto::set_allocated_zk_stark_proof(std::string* zk_stark_proof) {
  if (zk_stark_proof != nullptr) {
    
  } else {
    
  }
  _impl_.zk_stark_proof_.SetAllocated(zk_stark_proof, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zk_stark_proof_.IsDefault()) {
    _impl_.zk_stark_proof_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.BlockProto.zk_stark_proof)
}

// bytes dilithium_signature = 12;
inline void BlockProto::clear_dilithium_signature() {
  _impl_.dilithium_signature_.ClearToEmpty();
}
inline const std::string& BlockProto::dilithium_signature() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.dilithium_signature)
  return _internal_dilithium_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockProto::set_dilithium_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dilithium_signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.BlockProto.dilithium_signature)
}
inline std::string* BlockProto::mutable_dilithium_signature() {
  std::string* _s = _internal_mutable_dilithium_signature();
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockProto.dilithium_signature)
  return _s;
}
inline const std::string& BlockProto::_internal_dilithium_signature() const {
  return _impl_.dilithium_signature_.Get();
}
inline void BlockProto::_internal_set_dilithium_signature(const std::string& value) {
  
  _impl_.dilithium_signature_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockProto::_internal_mutable_dilithium_signature() {
  
  return _impl_.dilithium_signature_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockProto::release_dilithium_signature() {
  // @@protoc_insertion_point(field_release:alyncoin.BlockProto.dilithium_signature)
  return _impl_.dilithium_signature_.Release();
}
inline void BlockProto::set_allocated_dilithium_signature(std::string* dilithium_signature) {
  if (dilithium_signature != nullptr) {
    
  } else {
    
  }
  _impl_.dilithium_signature_.SetAllocated(dilithium_signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dilithium_signature_.IsDefault()) {
    _impl_.dilithium_signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.BlockProto.dilithium_signature)
}

// bytes falcon_signature = 13;
inline void BlockProto::clear_falcon_signature() {
  _impl_.falcon_signature_.ClearToEmpty();
}
inline const std::string& BlockProto::falcon_signature() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.falcon_signature)
  return _internal_falcon_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockProto::set_falcon_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.falcon_signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.BlockProto.falcon_signature)
}
inline std::string* BlockProto::mutable_falcon_signature() {
  std::string* _s = _internal_mutable_falcon_signature();
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockProto.falcon_signature)
  return _s;
}
inline const std::string& BlockProto::_internal_falcon_signature() const {
  return _impl_.falcon_signature_.Get();
}
inline void BlockProto::_internal_set_falcon_signature(const std::string& value) {
  
  _impl_.falcon_signature_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockProto::_internal_mutable_falcon_signature() {
  
  return _impl_.falcon_signature_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockProto::release_falcon_signature() {
  // @@protoc_insertion_point(field_release:alyncoin.BlockProto.falcon_signature)
  return _impl_.falcon_signature_.Release();
}
inline void BlockProto::set_allocated_falcon_signature(std::string* falcon_signature) {
  if (falcon_signature != nullptr) {
    
  } else {
    
  }
  _impl_.falcon_signature_.SetAllocated(falcon_signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.falcon_signature_.IsDefault()) {
    _impl_.falcon_signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.BlockProto.falcon_signature)
}

// bytes public_key_dilithium = 14;
inline void BlockProto::clear_public_key_dilithium() {
  _impl_.public_key_dilithium_.ClearToEmpty();
}
inline const std::string& BlockProto::public_key_dilithium() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.public_key_dilithium)
  return _internal_public_key_dilithium();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockProto::set_public_key_dilithium(ArgT0&& arg0, ArgT... args) {
 
 _impl_.public_key_dilithium_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.BlockProto.public_key_dilithium)
}
inline std::string* BlockProto::mutable_public_key_dilithium() {
  std::string* _s = _internal_mutable_public_key_dilithium();
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockProto.public_key_dilithium)
  return _s;
}
inline const std::string& BlockProto::_internal_public_key_dilithium() const {
  return _impl_.public_key_dilithium_.Get();
}
inline void BlockProto::_internal_set_public_key_dilithium(const std::string& value) {
  
  _impl_.public_key_dilithium_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockProto::_internal_mutable_public_key_dilithium() {
  
  return _impl_.public_key_dilithium_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockProto::release_public_key_dilithium() {
  // @@protoc_insertion_point(field_release:alyncoin.BlockProto.public_key_dilithium)
  return _impl_.public_key_dilithium_.Release();
}
inline void BlockProto::set_allocated_public_key_dilithium(std::string* public_key_dilithium) {
  if (public_key_dilithium != nullptr) {
    
  } else {
    
  }
  _impl_.public_key_dilithium_.SetAllocated(public_key_dilithium, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.public_key_dilithium_.IsDefault()) {
    _impl_.public_key_dilithium_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.BlockProto.public_key_dilithium)
}

// bytes public_key_falcon = 15;
inline void BlockProto::clear_public_key_falcon() {
  _impl_.public_key_falcon_.ClearToEmpty();
}
inline const std::string& BlockProto::public_key_falcon() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.public_key_falcon)
  return _internal_public_key_falcon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockProto::set_public_key_falcon(ArgT0&& arg0, ArgT... args) {
 
 _impl_.public_key_falcon_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.BlockProto.public_key_falcon)
}
inline std::string* BlockProto::mutable_public_key_falcon() {
  std::string* _s = _internal_mutable_public_key_falcon();
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockProto.public_key_falcon)
  return _s;
}
inline const std::string& BlockProto::_internal_public_key_falcon() const {
  return _impl_.public_key_falcon_.Get();
}
inline void BlockProto::_internal_set_public_key_falcon(const std::string& value) {
  
  _impl_.public_key_falcon_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockProto::_internal_mutable_public_key_falcon() {
  
  return _impl_.public_key_falcon_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockProto::release_public_key_falcon() {
  // @@protoc_insertion_point(field_release:alyncoin.BlockProto.public_key_falcon)
  return _impl_.public_key_falcon_.Release();
}
inline void BlockProto::set_allocated_public_key_falcon(std::string* public_key_falcon) {
  if (public_key_falcon != nullptr) {
    
  } else {
    
  }
  _impl_.public_key_falcon_.SetAllocated(public_key_falcon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.public_key_falcon_.IsDefault()) {
    _impl_.public_key_falcon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.BlockProto.public_key_falcon)
}

// string state_root = 16;
inline void BlockProto::clear_state_root() {
  _impl_.state_root_.ClearToEmpty();
}
inline const std::string& BlockProto::state_root() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.state_root)
  return _internal_state_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockProto::set_state_root(ArgT0&& arg0, ArgT... args) {
 
 _impl_.state_root_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.BlockProto.state_root)
}
inline std::string* BlockProto::mutable_state_root() {
  std::string* _s = _internal_mutable_state_root();
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockProto.state_root)
  return _s;
}
inline const std::string& BlockProto::_internal_state_root() const {
  return _impl_.state_root_.Get();
}
inline void BlockProto::_internal_set_state_root(const std::string& value) {
  
  _impl_.state_root_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockProto::_internal_mutable_state_root() {
  
  return _impl_.state_root_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockProto::release_state_root() {
  // @@protoc_insertion_point(field_release:alyncoin.BlockProto.state_root)
  return _impl_.state_root_.Release();
}
inline void BlockProto::set_allocated_state_root(std::string* state_root) {
  if (state_root != nullptr) {
    
  } else {
    
  }
  _impl_.state_root_.SetAllocated(state_root, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_root_.IsDefault()) {
    _impl_.state_root_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.BlockProto.state_root)
}

// string tx_merkle_root = 17;
inline void BlockProto::clear_tx_merkle_root() {
  _impl_.tx_merkle_root_.ClearToEmpty();
}
inline const std::string& BlockProto::tx_merkle_root() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.tx_merkle_root)
  return _internal_tx_merkle_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockProto::set_tx_merkle_root(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tx_merkle_root_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.BlockProto.tx_merkle_root)
}
inline std::string* BlockProto::mutable_tx_merkle_root() {
  std::string* _s = _internal_mutable_tx_merkle_root();
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockProto.tx_merkle_root)
  return _s;
}
inline const std::string& BlockProto::_internal_tx_merkle_root() const {
  return _impl_.tx_merkle_root_.Get();
}
inline void BlockProto::_internal_set_tx_merkle_root(const std::string& value) {
  
  _impl_.tx_merkle_root_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockProto::_internal_mutable_tx_merkle_root() {
  
  return _impl_.tx_merkle_root_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockProto::release_tx_merkle_root() {
  // @@protoc_insertion_point(field_release:alyncoin.BlockProto.tx_merkle_root)
  return _impl_.tx_merkle_root_.Release();
}
inline void BlockProto::set_allocated_tx_merkle_root(std::string* tx_merkle_root) {
  if (tx_merkle_root != nullptr) {
    
  } else {
    
  }
  _impl_.tx_merkle_root_.SetAllocated(tx_merkle_root, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tx_merkle_root_.IsDefault()) {
    _impl_.tx_merkle_root_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.BlockProto.tx_merkle_root)
}

// optional double reward = 18;
inline bool BlockProto::_internal_has_reward() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BlockProto::has_reward() const {
  return _internal_has_reward();
}
inline void BlockProto::clear_reward() {
  _impl_.reward_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double BlockProto::_internal_reward() const {
  return _impl_.reward_;
}
inline double BlockProto::reward() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.reward)
  return _internal_reward();
}
inline void BlockProto::_internal_set_reward(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reward_ = value;
}
inline void BlockProto::set_reward(double value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:alyncoin.BlockProto.reward)
}

// repeated .alyncoin.TransactionProto l2_transactions = 19;
inline int BlockProto::_internal_l2_transactions_size() const {
  return _impl_.l2_transactions_.size();
}
inline int BlockProto::l2_transactions_size() const {
  return _internal_l2_transactions_size();
}
inline ::alyncoin::TransactionProto* BlockProto::mutable_l2_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockProto.l2_transactions)
  return _impl_.l2_transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alyncoin::TransactionProto >*
BlockProto::mutable_l2_transactions() {
  // @@protoc_insertion_point(field_mutable_list:alyncoin.BlockProto.l2_transactions)
  return &_impl_.l2_transactions_;
}
inline const ::alyncoin::TransactionProto& BlockProto::_internal_l2_transactions(int index) const {
  return _impl_.l2_transactions_.Get(index);
}
inline const ::alyncoin::TransactionProto& BlockProto::l2_transactions(int index) const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.l2_transactions)
  return _internal_l2_transactions(index);
}
inline ::alyncoin::TransactionProto* BlockProto::_internal_add_l2_transactions() {
  return _impl_.l2_transactions_.Add();
}
inline ::alyncoin::TransactionProto* BlockProto::add_l2_transactions() {
  ::alyncoin::TransactionProto* _add = _internal_add_l2_transactions();
  // @@protoc_insertion_point(field_add:alyncoin.BlockProto.l2_transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::alyncoin::TransactionProto >&
BlockProto::l2_transactions() const {
  // @@protoc_insertion_point(field_list:alyncoin.BlockProto.l2_transactions)
  return _impl_.l2_transactions_;
}

// string epoch_root = 20;
inline void BlockProto::clear_epoch_root() {
  _impl_.epoch_root_.ClearToEmpty();
}
inline const std::string& BlockProto::epoch_root() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.epoch_root)
  return _internal_epoch_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockProto::set_epoch_root(ArgT0&& arg0, ArgT... args) {
 
 _impl_.epoch_root_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.BlockProto.epoch_root)
}
inline std::string* BlockProto::mutable_epoch_root() {
  std::string* _s = _internal_mutable_epoch_root();
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockProto.epoch_root)
  return _s;
}
inline const std::string& BlockProto::_internal_epoch_root() const {
  return _impl_.epoch_root_.Get();
}
inline void BlockProto::_internal_set_epoch_root(const std::string& value) {
  
  _impl_.epoch_root_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockProto::_internal_mutable_epoch_root() {
  
  return _impl_.epoch_root_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockProto::release_epoch_root() {
  // @@protoc_insertion_point(field_release:alyncoin.BlockProto.epoch_root)
  return _impl_.epoch_root_.Release();
}
inline void BlockProto::set_allocated_epoch_root(std::string* epoch_root) {
  if (epoch_root != nullptr) {
    
  } else {
    
  }
  _impl_.epoch_root_.SetAllocated(epoch_root, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.epoch_root_.IsDefault()) {
    _impl_.epoch_root_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.BlockProto.epoch_root)
}

// bytes epoch_proof = 21;
inline void BlockProto::clear_epoch_proof() {
  _impl_.epoch_proof_.ClearToEmpty();
}
inline const std::string& BlockProto::epoch_proof() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.epoch_proof)
  return _internal_epoch_proof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockProto::set_epoch_proof(ArgT0&& arg0, ArgT... args) {
 
 _impl_.epoch_proof_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.BlockProto.epoch_proof)
}
inline std::string* BlockProto::mutable_epoch_proof() {
  std::string* _s = _internal_mutable_epoch_proof();
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockProto.epoch_proof)
  return _s;
}
inline const std::string& BlockProto::_internal_epoch_proof() const {
  return _impl_.epoch_proof_.Get();
}
inline void BlockProto::_internal_set_epoch_proof(const std::string& value) {
  
  _impl_.epoch_proof_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockProto::_internal_mutable_epoch_proof() {
  
  return _impl_.epoch_proof_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockProto::release_epoch_proof() {
  // @@protoc_insertion_point(field_release:alyncoin.BlockProto.epoch_proof)
  return _impl_.epoch_proof_.Release();
}
inline void BlockProto::set_allocated_epoch_proof(std::string* epoch_proof) {
  if (epoch_proof != nullptr) {
    
  } else {
    
  }
  _impl_.epoch_proof_.SetAllocated(epoch_proof, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.epoch_proof_.IsDefault()) {
    _impl_.epoch_proof_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.BlockProto.epoch_proof)
}

// string accumulated_work = 22;
inline void BlockProto::clear_accumulated_work() {
  _impl_.accumulated_work_.ClearToEmpty();
}
inline const std::string& BlockProto::accumulated_work() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockProto.accumulated_work)
  return _internal_accumulated_work();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockProto::set_accumulated_work(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accumulated_work_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.BlockProto.accumulated_work)
}
inline std::string* BlockProto::mutable_accumulated_work() {
  std::string* _s = _internal_mutable_accumulated_work();
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockProto.accumulated_work)
  return _s;
}
inline const std::string& BlockProto::_internal_accumulated_work() const {
  return _impl_.accumulated_work_.Get();
}
inline void BlockProto::_internal_set_accumulated_work(const std::string& value) {
  
  _impl_.accumulated_work_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockProto::_internal_mutable_accumulated_work() {
  
  return _impl_.accumulated_work_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockProto::release_accumulated_work() {
  // @@protoc_insertion_point(field_release:alyncoin.BlockProto.accumulated_work)
  return _impl_.accumulated_work_.Release();
}
inline void BlockProto::set_allocated_accumulated_work(std::string* accumulated_work) {
  if (accumulated_work != nullptr) {
    
  } else {
    
  }
  _impl_.accumulated_work_.SetAllocated(accumulated_work, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accumulated_work_.IsDefault()) {
    _impl_.accumulated_work_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.BlockProto.accumulated_work)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace alyncoin

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_block_5fprotos_2eproto
