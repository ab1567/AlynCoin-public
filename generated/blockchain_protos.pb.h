// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: blockchain_protos.proto
// Protobuf C++ Version: 5.29.3

#ifndef blockchain_5fprotos_2eproto_2epb_2eh
#define blockchain_5fprotos_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "block_protos.pb.h"
#include "transaction_protos.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_blockchain_5fprotos_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_blockchain_5fprotos_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_blockchain_5fprotos_2eproto;
namespace alyncoin {
class BlockchainProto;
struct BlockchainProtoDefaultTypeInternal;
extern BlockchainProtoDefaultTypeInternal _BlockchainProto_default_instance_;
}  // namespace alyncoin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace alyncoin {

// ===================================================================


// -------------------------------------------------------------------

class BlockchainProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:alyncoin.BlockchainProto) */ {
 public:
  inline BlockchainProto() : BlockchainProto(nullptr) {}
  ~BlockchainProto() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BlockchainProto* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BlockchainProto));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BlockchainProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline BlockchainProto(const BlockchainProto& from) : BlockchainProto(nullptr, from) {}
  inline BlockchainProto(BlockchainProto&& from) noexcept
      : BlockchainProto(nullptr, std::move(from)) {}
  inline BlockchainProto& operator=(const BlockchainProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockchainProto& operator=(BlockchainProto&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockchainProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockchainProto* internal_default_instance() {
    return reinterpret_cast<const BlockchainProto*>(
        &_BlockchainProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(BlockchainProto& a, BlockchainProto& b) { a.Swap(&b); }
  inline void Swap(BlockchainProto* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockchainProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockchainProto* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BlockchainProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlockchainProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BlockchainProto& from) { BlockchainProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BlockchainProto* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "alyncoin.BlockchainProto"; }

 protected:
  explicit BlockchainProto(::google::protobuf::Arena* arena);
  BlockchainProto(::google::protobuf::Arena* arena, const BlockchainProto& from);
  BlockchainProto(::google::protobuf::Arena* arena, BlockchainProto&& from) noexcept
      : BlockchainProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBlocksFieldNumber = 2,
    kPendingTransactionsFieldNumber = 3,
    kChainIdFieldNumber = 1,
    kDifficultyFieldNumber = 4,
    kBlockRewardFieldNumber = 5,
  };
  // repeated .alyncoin.BlockProto blocks = 2;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;

  public:
  void clear_blocks() ;
  ::alyncoin::BlockProto* mutable_blocks(int index);
  ::google::protobuf::RepeatedPtrField<::alyncoin::BlockProto>* mutable_blocks();

  private:
  const ::google::protobuf::RepeatedPtrField<::alyncoin::BlockProto>& _internal_blocks() const;
  ::google::protobuf::RepeatedPtrField<::alyncoin::BlockProto>* _internal_mutable_blocks();
  public:
  const ::alyncoin::BlockProto& blocks(int index) const;
  ::alyncoin::BlockProto* add_blocks();
  const ::google::protobuf::RepeatedPtrField<::alyncoin::BlockProto>& blocks() const;
  // repeated .alyncoin.TransactionProto pending_transactions = 3;
  int pending_transactions_size() const;
  private:
  int _internal_pending_transactions_size() const;

  public:
  void clear_pending_transactions() ;
  ::alyncoin::TransactionProto* mutable_pending_transactions(int index);
  ::google::protobuf::RepeatedPtrField<::alyncoin::TransactionProto>* mutable_pending_transactions();

  private:
  const ::google::protobuf::RepeatedPtrField<::alyncoin::TransactionProto>& _internal_pending_transactions() const;
  ::google::protobuf::RepeatedPtrField<::alyncoin::TransactionProto>* _internal_mutable_pending_transactions();
  public:
  const ::alyncoin::TransactionProto& pending_transactions(int index) const;
  ::alyncoin::TransactionProto* add_pending_transactions();
  const ::google::protobuf::RepeatedPtrField<::alyncoin::TransactionProto>& pending_transactions() const;
  // int32 chain_id = 1;
  void clear_chain_id() ;
  ::int32_t chain_id() const;
  void set_chain_id(::int32_t value);

  private:
  ::int32_t _internal_chain_id() const;
  void _internal_set_chain_id(::int32_t value);

  public:
  // int32 difficulty = 4;
  void clear_difficulty() ;
  ::int32_t difficulty() const;
  void set_difficulty(::int32_t value);

  private:
  ::int32_t _internal_difficulty() const;
  void _internal_set_difficulty(::int32_t value);

  public:
  // double block_reward = 5;
  void clear_block_reward() ;
  double block_reward() const;
  void set_block_reward(double value);

  private:
  double _internal_block_reward() const;
  void _internal_set_block_reward(double value);

  public:
  // @@protoc_insertion_point(class_scope:alyncoin.BlockchainProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BlockchainProto& from_msg);
    ::google::protobuf::RepeatedPtrField< ::alyncoin::BlockProto > blocks_;
    ::google::protobuf::RepeatedPtrField< ::alyncoin::TransactionProto > pending_transactions_;
    ::int32_t chain_id_;
    ::int32_t difficulty_;
    double block_reward_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blockchain_5fprotos_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BlockchainProto

// int32 chain_id = 1;
inline void BlockchainProto::clear_chain_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_id_ = 0;
}
inline ::int32_t BlockchainProto::chain_id() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockchainProto.chain_id)
  return _internal_chain_id();
}
inline void BlockchainProto::set_chain_id(::int32_t value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:alyncoin.BlockchainProto.chain_id)
}
inline ::int32_t BlockchainProto::_internal_chain_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chain_id_;
}
inline void BlockchainProto::_internal_set_chain_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_id_ = value;
}

// repeated .alyncoin.BlockProto blocks = 2;
inline int BlockchainProto::_internal_blocks_size() const {
  return _internal_blocks().size();
}
inline int BlockchainProto::blocks_size() const {
  return _internal_blocks_size();
}
inline ::alyncoin::BlockProto* BlockchainProto::mutable_blocks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockchainProto.blocks)
  return _internal_mutable_blocks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::alyncoin::BlockProto>* BlockchainProto::mutable_blocks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:alyncoin.BlockchainProto.blocks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_blocks();
}
inline const ::alyncoin::BlockProto& BlockchainProto::blocks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:alyncoin.BlockchainProto.blocks)
  return _internal_blocks().Get(index);
}
inline ::alyncoin::BlockProto* BlockchainProto::add_blocks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::alyncoin::BlockProto* _add = _internal_mutable_blocks()->Add();
  // @@protoc_insertion_point(field_add:alyncoin.BlockchainProto.blocks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::alyncoin::BlockProto>& BlockchainProto::blocks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:alyncoin.BlockchainProto.blocks)
  return _internal_blocks();
}
inline const ::google::protobuf::RepeatedPtrField<::alyncoin::BlockProto>&
BlockchainProto::_internal_blocks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.blocks_;
}
inline ::google::protobuf::RepeatedPtrField<::alyncoin::BlockProto>*
BlockchainProto::_internal_mutable_blocks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.blocks_;
}

// repeated .alyncoin.TransactionProto pending_transactions = 3;
inline int BlockchainProto::_internal_pending_transactions_size() const {
  return _internal_pending_transactions().size();
}
inline int BlockchainProto::pending_transactions_size() const {
  return _internal_pending_transactions_size();
}
inline ::alyncoin::TransactionProto* BlockchainProto::mutable_pending_transactions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:alyncoin.BlockchainProto.pending_transactions)
  return _internal_mutable_pending_transactions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::alyncoin::TransactionProto>* BlockchainProto::mutable_pending_transactions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:alyncoin.BlockchainProto.pending_transactions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_pending_transactions();
}
inline const ::alyncoin::TransactionProto& BlockchainProto::pending_transactions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:alyncoin.BlockchainProto.pending_transactions)
  return _internal_pending_transactions().Get(index);
}
inline ::alyncoin::TransactionProto* BlockchainProto::add_pending_transactions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::alyncoin::TransactionProto* _add = _internal_mutable_pending_transactions()->Add();
  // @@protoc_insertion_point(field_add:alyncoin.BlockchainProto.pending_transactions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::alyncoin::TransactionProto>& BlockchainProto::pending_transactions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:alyncoin.BlockchainProto.pending_transactions)
  return _internal_pending_transactions();
}
inline const ::google::protobuf::RepeatedPtrField<::alyncoin::TransactionProto>&
BlockchainProto::_internal_pending_transactions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pending_transactions_;
}
inline ::google::protobuf::RepeatedPtrField<::alyncoin::TransactionProto>*
BlockchainProto::_internal_mutable_pending_transactions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.pending_transactions_;
}

// int32 difficulty = 4;
inline void BlockchainProto::clear_difficulty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.difficulty_ = 0;
}
inline ::int32_t BlockchainProto::difficulty() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockchainProto.difficulty)
  return _internal_difficulty();
}
inline void BlockchainProto::set_difficulty(::int32_t value) {
  _internal_set_difficulty(value);
  // @@protoc_insertion_point(field_set:alyncoin.BlockchainProto.difficulty)
}
inline ::int32_t BlockchainProto::_internal_difficulty() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.difficulty_;
}
inline void BlockchainProto::_internal_set_difficulty(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.difficulty_ = value;
}

// double block_reward = 5;
inline void BlockchainProto::clear_block_reward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_reward_ = 0;
}
inline double BlockchainProto::block_reward() const {
  // @@protoc_insertion_point(field_get:alyncoin.BlockchainProto.block_reward)
  return _internal_block_reward();
}
inline void BlockchainProto::set_block_reward(double value) {
  _internal_set_block_reward(value);
  // @@protoc_insertion_point(field_set:alyncoin.BlockchainProto.block_reward)
}
inline double BlockchainProto::_internal_block_reward() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_reward_;
}
inline void BlockchainProto::_internal_set_block_reward(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_reward_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace alyncoin


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // blockchain_5fprotos_2eproto_2epb_2eh
