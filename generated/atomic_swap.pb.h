// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: atomic_swap.proto
// Protobuf C++ Version: 5.29.3

#ifndef atomic_5fswap_2eproto_2epb_2eh
#define atomic_5fswap_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_atomic_5fswap_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_atomic_5fswap_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_atomic_5fswap_2eproto;
namespace atomic {
class AtomicSwapProto;
struct AtomicSwapProtoDefaultTypeInternal;
extern AtomicSwapProtoDefaultTypeInternal _AtomicSwapProto_default_instance_;
}  // namespace atomic
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace atomic {

// ===================================================================


// -------------------------------------------------------------------

class AtomicSwapProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:atomic.AtomicSwapProto) */ {
 public:
  inline AtomicSwapProto() : AtomicSwapProto(nullptr) {}
  ~AtomicSwapProto() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AtomicSwapProto* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AtomicSwapProto));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AtomicSwapProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline AtomicSwapProto(const AtomicSwapProto& from) : AtomicSwapProto(nullptr, from) {}
  inline AtomicSwapProto(AtomicSwapProto&& from) noexcept
      : AtomicSwapProto(nullptr, std::move(from)) {}
  inline AtomicSwapProto& operator=(const AtomicSwapProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AtomicSwapProto& operator=(AtomicSwapProto&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AtomicSwapProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AtomicSwapProto* internal_default_instance() {
    return reinterpret_cast<const AtomicSwapProto*>(
        &_AtomicSwapProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(AtomicSwapProto& a, AtomicSwapProto& b) { a.Swap(&b); }
  inline void Swap(AtomicSwapProto* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AtomicSwapProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AtomicSwapProto* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AtomicSwapProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AtomicSwapProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AtomicSwapProto& from) { AtomicSwapProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AtomicSwapProto* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "atomic.AtomicSwapProto"; }

 protected:
  explicit AtomicSwapProto(::google::protobuf::Arena* arena);
  AtomicSwapProto(::google::protobuf::Arena* arena, const AtomicSwapProto& from);
  AtomicSwapProto(::google::protobuf::Arena* arena, AtomicSwapProto&& from) noexcept
      : AtomicSwapProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUuidFieldNumber = 1,
    kSenderAddressFieldNumber = 2,
    kReceiverAddressFieldNumber = 3,
    kSecretHashFieldNumber = 5,
    kSecretFieldNumber = 6,
    kZkProofFieldNumber = 10,
    kFalconSignatureFieldNumber = 11,
    kDilithiumSignatureFieldNumber = 12,
    kAmountFieldNumber = 4,
    kCreatedAtFieldNumber = 7,
    kExpiresAtFieldNumber = 8,
    kStateFieldNumber = 9,
  };
  // string uuid = 1;
  void clear_uuid() ;
  const std::string& uuid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uuid(Arg_&& arg, Args_... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* value);

  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(
      const std::string& value);
  std::string* _internal_mutable_uuid();

  public:
  // string senderAddress = 2;
  void clear_senderaddress() ;
  const std::string& senderaddress() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_senderaddress(Arg_&& arg, Args_... args);
  std::string* mutable_senderaddress();
  PROTOBUF_NODISCARD std::string* release_senderaddress();
  void set_allocated_senderaddress(std::string* value);

  private:
  const std::string& _internal_senderaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_senderaddress(
      const std::string& value);
  std::string* _internal_mutable_senderaddress();

  public:
  // string receiverAddress = 3;
  void clear_receiveraddress() ;
  const std::string& receiveraddress() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_receiveraddress(Arg_&& arg, Args_... args);
  std::string* mutable_receiveraddress();
  PROTOBUF_NODISCARD std::string* release_receiveraddress();
  void set_allocated_receiveraddress(std::string* value);

  private:
  const std::string& _internal_receiveraddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiveraddress(
      const std::string& value);
  std::string* _internal_mutable_receiveraddress();

  public:
  // string secretHash = 5;
  void clear_secrethash() ;
  const std::string& secrethash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_secrethash(Arg_&& arg, Args_... args);
  std::string* mutable_secrethash();
  PROTOBUF_NODISCARD std::string* release_secrethash();
  void set_allocated_secrethash(std::string* value);

  private:
  const std::string& _internal_secrethash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secrethash(
      const std::string& value);
  std::string* _internal_mutable_secrethash();

  public:
  // string secret = 6;
  void clear_secret() ;
  const std::string& secret() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_secret(Arg_&& arg, Args_... args);
  std::string* mutable_secret();
  PROTOBUF_NODISCARD std::string* release_secret();
  void set_allocated_secret(std::string* value);

  private:
  const std::string& _internal_secret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret(
      const std::string& value);
  std::string* _internal_mutable_secret();

  public:
  // bytes zkProof = 10;
  void clear_zkproof() ;
  const std::string& zkproof() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zkproof(Arg_&& arg, Args_... args);
  std::string* mutable_zkproof();
  PROTOBUF_NODISCARD std::string* release_zkproof();
  void set_allocated_zkproof(std::string* value);

  private:
  const std::string& _internal_zkproof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zkproof(
      const std::string& value);
  std::string* _internal_mutable_zkproof();

  public:
  // bytes falconSignature = 11;
  void clear_falconsignature() ;
  const std::string& falconsignature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_falconsignature(Arg_&& arg, Args_... args);
  std::string* mutable_falconsignature();
  PROTOBUF_NODISCARD std::string* release_falconsignature();
  void set_allocated_falconsignature(std::string* value);

  private:
  const std::string& _internal_falconsignature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_falconsignature(
      const std::string& value);
  std::string* _internal_mutable_falconsignature();

  public:
  // bytes dilithiumSignature = 12;
  void clear_dilithiumsignature() ;
  const std::string& dilithiumsignature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dilithiumsignature(Arg_&& arg, Args_... args);
  std::string* mutable_dilithiumsignature();
  PROTOBUF_NODISCARD std::string* release_dilithiumsignature();
  void set_allocated_dilithiumsignature(std::string* value);

  private:
  const std::string& _internal_dilithiumsignature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dilithiumsignature(
      const std::string& value);
  std::string* _internal_mutable_dilithiumsignature();

  public:
  // uint64 amount = 4;
  void clear_amount() ;
  ::uint64_t amount() const;
  void set_amount(::uint64_t value);

  private:
  ::uint64_t _internal_amount() const;
  void _internal_set_amount(::uint64_t value);

  public:
  // int64 createdAt = 7;
  void clear_createdat() ;
  ::int64_t createdat() const;
  void set_createdat(::int64_t value);

  private:
  ::int64_t _internal_createdat() const;
  void _internal_set_createdat(::int64_t value);

  public:
  // int64 expiresAt = 8;
  void clear_expiresat() ;
  ::int64_t expiresat() const;
  void set_expiresat(::int64_t value);

  private:
  ::int64_t _internal_expiresat() const;
  void _internal_set_expiresat(::int64_t value);

  public:
  // int32 state = 9;
  void clear_state() ;
  ::int32_t state() const;
  void set_state(::int32_t value);

  private:
  ::int32_t _internal_state() const;
  void _internal_set_state(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:atomic.AtomicSwapProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 0,
      87, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AtomicSwapProto& from_msg);
    ::google::protobuf::internal::ArenaStringPtr uuid_;
    ::google::protobuf::internal::ArenaStringPtr senderaddress_;
    ::google::protobuf::internal::ArenaStringPtr receiveraddress_;
    ::google::protobuf::internal::ArenaStringPtr secrethash_;
    ::google::protobuf::internal::ArenaStringPtr secret_;
    ::google::protobuf::internal::ArenaStringPtr zkproof_;
    ::google::protobuf::internal::ArenaStringPtr falconsignature_;
    ::google::protobuf::internal::ArenaStringPtr dilithiumsignature_;
    ::uint64_t amount_;
    ::int64_t createdat_;
    ::int64_t expiresat_;
    ::int32_t state_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_atomic_5fswap_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AtomicSwapProto

// string uuid = 1;
inline void AtomicSwapProto::clear_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& AtomicSwapProto::uuid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:atomic.AtomicSwapProto.uuid)
  return _internal_uuid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AtomicSwapProto::set_uuid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:atomic.AtomicSwapProto.uuid)
}
inline std::string* AtomicSwapProto::mutable_uuid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:atomic.AtomicSwapProto.uuid)
  return _s;
}
inline const std::string& AtomicSwapProto::_internal_uuid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uuid_.Get();
}
inline void AtomicSwapProto::_internal_set_uuid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.Set(value, GetArena());
}
inline std::string* AtomicSwapProto::_internal_mutable_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.uuid_.Mutable( GetArena());
}
inline std::string* AtomicSwapProto::release_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:atomic.AtomicSwapProto.uuid)
  return _impl_.uuid_.Release();
}
inline void AtomicSwapProto::set_allocated_uuid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:atomic.AtomicSwapProto.uuid)
}

// string senderAddress = 2;
inline void AtomicSwapProto::clear_senderaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.senderaddress_.ClearToEmpty();
}
inline const std::string& AtomicSwapProto::senderaddress() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:atomic.AtomicSwapProto.senderAddress)
  return _internal_senderaddress();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AtomicSwapProto::set_senderaddress(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.senderaddress_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:atomic.AtomicSwapProto.senderAddress)
}
inline std::string* AtomicSwapProto::mutable_senderaddress() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_senderaddress();
  // @@protoc_insertion_point(field_mutable:atomic.AtomicSwapProto.senderAddress)
  return _s;
}
inline const std::string& AtomicSwapProto::_internal_senderaddress() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.senderaddress_.Get();
}
inline void AtomicSwapProto::_internal_set_senderaddress(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.senderaddress_.Set(value, GetArena());
}
inline std::string* AtomicSwapProto::_internal_mutable_senderaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.senderaddress_.Mutable( GetArena());
}
inline std::string* AtomicSwapProto::release_senderaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:atomic.AtomicSwapProto.senderAddress)
  return _impl_.senderaddress_.Release();
}
inline void AtomicSwapProto::set_allocated_senderaddress(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.senderaddress_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.senderaddress_.IsDefault()) {
    _impl_.senderaddress_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:atomic.AtomicSwapProto.senderAddress)
}

// string receiverAddress = 3;
inline void AtomicSwapProto::clear_receiveraddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.receiveraddress_.ClearToEmpty();
}
inline const std::string& AtomicSwapProto::receiveraddress() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:atomic.AtomicSwapProto.receiverAddress)
  return _internal_receiveraddress();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AtomicSwapProto::set_receiveraddress(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.receiveraddress_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:atomic.AtomicSwapProto.receiverAddress)
}
inline std::string* AtomicSwapProto::mutable_receiveraddress() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_receiveraddress();
  // @@protoc_insertion_point(field_mutable:atomic.AtomicSwapProto.receiverAddress)
  return _s;
}
inline const std::string& AtomicSwapProto::_internal_receiveraddress() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.receiveraddress_.Get();
}
inline void AtomicSwapProto::_internal_set_receiveraddress(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.receiveraddress_.Set(value, GetArena());
}
inline std::string* AtomicSwapProto::_internal_mutable_receiveraddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.receiveraddress_.Mutable( GetArena());
}
inline std::string* AtomicSwapProto::release_receiveraddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:atomic.AtomicSwapProto.receiverAddress)
  return _impl_.receiveraddress_.Release();
}
inline void AtomicSwapProto::set_allocated_receiveraddress(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.receiveraddress_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.receiveraddress_.IsDefault()) {
    _impl_.receiveraddress_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:atomic.AtomicSwapProto.receiverAddress)
}

// uint64 amount = 4;
inline void AtomicSwapProto::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = ::uint64_t{0u};
}
inline ::uint64_t AtomicSwapProto::amount() const {
  // @@protoc_insertion_point(field_get:atomic.AtomicSwapProto.amount)
  return _internal_amount();
}
inline void AtomicSwapProto::set_amount(::uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:atomic.AtomicSwapProto.amount)
}
inline ::uint64_t AtomicSwapProto::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline void AtomicSwapProto::_internal_set_amount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = value;
}

// string secretHash = 5;
inline void AtomicSwapProto::clear_secrethash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secrethash_.ClearToEmpty();
}
inline const std::string& AtomicSwapProto::secrethash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:atomic.AtomicSwapProto.secretHash)
  return _internal_secrethash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AtomicSwapProto::set_secrethash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secrethash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:atomic.AtomicSwapProto.secretHash)
}
inline std::string* AtomicSwapProto::mutable_secrethash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_secrethash();
  // @@protoc_insertion_point(field_mutable:atomic.AtomicSwapProto.secretHash)
  return _s;
}
inline const std::string& AtomicSwapProto::_internal_secrethash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.secrethash_.Get();
}
inline void AtomicSwapProto::_internal_set_secrethash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secrethash_.Set(value, GetArena());
}
inline std::string* AtomicSwapProto::_internal_mutable_secrethash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.secrethash_.Mutable( GetArena());
}
inline std::string* AtomicSwapProto::release_secrethash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:atomic.AtomicSwapProto.secretHash)
  return _impl_.secrethash_.Release();
}
inline void AtomicSwapProto::set_allocated_secrethash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secrethash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.secrethash_.IsDefault()) {
    _impl_.secrethash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:atomic.AtomicSwapProto.secretHash)
}

// string secret = 6;
inline void AtomicSwapProto::clear_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secret_.ClearToEmpty();
}
inline const std::string& AtomicSwapProto::secret() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:atomic.AtomicSwapProto.secret)
  return _internal_secret();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AtomicSwapProto::set_secret(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secret_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:atomic.AtomicSwapProto.secret)
}
inline std::string* AtomicSwapProto::mutable_secret() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_secret();
  // @@protoc_insertion_point(field_mutable:atomic.AtomicSwapProto.secret)
  return _s;
}
inline const std::string& AtomicSwapProto::_internal_secret() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.secret_.Get();
}
inline void AtomicSwapProto::_internal_set_secret(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secret_.Set(value, GetArena());
}
inline std::string* AtomicSwapProto::_internal_mutable_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.secret_.Mutable( GetArena());
}
inline std::string* AtomicSwapProto::release_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:atomic.AtomicSwapProto.secret)
  return _impl_.secret_.Release();
}
inline void AtomicSwapProto::set_allocated_secret(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secret_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.secret_.IsDefault()) {
    _impl_.secret_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:atomic.AtomicSwapProto.secret)
}

// int64 createdAt = 7;
inline void AtomicSwapProto::clear_createdat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.createdat_ = ::int64_t{0};
}
inline ::int64_t AtomicSwapProto::createdat() const {
  // @@protoc_insertion_point(field_get:atomic.AtomicSwapProto.createdAt)
  return _internal_createdat();
}
inline void AtomicSwapProto::set_createdat(::int64_t value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:atomic.AtomicSwapProto.createdAt)
}
inline ::int64_t AtomicSwapProto::_internal_createdat() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.createdat_;
}
inline void AtomicSwapProto::_internal_set_createdat(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.createdat_ = value;
}

// int64 expiresAt = 8;
inline void AtomicSwapProto::clear_expiresat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiresat_ = ::int64_t{0};
}
inline ::int64_t AtomicSwapProto::expiresat() const {
  // @@protoc_insertion_point(field_get:atomic.AtomicSwapProto.expiresAt)
  return _internal_expiresat();
}
inline void AtomicSwapProto::set_expiresat(::int64_t value) {
  _internal_set_expiresat(value);
  // @@protoc_insertion_point(field_set:atomic.AtomicSwapProto.expiresAt)
}
inline ::int64_t AtomicSwapProto::_internal_expiresat() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expiresat_;
}
inline void AtomicSwapProto::_internal_set_expiresat(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiresat_ = value;
}

// int32 state = 9;
inline void AtomicSwapProto::clear_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_ = 0;
}
inline ::int32_t AtomicSwapProto::state() const {
  // @@protoc_insertion_point(field_get:atomic.AtomicSwapProto.state)
  return _internal_state();
}
inline void AtomicSwapProto::set_state(::int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:atomic.AtomicSwapProto.state)
}
inline ::int32_t AtomicSwapProto::_internal_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.state_;
}
inline void AtomicSwapProto::_internal_set_state(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_ = value;
}

// bytes zkProof = 10;
inline void AtomicSwapProto::clear_zkproof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zkproof_.ClearToEmpty();
}
inline const std::string& AtomicSwapProto::zkproof() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:atomic.AtomicSwapProto.zkProof)
  return _internal_zkproof();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AtomicSwapProto::set_zkproof(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zkproof_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:atomic.AtomicSwapProto.zkProof)
}
inline std::string* AtomicSwapProto::mutable_zkproof() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_zkproof();
  // @@protoc_insertion_point(field_mutable:atomic.AtomicSwapProto.zkProof)
  return _s;
}
inline const std::string& AtomicSwapProto::_internal_zkproof() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.zkproof_.Get();
}
inline void AtomicSwapProto::_internal_set_zkproof(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zkproof_.Set(value, GetArena());
}
inline std::string* AtomicSwapProto::_internal_mutable_zkproof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.zkproof_.Mutable( GetArena());
}
inline std::string* AtomicSwapProto::release_zkproof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:atomic.AtomicSwapProto.zkProof)
  return _impl_.zkproof_.Release();
}
inline void AtomicSwapProto::set_allocated_zkproof(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zkproof_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.zkproof_.IsDefault()) {
    _impl_.zkproof_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:atomic.AtomicSwapProto.zkProof)
}

// bytes falconSignature = 11;
inline void AtomicSwapProto::clear_falconsignature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.falconsignature_.ClearToEmpty();
}
inline const std::string& AtomicSwapProto::falconsignature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:atomic.AtomicSwapProto.falconSignature)
  return _internal_falconsignature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AtomicSwapProto::set_falconsignature(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.falconsignature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:atomic.AtomicSwapProto.falconSignature)
}
inline std::string* AtomicSwapProto::mutable_falconsignature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_falconsignature();
  // @@protoc_insertion_point(field_mutable:atomic.AtomicSwapProto.falconSignature)
  return _s;
}
inline const std::string& AtomicSwapProto::_internal_falconsignature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.falconsignature_.Get();
}
inline void AtomicSwapProto::_internal_set_falconsignature(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.falconsignature_.Set(value, GetArena());
}
inline std::string* AtomicSwapProto::_internal_mutable_falconsignature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.falconsignature_.Mutable( GetArena());
}
inline std::string* AtomicSwapProto::release_falconsignature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:atomic.AtomicSwapProto.falconSignature)
  return _impl_.falconsignature_.Release();
}
inline void AtomicSwapProto::set_allocated_falconsignature(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.falconsignature_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.falconsignature_.IsDefault()) {
    _impl_.falconsignature_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:atomic.AtomicSwapProto.falconSignature)
}

// bytes dilithiumSignature = 12;
inline void AtomicSwapProto::clear_dilithiumsignature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dilithiumsignature_.ClearToEmpty();
}
inline const std::string& AtomicSwapProto::dilithiumsignature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:atomic.AtomicSwapProto.dilithiumSignature)
  return _internal_dilithiumsignature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AtomicSwapProto::set_dilithiumsignature(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dilithiumsignature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:atomic.AtomicSwapProto.dilithiumSignature)
}
inline std::string* AtomicSwapProto::mutable_dilithiumsignature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dilithiumsignature();
  // @@protoc_insertion_point(field_mutable:atomic.AtomicSwapProto.dilithiumSignature)
  return _s;
}
inline const std::string& AtomicSwapProto::_internal_dilithiumsignature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dilithiumsignature_.Get();
}
inline void AtomicSwapProto::_internal_set_dilithiumsignature(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dilithiumsignature_.Set(value, GetArena());
}
inline std::string* AtomicSwapProto::_internal_mutable_dilithiumsignature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dilithiumsignature_.Mutable( GetArena());
}
inline std::string* AtomicSwapProto::release_dilithiumsignature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:atomic.AtomicSwapProto.dilithiumSignature)
  return _impl_.dilithiumsignature_.Release();
}
inline void AtomicSwapProto::set_allocated_dilithiumsignature(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dilithiumsignature_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.dilithiumsignature_.IsDefault()) {
    _impl_.dilithiumsignature_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:atomic.AtomicSwapProto.dilithiumSignature)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace atomic


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // atomic_5fswap_2eproto_2epb_2eh
