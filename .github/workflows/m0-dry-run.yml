name: m0-dry-run
on:
  workflow_dispatch:
jobs:
  python-acceptance:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: { os: [ubuntu-latest, macos-latest, windows-latest] }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install Python deps
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install argon2-cffi cryptography 'qrcode[pil]' pyotp
      - name: Run KDF + AEAD test
        shell: bash
        run: |
          cat > kdf_aead_test.py <<'PY'
import os, time, json
from argon2.low_level import hash_secret_raw, Type
from cryptography.hazmat.primitives.ciphers.aead import XChaCha20Poly1305

def derive_argon2id(passphrase: bytes, salt: bytes, mem_mib: int, time_cost: int, parallelism: int = 1, key_len: int = 32):
    return hash_secret_raw(
        secret=passphrase, salt=salt,
        time_cost=time_cost, memory_cost=mem_mib * 1024,
        parallelism=parallelism, hash_len=key_len, type=Type.ID
    )

def bench(profile_name, mem_mib, target_ms_lo, target_ms_hi):
    salt = os.urandom(16)
    pw = b"correct horse battery staple"
    t0 = time.time()
    for time_cost in (1, 2, 3, 4):
        _ = derive_argon2id(pw, salt, mem_mib, time_cost)
        ms = (time.time() - t0) * 1000
        if target_ms_lo <= ms <= target_ms_hi:
            return {"profile": profile_name, "mem_mib": mem_mib, "time_cost": time_cost, "elapsed_ms": round(ms, 2)}
        t0 = time.time()
    return {"profile": profile_name, "mem_mib": mem_mib, "time_cost": time_cost, "elapsed_ms": round(ms, 2), "note": "out_of_band"}

def test_aead():
    key = os.urandom(32)
    aead = XChaCha20Poly1305(key)
    nonce = os.urandom(24)
    aad = b"alyncoin-test-aad"
    pt = b"hello aead"
    ct = aead.encrypt(nonce, pt, aad)
    assert aead.decrypt(nonce, ct, aad) == pt
    bad = bytearray(ct); bad[-1] ^= 1
    failed = False
    try:
        _ = aead.decrypt(nonce, bytes(bad), aad)
    except Exception:
        failed = True
    return {"aead": "xchacha20poly1305", "tamper_rejected": failed}

if __name__ == "__main__":
    results = {
        "argon2id_interactive": bench("interactive", 256, 250, 500),
        "argon2id_sensitive":   bench("sensitive",   512, 500, 1200),
        "aead": test_aead()
    }
    print(json.dumps(results, indent=2))
PY
          python kdf_aead_test.py
      - name: Run TOTP + QR test
        shell: bash
        run: |
          cat > totp_qr_test.py <<'PY'
import pyotp, qrcode, io, json
secret = "JBSWY3DPEHPK3PXP"
totp = pyotp.TOTP(secret, digits=6, interval=30)
code = totp.now()
uri = pyotp.totp.TOTP(secret).provisioning_uri(name="demo@alyncoin", issuer_name="AlynCoin")
img = qrcode.make(uri)
buf = io.BytesIO(); img.save(buf, format="PNG")
print(json.dumps({
  "totp_code_len": len(code),
  "uri_prefix": uri.split(":")[0],
  "qr_png_bytes": len(buf.getvalue())
}, indent=2))
PY
          python totp_qr_test.py
      - name: Metrics smoke (start/verify)
        shell: bash
        run: |
          cat > metrics_smoke.py <<'PY'
from http.server import BaseHTTPRequestHandler, HTTPServer
import time, threading
COUNT = 0
def bump():
    global COUNT
    while True:
        COUNT += 1
        time.sleep(1)
class H(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == "/metrics":
            body = (f"# HELP alyncoin_counter demo counter\n"
                    f"# TYPE alyncoin_counter counter\n"
                    f"alyncoin_counter{{chain_id=\"alyn\",node_role=\"dev\",version=\"m0\"}} {COUNT}\n")
            self.send_response(200)
            self.send_header("Content-Type", "text/plain; version=0.0.4")
            self.end_headers()
            self.wfile.write(body.encode())
        else:
            self.send_response(404); self.end_headers()
if __name__ == "__main__":
    threading.Thread(target=bump, daemon=True).start()
    HTTPServer(("0.0.0.0", 9100), H).serve_forever()
PY
          python metrics_smoke.py & sleep 2
          curl -fsS http://127.0.0.1:9100/metrics | head -n 3
          kill %1
