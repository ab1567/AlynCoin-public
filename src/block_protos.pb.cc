// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block_protos.proto

#include "block_protos.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace alyncoin {
PROTOBUF_CONSTEXPR BlockProto::BlockProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transactions_)*/{}
  , /*decltype(_impl_.previous_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.miner_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.difficulty_)*/0u
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.nonce_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockProtoDefaultTypeInternal() {}
  union {
    BlockProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockProtoDefaultTypeInternal _BlockProto_default_instance_;
}  // namespace alyncoin
static ::_pb::Metadata file_level_metadata_block_5fprotos_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_block_5fprotos_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_block_5fprotos_2eproto = nullptr;

const uint32_t TableStruct_block_5fprotos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.previous_hash_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.transactions_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.miner_address_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.difficulty_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.nonce_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.block_signature_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::alyncoin::BlockProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::alyncoin::_BlockProto_default_instance_._instance,
};

const char descriptor_table_protodef_block_5fprotos_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022block_protos.proto\022\010alyncoin\032\030transact"
  "ion_protos.proto\"\330\001\n\nBlockProto\022\r\n\005index"
  "\030\001 \001(\r\022\025\n\rprevious_hash\030\002 \001(\014\0220\n\014transac"
  "tions\030\003 \003(\0132\032.alyncoin.TransactionProto\022"
  "\025\n\rminer_address\030\004 \001(\014\022\021\n\ttimestamp\030\005 \001("
  "\004\022\022\n\ndifficulty\030\006 \001(\r\022\r\n\005nonce\030\007 \001(\004\022\014\n\004"
  "hash\030\010 \001(\014\022\027\n\017block_signature\030\t \001(\014b\006pro"
  "to3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_block_5fprotos_2eproto_deps[1] = {
  &::descriptor_table_transaction_5fprotos_2eproto,
};
static ::_pbi::once_flag descriptor_table_block_5fprotos_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_block_5fprotos_2eproto = {
    false, false, 283, descriptor_table_protodef_block_5fprotos_2eproto,
    "block_protos.proto",
    &descriptor_table_block_5fprotos_2eproto_once, descriptor_table_block_5fprotos_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_block_5fprotos_2eproto::offsets,
    file_level_metadata_block_5fprotos_2eproto, file_level_enum_descriptors_block_5fprotos_2eproto,
    file_level_service_descriptors_block_5fprotos_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_block_5fprotos_2eproto_getter() {
  return &descriptor_table_block_5fprotos_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_block_5fprotos_2eproto(&descriptor_table_block_5fprotos_2eproto);
namespace alyncoin {

// ===================================================================

class BlockProto::_Internal {
 public:
};

void BlockProto::clear_transactions() {
  _impl_.transactions_.Clear();
}
BlockProto::BlockProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:alyncoin.BlockProto)
}
BlockProto::BlockProto(const BlockProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){from._impl_.transactions_}
    , decltype(_impl_.previous_hash_){}
    , decltype(_impl_.miner_address_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.block_signature_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.difficulty_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.nonce_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.previous_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.previous_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_previous_hash().empty()) {
    _this->_impl_.previous_hash_.Set(from._internal_previous_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.miner_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.miner_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_miner_address().empty()) {
    _this->_impl_.miner_address_.Set(from._internal_miner_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.block_signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_signature().empty()) {
    _this->_impl_.block_signature_.Set(from._internal_block_signature(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nonce_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.nonce_));
  // @@protoc_insertion_point(copy_constructor:alyncoin.BlockProto)
}

inline void BlockProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){arena}
    , decltype(_impl_.previous_hash_){}
    , decltype(_impl_.miner_address_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.block_signature_){}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.difficulty_){0u}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.nonce_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.previous_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.previous_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.miner_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.miner_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockProto::~BlockProto() {
  // @@protoc_insertion_point(destructor:alyncoin.BlockProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transactions_.~RepeatedPtrField();
  _impl_.previous_hash_.Destroy();
  _impl_.miner_address_.Destroy();
  _impl_.hash_.Destroy();
  _impl_.block_signature_.Destroy();
}

void BlockProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockProto::Clear() {
// @@protoc_insertion_point(message_clear_start:alyncoin.BlockProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transactions_.Clear();
  _impl_.previous_hash_.ClearToEmpty();
  _impl_.miner_address_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _impl_.block_signature_.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nonce_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.nonce_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes previous_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_previous_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .alyncoin.TransactionProto transactions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes miner_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_miner_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 difficulty = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nonce = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes hash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes block_signature = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_block_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:alyncoin.BlockProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // bytes previous_hash = 2;
  if (!this->_internal_previous_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_previous_hash(), target);
  }

  // repeated .alyncoin.TransactionProto transactions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_transactions_size()); i < n; i++) {
    const auto& repfield = this->_internal_transactions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes miner_address = 4;
  if (!this->_internal_miner_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_miner_address(), target);
  }

  // uint64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // uint32 difficulty = 6;
  if (this->_internal_difficulty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_difficulty(), target);
  }

  // uint64 nonce = 7;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_nonce(), target);
  }

  // bytes hash = 8;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_hash(), target);
  }

  // bytes block_signature = 9;
  if (!this->_internal_block_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_block_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alyncoin.BlockProto)
  return target;
}

size_t BlockProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alyncoin.BlockProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .alyncoin.TransactionProto transactions = 3;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->_impl_.transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes previous_hash = 2;
  if (!this->_internal_previous_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_previous_hash());
  }

  // bytes miner_address = 4;
  if (!this->_internal_miner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_miner_address());
  }

  // bytes hash = 8;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // bytes block_signature = 9;
  if (!this->_internal_block_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_signature());
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // uint32 difficulty = 6;
  if (this->_internal_difficulty() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_difficulty());
  }

  // uint64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint64 nonce = 7;
  if (this->_internal_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockProto::GetClassData() const { return &_class_data_; }


void BlockProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockProto*>(&to_msg);
  auto& from = static_cast<const BlockProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:alyncoin.BlockProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.transactions_.MergeFrom(from._impl_.transactions_);
  if (!from._internal_previous_hash().empty()) {
    _this->_internal_set_previous_hash(from._internal_previous_hash());
  }
  if (!from._internal_miner_address().empty()) {
    _this->_internal_set_miner_address(from._internal_miner_address());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_block_signature().empty()) {
    _this->_internal_set_block_signature(from._internal_block_signature());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_difficulty() != 0) {
    _this->_internal_set_difficulty(from._internal_difficulty());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_nonce() != 0) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockProto::CopyFrom(const BlockProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alyncoin.BlockProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockProto::IsInitialized() const {
  return true;
}

void BlockProto::InternalSwap(BlockProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.transactions_.InternalSwap(&other->_impl_.transactions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.previous_hash_, lhs_arena,
      &other->_impl_.previous_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.miner_address_, lhs_arena,
      &other->_impl_.miner_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_signature_, lhs_arena,
      &other->_impl_.block_signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.nonce_)
      + sizeof(BlockProto::_impl_.nonce_)
      - PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_block_5fprotos_2eproto_getter, &descriptor_table_block_5fprotos_2eproto_once,
      file_level_metadata_block_5fprotos_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace alyncoin
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::alyncoin::BlockProto*
Arena::CreateMaybeMessage< ::alyncoin::BlockProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::alyncoin::BlockProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
