syntax = "proto3";
package alyncoin.net;

import "block_protos.proto";
import "blockchain_protos.proto";
import "sync_protos.proto";
import "transaction_protos.proto";

message Handshake {
  string version = 1;
  string network_id = 2;
  uint64 height = 3;
  uint32 listen_port = 4;
  bytes genesis_hash = 5;
  repeated string capabilities = 6;

  // X25519 public key for per-link key exchange
  bytes pub_key = 7;

  // NEW â€” bump this whenever the `Frame` message layout changes.
  // 0 means "unknown / pre-rev".  The current software uses 1.
  uint32 frame_rev = 8;

  // total cumulative work of the sender's chain
  uint64 total_work = 9;

  // If true, the sender is requesting a snapshot sync. The server should echo
  // this flag only if it was set by the initiator.
  bool want_snapshot = 10;

  // Preferred snapshot chunk size in bytes. Nodes should respect the smaller
  // of their own capability and the peer's preference.
  uint32 snapshot_size = 11;

  // Unique stable identifier for this node.  Helps detect duplicate
  // connections even when the IP or port changes.
  string node_id = 12;

  // 64-bit nonce used as a tie breaker when both sides initiate a
  // connection at the same time.
  uint64 nonce = 13;

  // Optional: the sender's externally observed IP address. Modern nodes set
  // this when responding to a handshake so the remote peer learns which
  // address the network sees for it.
  string observed_ip = 14;
}

message Ping {}
message Pong {}
message HeightRequest {}
message HeightResponse {
  uint64 height = 1;
  // cumulative work of the sender's chain at this height
  uint64 total_work = 2;
}

// Broadcast our current height along with tip hash and total work
message HeightProbe {
  uint32 height = 1;
  bytes  tip_hash = 2;   // 32-byte block hash
  uint64 total_work = 3;
}

message BlockBroadcast { alyncoin.BlockProto block = 1; }

message BlockBatch { alyncoin.BlockchainProto chain = 1; }
// Request a single block by index
message BlockRequest { uint64 index = 1; }
// Response containing the requested block
message BlockResponse { alyncoin.BlockProto block = 1; }

message SnapshotMeta {
  uint64 height = 1;
  string root_hash = 2;
  uint64 total_bytes = 3;
  uint32 chunk_size = 4;
  string chain_id = 5;
  string genesis_hash = 6;
  bytes tip_hash = 7;
  uint64 total_work = 8;
  bytes digest = 9;
}

message SnapshotChunk { bytes data = 1; }
message SnapshotAck { uint32 seq = 1; }
message SnapshotEnd {
  uint64 total_bytes = 1;
  bytes digest = 2;
}
message TailBlocks { repeated alyncoin.BlockProto blocks = 1; }
message EpochProof { bytes data = 1; }
message Inventory { repeated string hashes = 1; }
message TipHashRequest {}
message TipHashResponse { string hash = 1; }
message PeerListRequest {}
message PeerList { repeated string peers = 1; }
message RollupBlockMsg { bytes data = 1; }
message SnapshotRequest { string until_hash = 1; }
message TailBlocksRequest {
  uint64 from_height = 1;
  string anchor_hash = 2; // tip hash when request was sent
}
message GetData { repeated string hashes = 1; }
message GetHeaders { string from_hash = 1; }
message Headers { repeated alyncoin.BlockProto headers = 1; }
message StateProof { alyncoin.StateProofProto proof = 1; }
message TransactionBroadcast { alyncoin.TransactionProto tx = 1; }
message Whisper { bytes data = 1; }

message Frame {
  oneof kind {
    Handshake handshake = 1;
    Ping ping = 2;
    Pong pong = 3;
    HeightRequest height_req = 4;
    HeightResponse height_res = 5;
    HeightProbe height_probe = 31;
    BlockBroadcast block_broadcast = 6;
    BlockBatch block_batch = 7;
    BlockRequest block_request = 29;
    BlockResponse block_response = 30;
    SnapshotMeta snapshot_meta = 8;
    SnapshotChunk snapshot_chunk = 9;
    SnapshotAck snapshot_ack = 10;
    SnapshotEnd snapshot_end = 11;
    TailBlocks tail_blocks = 12;
    EpochProof agg_proof = 13;
    Inventory inv = 14;
    TipHashRequest tip_hash_req = 15;
    TipHashResponse tip_hash_res = 16;
    PeerListRequest peer_list_req = 17;
    PeerList peer_list = 18;
    RollupBlockMsg rollup_block = 19;
    SnapshotRequest snapshot_req = 20;
    TailBlocksRequest tail_req = 21;
    StateProof state_proof = 22;
    GetData get_data = 23;
    BlockchainSyncProto blockchain_sync_request = 24;
    TransactionBroadcast tx_broadcast = 25;
    Whisper whisper = 26;
    GetHeaders get_headers = 27;
    Headers headers = 28;
  }
}
