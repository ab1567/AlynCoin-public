#include "blockchain.h"
#include "blake3.h"
#include "block_reward.h"
#include "crypto_utils.h"
#include "difficulty.h"
#include "generated/block_protos.pb.h"
#include "generated/blockchain_protos.pb.h"
#include "layer2/state_channel.h"
#include "network.h"
#include "rollup/proofs/proof_verifier.h"
#include "rollup/rollup_block.h"
#include "transaction.h"
#include "zk/winterfell_stark.h"
#include "json/json.h"
#include <algorithm>
#include <atomic>
#include <chrono>
#include <filesystem>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <locale>
#include <mutex>
#include <sys/stat.h>
#include <thread>

#define ROLLUP_CHAIN_FILE "rollup_chain.dat"
namespace fs = std::filesystem;
const std::string BLOCKCHAIN_DB_PATH = "/root/.alyncoin/blockchain_db";
std::vector<StateChannel> stateChannels;
std::vector<RollupBlock> rollupBlocks;
// Global mutex for blockchain safety
std::mutex blockchainMutex;
std::atomic<bool> Blockchain::isMining{false};

Blockchain::Blockchain()
    : difficulty(4), miningReward(10.0), db(nullptr), totalBurnedSupply(0.0),
      network(nullptr) {
  std::cout << "[DEBUG] Default Blockchain constructor called.\n";
}

// ✅ **Constructor: Open RocksDB**
Blockchain::Blockchain(unsigned short port, const std::string &dbPath)
    : difficulty(4), miningReward(10.0) {
  network = &Network::getInstance(port, this);
  std::cout << "[DEBUG] Initializing Blockchain..." << std::endl;

  std::string dbPathFinal = BLOCKCHAIN_DB_PATH;
  if (!dbPath.empty()) {
    dbPathFinal = dbPath;
    std::cout << "📁 Using custom DB path: " << dbPathFinal << "\n";
  }

  if (!fs::exists(dbPathFinal)) {
    std::cerr << "⚠️ RocksDB directory missing. Creating: " << dbPathFinal
              << "\n";
    fs::create_directories(dbPathFinal);
  }

  rocksdb::Options options;
  options.create_if_missing = true;
  rocksdb::Status status = rocksdb::DB::Open(options, dbPathFinal, &db);
  if (!status.ok()) {
    std::cerr << "❌ [ERROR] Failed to open RocksDB: " << status.ToString()
              << std::endl;
    exit(1);
  }

  // Load blockchain data
  std::cout << "[DEBUG] Attempting to load blockchain from DB...\n";
  loadFromDB();

  // Load existing vesting info (if previously applied)
  loadVestingInfoFromDB();

  // ✅ Check if vesting marker exists
  std::string vestingMarker;
  status =
      db->Get(rocksdb::ReadOptions(), "vesting_initialized", &vestingMarker);

  if (!status.ok()) {
    std::cout << "⏳ Applying vesting schedule for early supporters...\n";
    applyVestingSchedule(); // Call new function
    db->Put(rocksdb::WriteOptions(), "vesting_initialized", "true");
    std::cout << "✅ Vesting applied & marker set.\n";
  } else {
    std::cout << "✅ Vesting already initialized. Skipping.\n";
  }
}

// ✅ **Destructor: Close RocksDB**
Blockchain::~Blockchain() {
  if (db) {
    delete db;
    db = nullptr; // ✅ Prevent potential use-after-free issues
  }
}

// ✅ **Validate a Transaction**
bool Blockchain::isTransactionValid(const Transaction &tx) const {
  std::string sender = tx.getSender();

  // Skip validation for mining rewards
  if (sender == "System")
    return true;

  // 🔒 Vesting Check
  auto it = vestingMap.find(sender);
  if (it != vestingMap.end()) {
    double locked = it->second.lockedAmount;
    uint64_t unlockTime = it->second.unlockTimestamp;

    if (std::time(nullptr) < unlockTime) {
      double senderBalance = getBalance(sender);
      if (senderBalance - locked < tx.getAmount()) {
        std::cerr << "⛔ [VESTING] Transaction rejected! Locked balance in "
                     "effect for: "
                  << sender << "\n";
        return false;
      } else {
        std::cout << "🔓 [VESTING] Allowed: Unlocked balance sufficient for "
                     "transaction.\n";
      }
    } else {
      std::cout << "✅ [VESTING] Vesting period expired. No restriction.\n";
    }
  }

  // Normalize sender name (replace spaces, avoid case issues)
  std::string normalizedSender = sender;
  std::replace(normalizedSender.begin(), normalizedSender.end(), ' ', '_');

  // Locate public key
  std::string publicKeyPath = getPublicKeyPath(normalizedSender);
  if (!fs::exists(publicKeyPath)) {
    std::cerr << "❌ Public key missing for sender: " << sender << "\n";
    return false;
  }

  // Verify signature
  std::cout << "🔍 [DEBUG] Transaction Hash for Verification: "
            << tx.calculateHash() << "\n";
  std::cout << "[DEBUG] Public key path used: " << publicKeyPath << "\n";
  if (!Crypto::verifyMessage(publicKeyPath, tx.getSignature(),
                             tx.calculateHash())) {
    std::cerr
        << "❌ [ERROR] Signature verification failed for transaction from: "
        << sender << "\n";
    return false;
  }

  std::cout << "✅ [DEBUG] Transaction signature verified successfully for: "
            << sender << "\n";
  return true;
}

// ✅ Create the Genesis Block Properly
Block Blockchain::createGenesisBlock() {
  std::vector<Transaction> transactions;
  Block genesis(0, "00000000000000000000000000000000", transactions, "System",
                difficulty, std::time(nullptr), 0);
  std::cout << "[DEBUG] Genesis Block created with hash: " << genesis.getHash()
            << std::endl;
  std::string keyPath = getPrivateKeyPath("System");
  std::cout << "[DEBUG] Genesis private key path: " << keyPath << std::endl;
  if (!fs::exists(keyPath)) {
    std::cerr
        << "⚠️ [WARNING] Private key missing for Genesis Block! Generating...\n";
    Crypto::generateKeysForUser("System");
  }

  std::string signature = Crypto::signMessage(genesis.getHash(), keyPath, true);
  if (signature.empty()) {
    std::cerr << "❌ [ERROR] Genesis block signature failed!" << std::endl;
    exit(1);
  }
  genesis.setSignature(signature);

  return genesis;
}

// ✅ Adds block, applies smart burn, and broadcasts to peers
bool Blockchain::addBlock(const Block &newBlock) {
  if (chain.empty()) {
    if (!newBlock.isGenesisBlock()) {
      std::cerr << "❌ First block must be Genesis Block!\n";
      return false;
    }
  } else {
    Block lastBlock = chain.back();
    if (!newBlock.isValid(lastBlock.getHash())) {
      std::cerr << "❌ Invalid block detected. Rejecting!\n";
      return false;
    }
  }

  // Push block with proof (proof is already in block)
  chain.push_back(newBlock);

  // Remove included transactions
  for (const auto &tx : newBlock.getTransactions()) {
    pendingTransactions.erase(
        std::remove_if(pendingTransactions.begin(), pendingTransactions.end(),
                       [&tx](const Transaction &pendingTx) {
                         return pendingTx.getHash() == tx.getHash();
                       }),
        pendingTransactions.end());
  }

  saveToDB();
  saveTransactionsToDB();

  std::cout << "✅ Block added to blockchain. Pending TXs updated.\n";
  return true;
}

// ✅ Adjust mining difficulty dynamically
void Blockchain::adjustDifficulty() {
  if (chain.size() < 10)
    return;

  const int difficultyWindow = 10;
  std::vector<uint64_t> timestamps;

  for (int i = chain.size() - difficultyWindow; i < chain.size(); i++) {
    timestamps.push_back(chain[i].getTimestamp());
  }

  if (timestamps.size() < 2)
    return;

  double avgBlockTime =
      (timestamps.back() - timestamps.front()) / (difficultyWindow - 1);
  double targetTime = 30.0; // Target block time

  if (avgBlockTime < targetTime * 0.8) {
    difficulty = std::min(difficulty + 1, 8);
    std::cout << "⚡ Increasing difficulty to: " << difficulty << "\n";
  } else if (avgBlockTime > targetTime * 1.2) {
    difficulty = std::max(difficulty - 1, 4);
    std::cout << "🐢 Reducing difficulty to: " << difficulty << "\n";
  } else {
    std::cout << "✅ Difficulty remains the same: " << difficulty << "\n";
  }
}

// ✅ **Singleton Instance**
Blockchain &Blockchain::getInstance(unsigned short port,
                                    const std::string &dbPath) {
  static Blockchain instance(port, dbPath);
  return instance;
}

//
const std::vector<Block> &Blockchain::getChain() const { return chain; }
//
void Blockchain::loadFromPeers() {
  if (!network) {
    std::cerr << "❌ Error: Network module is not initialized!" << std::endl;
    return;
  }

  std::vector<std::string> peers = network->getPeers();
  if (peers.empty()) {
    std::cerr << "⚠️ No peers available for sync!" << std::endl;
    return;
  }

  for (const auto &peer : peers) {
    network->requestBlockchainSync(peer); // ✅ Pass argument
  }
}

//
void Blockchain::clearPendingTransactions() {
  pendingTransactions.clear(); // ✅ No mutex lock needed

  // ✅ Ensure transactions file is emptied
  std::ofstream outFile("data/transactions.json", std::ios::trunc);
  if (outFile.is_open()) {
    outFile << "[]"; // Empty JSON array
    outFile.close();
  } else {
    std::cerr << "❌ [ERROR] Failed to open transactions.json for clearing!"
              << std::endl;
  }

  std::cout << "🚨 Cleared all pending transactions after mining.\n";
}

// ✅ Helper function to check if a file exists
bool fileExists(const std::string &filename) {
  struct stat buffer;
  return (stat(filename.c_str(), &buffer) == 0);
}
//
void Blockchain::mergeWith(const Blockchain &other) {
  if (other.chain.size() <= chain.size()) {
    std::cerr << "⚠️ Merge skipped: Local chain is longer or equal.\n";
    return;
  }

  std::vector<Block> newChain;
  for (const auto &block : other.chain) {
    if (newChain.empty() || block.isValid(newChain.back().getHash())) {
      newChain.push_back(block);
    } else {
      std::cerr
          << "❌ [ERROR] Invalid block detected during merge! Skipping...\n";
    }
  }

  if (newChain.size() > chain.size()) {
    std::cout << "✅ Replacing current blockchain with a longer valid chain!\n";
    chain = newChain;
    saveToDB();
  } else {
    std::cerr << "⚠️ New chain was not longer. Keeping existing chain.\n";
  }
}

// ✅ **Check for pending transactions**
bool Blockchain::hasPendingTransactions() const {
  return !pendingTransactions.empty(); // ✅ Only checks, does not modify!
}
//
void Blockchain::setPendingTransactions(
    const std::vector<Transaction> &transactions) {
  pendingTransactions = transactions;
}

// ✅ Mine pending transactions and dynamically adjust difficulty
Block Blockchain::minePendingTransactions(const std::string &minerDilithiumKey,
                                          const std::string &minerFalconKey) {
  std::lock_guard<std::mutex> lock(blockchainMutex);

  if (pendingTransactions.empty()) {
    std::cerr << "⚠️ No transactions to mine!\n";
    return Block();
  }

  std::vector<Transaction> validTransactions;
  for (auto tx : pendingTransactions) {
    if (isTransactionValid(tx)) {
      double originalAmount = tx.getAmount();
      std::string sender = tx.getSender();
      std::string recipient = tx.getRecipient();
      double amount = originalAmount;
      std::string signatureDilithium = tx.getSignatureDilithium();
      std::string signatureFalcon = tx.getSignatureFalcon();
      std::time_t timestamp = tx.getTimestamp();

      // Fees & burns
      double feeRate = 0.001;
      double feeAmount = originalAmount * feeRate;
      double burnFee = feeAmount / 2;
      double devFundFee = feeAmount / 2;
      double adjustedAmount = originalAmount - feeAmount;

      tx.applyBurn(sender, adjustedAmount, getRecentTransactionCount());
      double smartBurnAmount = tx.getAmount() - adjustedAmount;
      totalBurnedSupply += smartBurnAmount;

      Transaction burnedTx(sender, recipient, adjustedAmount,
                           signatureDilithium, signatureFalcon, timestamp);
      validTransactions.push_back(burnedTx);

      Transaction devFeeTx(sender, DEV_FUND_ADDRESS, devFundFee,
                           signatureDilithium, signatureFalcon, timestamp);
      validTransactions.push_back(devFeeTx);

      totalBurnedSupply += burnFee;

      std::cout << "💸 Fee: " << feeAmount << " (Burned: " << burnFee
                << ", Dev Fund: " << devFundFee << ")\n";
      std::cout << "🔥 Smart Burn Applied: " << smartBurnAmount
                << " AlynCoin\n";
    }
  }

  Transaction rewardTx("System", minerDilithiumKey, BASE_BLOCK_REWARD, "", "",
                       std::time(nullptr));
  validTransactions.push_back(rewardTx);

  Block lastBlock = getLatestBlock();
  Block newBlock(chain.size(), lastBlock.getHash(), validTransactions,
                 minerDilithiumKey, difficulty, std::time(nullptr),
                 std::time(nullptr));
  newBlock.mineBlock(difficulty);

  // Sign block
  std::vector<unsigned char> hashBytes(newBlock.getHash().begin(),
                                       newBlock.getHash().end());

  std::vector<unsigned char> dilithiumSigVec =
      Crypto::signWithDilithium(hashBytes, Crypto::fromHex(minerDilithiumKey));
  std::vector<unsigned char> falconSigVec =
      Crypto::signWithFalcon(hashBytes, Crypto::fromHex(minerFalconKey));

  newBlock.setDilithiumSignature(Crypto::toHex(dilithiumSigVec));
  newBlock.setFalconSignature(Crypto::toHex(falconSigVec));

  addBlock(newBlock);
  clearPendingTransactions();
  saveToDB();

  std::cout << "✅ Block mined. Total burned: " << totalBurnedSupply
            << " AlynCoin\n";

  return newBlock;
}

// ✅ **Sync Blockchain**
void Blockchain::syncChain(const Json::Value &jsonData) {
  std::lock_guard<std::mutex> lock(blockchainMutex);

  std::vector<Block> newChain;
  for (const auto &blockJson : jsonData["chain"]) {
    alyncoin::BlockProto protoBlock;
    if (!protoBlock.ParseFromString(blockJson.asString())) {
      std::cerr << "❌ [ERROR] Failed to parse Protobuf block data!\n";
      return;
    }

    Block newBlock;
    if (!newBlock.deserializeFromProtobuf(protoBlock)) {
      std::cerr << "❌ [ERROR] Invalid block format during deserialization!\n";
      return;
    }

    newChain.push_back(newBlock);
  }

  if (newChain.size() > chain.size()) {
    chain = newChain;
    saveToDB();
    std::cout
        << "✅ Blockchain successfully synchronized with a longer chain!\n";
  } else {
    std::cerr
        << "⚠️ [WARNING] Received chain was not longer. No changes applied.\n";
  }
}

// ✅ **Start Mining**
void Blockchain::startMining(const std::string &minerDilithiumKey,
                             const std::string &minerFalconKey) {
  if (isMining.load()) {
    std::cout << "⚠️ Mining is already running!" << std::endl;
    return;
  }

  isMining.store(true);

  std::thread([this, minerDilithiumKey, minerFalconKey]() {
    while (isMining.load()) {
      reloadBlockchainState();
      if (pendingTransactions.empty()) {
        std::cout << "⏳ No transactions to mine. Waiting...\n";
        std::this_thread::sleep_for(std::chrono::seconds(5));
        continue;
      }

      Block newBlock =
          minePendingTransactions(minerDilithiumKey, minerFalconKey);
      addBlock(newBlock);
      std::this_thread::sleep_for(std::chrono::seconds(2));
    }
  }).detach();
}

// ✅ **Stop Mining**
void Blockchain::stopMining() {
  isMining.store(false);
  std::cout << "⛔ Mining stopped!\n";
}

// ✅ **Reload Blockchain State**
void Blockchain::reloadBlockchainState() {
  loadFromDB();
  loadTransactionsFromDB();
  std::cout << "✅ Blockchain and transactions reloaded!\n";
}

// ✅ **Print Blockchain**
void Blockchain::printBlockchain() const {
  std::unordered_set<std::string> seenHashes; // Track already printed blocks

  std::cout << "=== AlynCoin Blockchain ===\n";
  for (const Block &block : chain) {
    if (seenHashes.find(block.getHash()) != seenHashes.end()) {
      continue; // Skip duplicate blocks
    }
    seenHashes.insert(block.getHash());

    std::cout << "Block Index: " << block.getIndex() << "\n";
    std::cout << "Hash: " << block.getHash() << "\n";
    std::cout << "Previous Hash: " << block.getPreviousHash() << "\n";
    std::cout << "Miner: " << block.getMinerAddress() << "\n";
    std::cout << "Nonce: " << block.getNonce() << "\n";
    std::cout << "Timestamp: " << block.getTimestamp() << "\n";
    std::cout << "Transactions: " << block.getTransactions().size() << "\n";
    std::cout << "---------------------------\n";
  }
  std::cout << "===========================\n";
  std::cout << "🔥 Total Burned Supply: " << totalBurnedSupply
            << " AlynCoin 🔥\n";
}

// ✅ **Show pending transactions (before they are mined)**
void Blockchain::printPendingTransactions() {
  if (!pendingTransactions.empty()) {
    std::cout << "✅ Pending transactions available.\n";
  } else {
    std::cout << "✅ No pending transactions.\n";
  }
}

// ✅ **Add a new transaction**
void Blockchain::addTransaction(const Transaction &tx) {
  std::lock_guard<std::mutex> lock(blockchainMutex);

  // Lowercase sender name
  std::string senderLower = tx.getSender();
  std::transform(senderLower.begin(), senderLower.end(), senderLower.begin(),
                 ::tolower);

  // Check if public key exists, generate if missing
  std::string keyDir = KEY_DIR;
  std::string publicKeyPath = keyDir + senderLower + "_public.pem";

  if (!fs::exists(publicKeyPath)) {
    std::cerr << "⚠️ [WARNING] Public key missing for " << senderLower
              << "! Generating now...\n";
    Crypto::generateKeysForUser(senderLower);
    std::this_thread::sleep_for(
        std::chrono::milliseconds(500)); // Small wait to ensure key generation
  }

  // Update balances
  balances[tx.getSender()] -= tx.getAmount();
  balances[tx.getRecipient()] += tx.getAmount();

  // Monitor Dev Fund activity
  if (tx.getSender() == DEV_FUND_ADDRESS ||
      tx.getRecipient() == DEV_FUND_ADDRESS) {
    devFundLastActivity = std::time(nullptr);
    checkDevFundActivity();
  }

  // Add to pending transactions
  pendingTransactions.push_back(tx);
  saveTransactionsToDB();

  std::cout << "✅ Transaction added. Pending count: "
            << pendingTransactions.size() << "\n";
}

// ✅ **Get balance of a public key**
double Blockchain::getBalance(const std::string &publicKey) const {
  auto it = balances.find(publicKey);
  if (it != balances.end()) {
    return it->second;
  }
  return 0.0;
}

// ✅ **Save Transactions to RocksDB**
void Blockchain::saveTransactionsToDB() {
  if (!db) {
    std::cerr << "❌ Database not initialized. Cannot save transactions.\n";
    return;
  }

  std::cout << "📦 [DEBUG] Saving pending transactions to RocksDB...\n";

  std::thread([this]() {
    rocksdb::WriteBatch batch;
    Json::StreamWriterBuilder writer;

    {
      std::lock_guard<std::mutex> lock(
          blockchainMutex); // ✅ Lock only inside scope
      for (size_t i = 0; i < pendingTransactions.size(); i++) {
        Json::Value txJson = pendingTransactions[i].toJSON();
        txJson["timestamp"] = static_cast<Json::Int64>(
            pendingTransactions[i].getTimestamp()); // Ensure timestamp
        std::string txData = Json::writeString(writer, txJson);
        batch.Put("tx_" + std::to_string(i), txData);
      }
    } // ✅ Mutex automatically unlocks

    rocksdb::Status status = db->Write(rocksdb::WriteOptions(), &batch);
    if (!status.ok()) {
      std::cerr << "❌ Error saving transactions to RocksDB: "
                << status.ToString() << std::endl;
    } else {
      std::cout << "✅ Transactions successfully saved to RocksDB.\n";
    }
  }).detach(); // ✅ Run asynchronously, without blocking the mutex
}

// ✅ **Save Blockchain to RocksDB using Protobuf**
bool Blockchain::saveToDB() {
  std::cout << "[DEBUG] Attempting to save blockchain to DB..." << std::endl;
  if (!db) {
    std::cerr << "❌ RocksDB not initialized!\n";
    return false;
  }

  alyncoin::BlockchainProto blockchainProto;
  for (const auto &block : chain) {
    alyncoin::BlockProto *blockProto = blockchainProto.add_blocks();
    *blockProto = block.toProtobuf();
  }

  std::string serializedData;
  blockchainProto.SerializeToString(&serializedData);

  rocksdb::Status status =
      db->Put(rocksdb::WriteOptions(), "blockchain", serializedData);

  if (!status.ok()) {
    std::cerr << "❌ [ERROR] Failed to save blockchain: " << status.ToString()
              << "\n";
    return false;
  }

  // ✅ Save total burned supply
  db->Put(rocksdb::WriteOptions(), "burned_supply",
          std::to_string(totalBurnedSupply));

  std::cout << "✅ Blockchain saved successfully!\n";
  saveVestingInfoToDB();
  return true;
}

// ✅ **Load Blockchain from RocksDB using Protobuf**
bool Blockchain::loadFromDB() {
  std::cout << "[DEBUG] Attempting to load blockchain from DB..." << std::endl;
  if (!db) {
    std::cerr << "❌ RocksDB not initialized!\n";
    return false;
  }

  std::string serializedBlockchain;
  rocksdb::Status status =
      db->Get(rocksdb::ReadOptions(), "blockchain", &serializedBlockchain);
  if (!status.ok()) {
    std::cerr << "⚠️ RocksDB blockchain not found. Creating Genesis Block.\n";
    chain.push_back(createGenesisBlock());
    saveToDB(); // Save genesis block

    // 🔥 Apply vesting ONLY after fresh genesis block:
    std::cout << "⏳ Applying vesting schedule for early supporters...\n";
    applyVestingSchedule();
    db->Put(rocksdb::WriteOptions(), "vesting_initialized", "true");
    std::cout << "✅ Vesting applied & marker set.\n";

    return true;
  }

  alyncoin::BlockchainProto blockchainProto;
  if (!blockchainProto.ParseFromString(serializedBlockchain)) {
    std::cerr << "❌ [ERROR] Failed to parse blockchain Protobuf data!\n";
    return false;
  }

  chain.clear();
  for (const auto &blockProto : blockchainProto.blocks()) {
    chain.push_back(Block::fromProto(blockProto));
  }

  // ✅ Load total burned supply
  std::string burnedSupplyStr;
  status = db->Get(rocksdb::ReadOptions(), "burned_supply", &burnedSupplyStr);
  if (status.ok()) {
    totalBurnedSupply = std::stod(burnedSupplyStr);
  } else {
    totalBurnedSupply = 0.0;
  }

  // 🟢 Check vesting marker:
  std::string vestingFlag;
  status = db->Get(rocksdb::ReadOptions(), "vesting_initialized", &vestingFlag);
  if (status.ok() && vestingFlag == "true") {
    std::cout << "⏩ Vesting already initialized. Skipping...\n";
  } else {
    std::cout << "⏳ Applying vesting schedule for early supporters...\n";
    applyVestingSchedule();
    db->Put(rocksdb::WriteOptions(), "vesting_initialized", "true");
    std::cout << "✅ Vesting applied & marker set.\n";
  }

  std::cout << "✅ Blockchain loaded successfully!\n";
  return true;
}

// ✅ Save vesting data to DB
void Blockchain::saveVestingInfoToDB() {
  if (!db)
    return;

  rocksdb::WriteBatch batch;
  for (const auto &pair : vestingMap) {
    std::string key = "vesting_" + pair.first;
    Json::Value vestingJson;
    vestingJson["lockedAmount"] = pair.second.lockedAmount;
    vestingJson["unlockTimestamp"] =
        static_cast<Json::UInt64>(pair.second.unlockTimestamp);

    Json::StreamWriterBuilder writer;
    std::string data = Json::writeString(writer, vestingJson);
    batch.Put(key, data);
  }
  db->Write(rocksdb::WriteOptions(), &batch);
}

// ✅ Load vesting data from DB
void Blockchain::loadVestingInfoFromDB() {
  if (!db)
    return;

  rocksdb::Iterator *it = db->NewIterator(rocksdb::ReadOptions());
  for (it->SeekToFirst(); it->Valid(); it->Next()) {
    std::string key = it->key().ToString();
    if (key.find("vesting_") != 0)
      continue;

    std::string address = key.substr(8);
    Json::Value vestingJson;
    Json::CharReaderBuilder reader;
    std::istringstream stream(it->value().ToString());
    std::string errs;

    if (Json::parseFromStream(reader, stream, &vestingJson, &errs)) {
      if (vestingJson.isObject() && vestingJson.isMember("lockedAmount") &&
          vestingJson.isMember("unlockTimestamp")) {
        VestingInfo info;
        info.lockedAmount = vestingJson["lockedAmount"].asDouble();
        info.unlockTimestamp = vestingJson["unlockTimestamp"].asUInt64();
        vestingMap[address] = info;
      } else {
        std::cerr << "⚠️ Invalid vesting JSON for address: " << address
                  << ", skipping.\n";
      }
    } else {
      std::cerr << "⚠️ JSON parsing error for vesting key: " << key
                << " Error: " << errs << "\n";
    }
  }
  delete it;
}

// vesting
void Blockchain::addVestingForEarlySupporter(const std::string &address,
                                             double initialAmount) {
  VestingInfo info;
  info.lockedAmount = initialAmount * 0.5; // 50% locked
  info.unlockTimestamp =
      std::time(nullptr) + (6 * 30 * 24 * 60 * 60); // 6 months
  vestingMap[address] = info;
  saveVestingInfoToDB();
}
//
void Blockchain::applyVestingSchedule() {
  for (int i = 1; i <= 10000; ++i) {
    std::string supporterAddress = "supporter" + std::to_string(i);
    double initialAmount = 10000.0; // Keep same allocation logic
    addVestingForEarlySupporter(supporterAddress, initialAmount);
  }
  saveVestingInfoToDB();
}

// ✅ Serialize Blockchain to Protobuf
bool Blockchain::serializeBlockchain(std::string &outData) const {
  alyncoin::BlockchainProto blockchainProto;

  for (const auto &block : chain) {
    auto *protoBlock = blockchainProto.add_blocks();
    block.serializeToProtobuf(*protoBlock);
  }

  for (const auto &tx : pendingTransactions) {
    auto *txProto = blockchainProto.add_pending_transactions();
    tx.serializeToProtobuf(*txProto);
  }

  blockchainProto.set_difficulty(difficulty);
  blockchainProto.set_block_reward(blockReward);

  if (!blockchainProto.SerializeToString(&outData)) {
    std::cerr
        << "❌ [ERROR] Failed to serialize blockchain to Protobuf format!\n";
    return false;
  }

  std::cout << "📡 [DEBUG] Serialized Blockchain Data (Size: " << outData.size()
            << " bytes)\n";
  std::cout << "📡 [DEBUG] First 100 Bytes of Serialized Data: "
            << outData.substr(0, 100) << "\n";

  return true;
}

// ✅ Deserialize Blockchain from Protobuf
bool Blockchain::deserializeBlockchain(const std::string &data) {
  std::lock_guard<std::mutex> lock(blockchainMutex);

  if (data.empty()) {
    std::cerr << "❌ [ERROR] Received empty Protobuf blockchain data!\n";
    return false;
  }

  std::cout << "📡 [DEBUG] Received Blockchain Data (Size: " << data.size()
            << " bytes)\n";
  std::cout << "📡 [DEBUG] First 100 bytes: " << data.substr(0, 100) << "...\n";

  alyncoin::BlockchainProto protoChain;
  if (!protoChain.ParseFromString(data)) {
    std::cerr << "❌ [ERROR] Failed to parse Protobuf blockchain data!\n";
    std::cerr << "🔍 [DEBUG] Raw data length: " << data.size() << " bytes\n";
    return false;
  }

  chain.clear();
  pendingTransactions.clear();

  difficulty = protoChain.difficulty();
  blockReward = protoChain.block_reward();

  for (const auto &blockProto : protoChain.blocks()) {
    Block block;
    if (!block.deserializeFromProtobuf(blockProto)) {
      std::cerr << "❌ [ERROR] Invalid block format during deserialization!\n";
      return false;
    }
    chain.push_back(block);
  }

  for (const auto &txProto : protoChain.pending_transactions()) {
    Transaction tx;
    if (!tx.deserializeFromProtobuf(txProto)) {
      std::cerr << "❌ [ERROR] Invalid transaction format!\n";
      return false;
    }
    pendingTransactions.push_back(tx);
  }

  std::cout << "✅ Blockchain deserialization completed! Blocks: "
            << chain.size()
            << ", Pending Transactions: " << pendingTransactions.size()
            << std::endl;
  return true;
}
//
// ✅ Convert Protobuf back to Block
// ✅ Correct version already in blockchain.cpp:
void Blockchain::fromProto(const alyncoin::BlockchainProto &protoChain) {
  std::lock_guard<std::mutex> lock(blockchainMutex);
  chain.clear();

  for (const auto &protoBlock : protoChain.blocks()) {
    Block newBlock;

    newBlock.setIndex(protoBlock.index());
    newBlock.setTimestamp(protoBlock.timestamp());
    newBlock.setPreviousHash(protoBlock.previous_hash());
    newBlock.setHash(protoBlock.hash());
    newBlock.setMinerAddress(protoBlock.miner_address());
    newBlock.setNonce(protoBlock.nonce());
    newBlock.setDifficulty(protoBlock.difficulty());

    if (!protoBlock.block_signature().empty())
      newBlock.setSignature(protoBlock.block_signature());

    if (!protoBlock.keccak_hash().empty())
      newBlock.setKeccakHash(protoBlock.keccak_hash());

    std::vector<Transaction> transactions;
    for (const auto &protoTx : protoBlock.transactions()) {
      Transaction tx;
      if (tx.deserializeFromProtobuf(protoTx)) {
        transactions.push_back(tx);
      } else {
        std::cerr << "❌ [ERROR] Invalid transaction skipped in block index "
                  << newBlock.getIndex() << "\n";
      }
    }
    newBlock.setTransactions(transactions);

    chain.push_back(newBlock);
  }
}

// ✅ **Replace blockchain if a longer valid chain is found**
void Blockchain::replaceChain(const std::vector<Block> &newChain) {
  std::lock_guard<std::mutex> lock(blockchainMutex);
  if (newChain.size() > chain.size()) {
    chain = newChain;
    saveToDB();
    std::cout << "✅ Blockchain replaced with a longer valid chain!"
              << std::endl;
  }
}
//
bool Blockchain::isValidNewBlock(const Block &newBlock) {
  if (chain.empty())
    return false;

  Block lastBlock = getLatestBlock();

  if (newBlock.getPreviousHash() != lastBlock.getHash()) {
    std::cerr << "❌ Previous Hash Mismatch!\n";
    return false;
  }

  if (!newBlock.hasValidProofOfWork()) {
    std::cerr << "❌ Invalid PoW Detected!\n";
    return false;
  }

  // zk-STARK Verification
  std::string txRoot = newBlock.getTransactionsHash();
  if (!WinterfellStark::verifyProof(newBlock.getZkProof(), newBlock.getHash(),
                                    newBlock.getPreviousHash(), txRoot)) {
    std::cerr << "❌ zk-STARK Proof Verification Failed!\n";
    return false;
  }

  std::string computedKeccak = Crypto::keccak256(newBlock.getHash());
  if (computedKeccak != newBlock.keccakHash) {
    std::cerr << "❌ Keccak Validation Failed!\n";
    return false;
  }

  // Correct block message for signature verification
  std::string blockMessage = newBlock.getHash() + newBlock.getPreviousHash() +
                             newBlock.getTransactionsHash() +
                             std::to_string(newBlock.getTimestamp());

  std::string minerAddress = newBlock.getMinerAddress();

  if (!Crypto::verifyDilithiumSignature(
          blockMessage, newBlock.getDilithiumSignature(), minerAddress)) {
    std::cerr << "❌ Dilithium Block Signature Verification Failed!\n";
    return false;
  }

  if (!Crypto::verifyFalconSignature(
          blockMessage, newBlock.getFalconSignature(), minerAddress)) {
    std::cerr << "❌ Falcon Block Signature Verification Failed!\n";
    return false;
  }

  std::cout << "✅ New Block Passed Validation.\n";
  return true;
}

// ✅ **Load Transactions from RocksDB**
void Blockchain::loadTransactionsFromDB() {
  if (!db) {
    std::cerr
        << "❌ [ERROR] Database not initialized. Cannot load transactions.\n";
    return;
  }

  std::cout << "🔄 [INFO] Loading transactions from RocksDB...\n";

  rocksdb::Iterator *it = db->NewIterator(rocksdb::ReadOptions());
  pendingTransactions.clear();

  for (it->Seek("tx_"); it->Valid() && it->key().starts_with("tx_");
       it->Next()) {
    Json::Value txJson;
    Json::CharReaderBuilder reader;
    std::string errs;
    std::istringstream stream(it->value().ToString());

    // ✅ Prevent excessively large transactions
    if (stream.str().size() > 2048) {
      std::cerr << "⚠️ [WARNING] Transaction too large. Possible corruption. "
                   "Skipping...\n";
      continue;
    }

    if (!Json::parseFromStream(reader, stream, &txJson, &errs)) {
      std::cerr << "❌ [ERROR] Failed to parse transaction JSON for key: "
                << it->key().ToString() << "! Skipping transaction.\n";
      continue;
    }

    try {
      Transaction tx = Transaction::fromJSON(txJson);
      if (tx.getAmount() > 0 && !tx.getSender().empty() &&
          !tx.getRecipient().empty()) {
        pendingTransactions.push_back(tx);
      } else {
        std::cerr << "⚠️ [WARNING] Invalid transaction detected! Skipping.\n";
      }
    } catch (const std::exception &e) {
      std::cerr << "❌ [ERROR] Exception while parsing transaction: "
                << e.what() << std::endl;
    }
  }

  delete it;
  std::cout << "✅ Transactions loaded successfully! Pending count: "
            << pendingTransactions.size() << std::endl;
}

//
std::string Blockchain::signTransaction(const std::string &privateKeyPath,
                                        const std::string &message) {
  if (!std::filesystem::exists(privateKeyPath)) {
    std::cerr << "❌ Error: Private key not found at " << privateKeyPath
              << ".\n";

    // ✅ Auto-generate missing private key
    std::cout << "⚠️ Generating missing private key: " << privateKeyPath << "\n";
    Crypto::generateKeysForUser("alice"); // Ensure key generation

    std::this_thread::sleep_for(
        std::chrono::milliseconds(500)); // ✅ Ensure key is ready
  }

  return Crypto::signMessage(privateKeyPath, message, false);
}

// ✅ **Create Block Properly Before Mining**
Block Blockchain::createBlock(const std::string &minerDilithiumKey,
                              const std::string &minerFalconKey) {
  std::vector<Transaction> validTransactions;
  for (const auto &tx : pendingTransactions) {
    if (tx.isValid(tx.getSenderPublicKeyDilithium(),
                   tx.getSenderPublicKeyFalcon())) {
      validTransactions.push_back(tx);
    }
  }

  // ✅ Fix: Generate miner address based on miner keys
  std::string minerAddress = Crypto::generateMinerAddress();

  Block newBlock(chain.size(), getLatestBlock().getHash(), validTransactions,
                 minerAddress, difficulty, std::time(nullptr),
                 0 // Nonce start at 0
  );
  return newBlock;
}

// ✅ **Mine Block with BLAKE3 + Keccak**
Block Blockchain::mineBlock(const std::string &minerDilithiumKey,
                            const std::string &minerFalconKey) {
  std::lock_guard<std::mutex> lock(blockchainMutex);

  if (pendingTransactions.empty()) {
    std::cout << "⚠️ No pending transactions to mine!\n";
    return Block(); // Return empty block
  }

  // Validate transactions
  std::vector<Transaction> validTransactions;
  for (const auto &tx : pendingTransactions) {
    if (tx.isValid(tx.getSenderPublicKeyDilithium(),
                   tx.getSenderPublicKeyFalcon())) {
      validTransactions.push_back(tx);
      std::cout << "✅ Valid transaction from: " << tx.getSender() << "\n";
    } else {
      std::cout << "❌ Invalid transaction from: " << tx.getSender()
                << "! Skipping...\n";
    }
  }

  if (validTransactions.empty()) {
    std::cout << "⚠️ No valid transactions to mine!\n";
    return Block();
  }

  int difficulty = LWMA_calculate_difficulty(*this);
  Block latest = getLatestBlock();

  // Prepare block
  Block newBlock(latest.getIndex() + 1, latest.getHash(), validTransactions,
                 minerDilithiumKey, // Set miner keys properly
                 difficulty, std::time(nullptr), 0);

  std::cout << "⏳ Mining block...\n";
  newBlock.mineBlock(difficulty);

  if (newBlock.isValid(latest.getHash())) {
    chain.push_back(newBlock);
    pendingTransactions.clear();
    saveToDB();
    saveTransactionsToDB();
    std::cout << "✅ Block mined and added to chain!\n";
    return newBlock;
  } else {
    std::cout << "❌ Mined block failed validation!\n";
    return Block();
  }
}

// ✅ **Fix Smart Burn Mechanism**
int Blockchain::getRecentTransactionCount() {
  if (recentTransactionCounts.empty())
    return 0;

  int sum = 0;
  for (int count : recentTransactionCounts)
    sum += count;

  return sum / recentTransactionCounts.size();
}

// ✅ **Update Transaction History for Dynamic Burn Rate**
void Blockchain::updateTransactionHistory(int newTxCount) {
  if (recentTransactionCounts.size() > 100) {
    recentTransactionCounts.pop_front(); // Keep last 100 blocks' data
  }
  recentTransactionCounts.push_back(newTxCount);
}
// ✅ Get latest block
const Block &Blockchain::getLatestBlock() const {
  if (chain.empty()) {
    std::cerr << "❌ Error: Blockchain is empty! Returning a default block."
              << std::endl;
    static Block defaultBlock(0, "00000000000000000000000000000000", {},
                              "System", 4,
                              std::time(nullptr), // ✅ Added timestamp
                              0                   // ✅ Added nonce
    );
    return defaultBlock;
  }
  return chain.back();
}

// ✅ Get pending transactions
std::vector<Transaction> Blockchain::getPendingTransactions() const {
  return pendingTransactions;
}
//
Json::Value Blockchain::toJSON() const {
  Json::Value json;
  json["chain"] = Json::arrayValue; // Create an array for blocks

  for (const Block &block :
       chain) { // Assuming `chain` is the vector storing blocks
    json["chain"].append(block.toJSON()); // Call `Block::toJSON()`
  }

  json["pending_transactions"] = Json::arrayValue;
  for (const Transaction &tx :
       pendingTransactions) { // Assuming `pendingTransactions` exists
    json["pending_transactions"].append(
        tx.toJSON()); // Call `Transaction::toJSON()`
  }

  json["difficulty"] = difficulty;
  json["block_reward"] = blockReward;

  return json;
}
//
void Blockchain::fromJSON(const Json::Value &json) {
  chain.clear();
  for (const auto &blockJson : json["blocks"]) {
    Block block;
    block.fromJSON(blockJson);
    chain.push_back(block);
  }

  difficulty = json["difficulty"].asUInt();
  blockReward = json["blockReward"].asDouble();
}

// ✅ Update blockchain from JSON
void Blockchain::updateFromJSON(const std::string &jsonData) {
  try {
    Json::Value root;
    Json::CharReaderBuilder reader;
    std::istringstream stream(jsonData);
    std::string errs;

    if (!Json::parseFromStream(reader, stream, &root, &errs)) {
      std::cerr << "❌ Error parsing blockchain JSON: " << errs << std::endl;
      return;
    }

    chain.clear();
    for (const auto &blockJson : root["chain"]) {
      Block newBlock;
      newBlock = Block::fromJSON(blockJson);
      chain.push_back(newBlock);
    }

    saveToDB();
    std::cout << "✅ Blockchain updated from JSON!\n";
  } catch (const std::exception &e) {
    std::cerr << "❌ Exception in updateFromJSON: " << e.what() << std::endl;
  }
}
// Store recent transaction counts
std::deque<int> recentTransactionCounts;

// checkDevFundActivity
void Blockchain::checkDevFundActivity() {
  std::time_t currentTime = std::time(nullptr);
  double monthsInactive =
      difftime(currentTime, devFundLastActivity) / (30 * 24 * 60 * 60);

  if (monthsInactive >= 24.0 && !votingSession.isActive) {
    std::cout << "🔔 Dev Fund has been inactive for 24 months. Initiating "
                 "voting session.\n";
    initiateVotingSession();
  } else if (monthsInactive >= 18.0 && monthsInactive < 24.0) {
    std::cout << "⚠️ Dev Fund has been inactive for 18 months. Consider "
                 "initiating voting session.\n";
  }
}
// distributeDevFund
void Blockchain::distributeDevFund() {
  double totalSupply = getTotalSupply();
  std::map<std::string, double> holderShares;

  // Calculate each holder's share
  for (const auto &[address, balance] : balances) {
    if (address != DEV_FUND_ADDRESS) {
      holderShares[address] = balance / totalSupply;
    }
  }

  // Distribute 50% of Dev Fund to holders
  double distributionAmount = devFundBalance * 0.5;
  for (const auto &[address, share] : holderShares) {
    double amount = distributionAmount * share;
    balances[address] += amount;
    std::cout << "Distributed " << amount << " to " << address << "\n";
  }

  // Reserve the remaining 50%
  double reserveAmount = devFundBalance * 0.5;
  balances["Reserve"] += reserveAmount;
  std::cout << "Reserved " << reserveAmount << " to Reserve\n";

  // Reset Dev Fund balance
  devFundBalance = 0.0;
}
// initiateVotingSession
void Blockchain::initiateVotingSession() {
  votingSession.startTime = std::time(nullptr);
  votingSession.isActive = true;
  votingSession.votes.clear();
  std::cout << "Voting session initiated to elect a new Dev Fund holder.\n";
}
// tallyVotes
void Blockchain::tallyVotes() {
  if (!votingSession.isActive) {
    std::cout << "No active voting session.\n";
    return;
  }

  std::string newDevFundAddress;
  double highestVotes = 0.0;

  for (const auto &[address, totalWeight] : votingSession.votes) {
    if (totalWeight > highestVotes) {
      highestVotes = totalWeight;
      newDevFundAddress = address;
    }
  }

  if (!newDevFundAddress.empty()) {
    std::cout << "New Dev Fund holder elected: " << newDevFundAddress << "\n";
    // Transfer Dev Fund balance to the new holder
    balances[newDevFundAddress] += devFundBalance;
    devFundBalance = 0.0;
  } else {
    std::cout << "No votes cast. Dev Fund holder remains unchanged.\n";
  }

  votingSession.isActive = false;
}
// getTotalSupply
double Blockchain::getTotalSupply() const {
  double total = 0.0;
  for (const auto &[address, balance] : balances) {
    total += balance;
  }
  return total;
}

// castVote
bool Blockchain::castVote(const std::string &voterAddress,
                          const std::string &candidateAddress) {
  std::cout << "Casting vote from: " << voterAddress
            << " to: " << candidateAddress << "\n";
  return true;
}
//
void Blockchain::addRollupBlock(const RollupBlock &newRollupBlock) {
  if (isRollupBlockValid(newRollupBlock)) {
    rollupChain.push_back(newRollupBlock);
    std::cout << "[INFO] Rollup block added successfully. Index: "
              << newRollupBlock.getIndex() << std::endl;
  } else {
    std::cerr << "[ERROR] Invalid rollup block. Index: "
              << newRollupBlock.getIndex() << std::endl;
  }
}
//
bool Blockchain::isRollupBlockValid(const RollupBlock &newRollupBlock) const {
  // Validate index continuity
  if (newRollupBlock.getIndex() != rollupChain.size()) {
    std::cerr << "[ERROR] Rollup block index mismatch. Expected: "
              << rollupChain.size() << ", Got: " << newRollupBlock.getIndex()
              << std::endl;
    return false;
  }

  // Validate previous hash
  if (!rollupChain.empty() &&
      newRollupBlock.getPreviousHash() != rollupChain.back().getHash()) {
    std::cerr << "[ERROR] Rollup block previous hash mismatch." << std::endl;
    return false;
  }

  // Validate rollup proof
  std::vector<std::string> txHashes;
  for (const auto &tx : newRollupBlock.getTransactions()) {
    txHashes.push_back(tx.getHash());
  }

  if (!ProofVerifier::verifyRollupProof(newRollupBlock.getRollupProof(),
                                        txHashes,
                                        newRollupBlock.getMerkleRoot())) {
    std::cerr << "[ERROR] Rollup block proof verification failed." << std::endl;
    return false;
  }

  // Additional validations as necessary

  return true;
}

// --- Save Rollup Chain ---
void Blockchain::saveRollupChain() const {
  std::ofstream out(ROLLUP_CHAIN_FILE, std::ios::binary);
  if (!out) {
    std::cerr << "❌ Failed to save rollup chain!\n";
    return;
  }
  for (const auto &block : rollupChain) {
    out.write(reinterpret_cast<const char *>(&block), sizeof(RollupBlock));
  }
  std::cout << "💾 Rollup chain saved successfully.\n";
}

// --- Load Rollup Chain ---
void Blockchain::loadRollupChain() {
  std::ifstream in(ROLLUP_CHAIN_FILE, std::ios::binary);
  if (!in) {
    std::cerr << "⚠️ Rollup chain file not found.\n";
    return;
  }
  RollupBlock block;
  while (in.read(reinterpret_cast<char *>(&block), sizeof(RollupBlock))) {
    rollupChain.push_back(block);
  }
  std::cout << "✅ Rollup chain loaded. Blocks: " << rollupChain.size() << "\n";
}

// --- Merge Rollup Chain ---
void Blockchain::mergeRollupChain(const std::vector<RollupBlock> &newChain) {
  for (const auto &block : newChain) {
    rollupChain.push_back(block);
  }
  std::cout << "🔗 Rollup chain merged. Total blocks: " << rollupChain.size()
            << "\n";
}

// --- Aggregate Off-Chain Transactions ---
std::vector<Transaction>
Blockchain::aggregateOffChainTxs(const std::vector<Transaction> &offChainTxs) {
  std::unordered_map<std::string, double> balanceMap;

  // Sum up amounts per recipient
  for (const auto &tx : offChainTxs) {
    balanceMap[tx.getRecipient()] += tx.getAmount();
  }

  // Create a single transaction per recipient
  std::vector<Transaction> aggregatedTxs;
  for (const auto &[recipient, amount] : balanceMap) {
    Transaction aggTx("Aggregator", recipient, amount, "", "",
                      std::time(nullptr));
    aggregatedTxs.push_back(aggTx);
  }

  return aggregatedTxs;
}
// --- Create Rollup Block ---
Block Blockchain::createRollupBlock(
    const std::vector<Transaction> &offChainTxs) {
  std::vector<Transaction> aggregatedTxs = aggregateOffChainTxs(offChainTxs);

  Block rollupBlock(chain.size(), getLatestBlock().getHash(), aggregatedTxs,
                    "System", difficulty, std::time(nullptr),
                    std::time(nullptr));
  rollupBlock.mineBlock(difficulty);

  std::vector<unsigned char> hashBytes(rollupBlock.getHash().begin(),
                                       rollupBlock.getHash().end());

  std::vector<unsigned char> dummyKey(
      32, 0x01); // Dummy key for demonstration, replace as needed.

  std::vector<unsigned char> rollupSigDilithium =
      Crypto::signWithDilithium(hashBytes, dummyKey);
  std::vector<unsigned char> rollupSigFalcon =
      Crypto::signWithFalcon(hashBytes, dummyKey);

  rollupBlock.setDilithiumSignature(Crypto::toHex(rollupSigDilithium));
  rollupBlock.setFalconSignature(Crypto::toHex(rollupSigFalcon));

  return rollupBlock;
}
