// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: block_protos.proto
// Protobuf C++ Version: 5.29.3

#include "block_protos.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace alyncoin {

inline constexpr BlockProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        transactions_{},
        l2_transactions_{},
        previous_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        miner_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        block_signature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        keccak_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        zk_stark_proof_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dilithium_signature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        falcon_signature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        public_key_dilithium_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        public_key_falcon_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        state_root_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        tx_merkle_root_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        epoch_root_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        epoch_proof_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        accumulated_work_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        index_{0},
        difficulty_{0},
        nonce_{::uint64_t{0u}},
        timestamp_{::uint64_t{0u}},
        reward_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BlockProto::BlockProto(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BlockProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockProtoDefaultTypeInternal() {}
  union {
    BlockProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockProtoDefaultTypeInternal _BlockProto_default_instance_;
}  // namespace alyncoin
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_block_5fprotos_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_block_5fprotos_2eproto = nullptr;
const ::uint32_t
    TableStruct_block_5fprotos_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.index_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.previous_hash_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.transactions_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.hash_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.miner_address_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.nonce_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.difficulty_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.block_signature_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.keccak_hash_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.zk_stark_proof_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.dilithium_signature_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.falcon_signature_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.public_key_dilithium_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.public_key_falcon_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.state_root_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.tx_merkle_root_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.reward_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.l2_transactions_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.epoch_root_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.epoch_proof_),
        PROTOBUF_FIELD_OFFSET(::alyncoin::BlockProto, _impl_.accumulated_work_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 30, -1, sizeof(::alyncoin::BlockProto)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::alyncoin::_BlockProto_default_instance_._instance,
};
const char descriptor_table_protodef_block_5fprotos_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\022block_protos.proto\022\010alyncoin\032\030transact"
    "ion_protos.proto\"\271\004\n\nBlockProto\022\r\n\005index"
    "\030\001 \001(\005\022\025\n\rprevious_hash\030\002 \001(\t\0220\n\014transac"
    "tions\030\003 \003(\0132\032.alyncoin.TransactionProto\022"
    "\014\n\004hash\030\004 \001(\t\022\025\n\rminer_address\030\005 \001(\t\022\r\n\005"
    "nonce\030\006 \001(\004\022\021\n\ttimestamp\030\007 \001(\004\022\022\n\ndiffic"
    "ulty\030\010 \001(\005\022\027\n\017block_signature\030\t \001(\014\022\023\n\013k"
    "eccak_hash\030\n \001(\t\022\026\n\016zk_stark_proof\030\013 \001(\014"
    "\022\033\n\023dilithium_signature\030\014 \001(\014\022\030\n\020falcon_"
    "signature\030\r \001(\014\022\034\n\024public_key_dilithium\030"
    "\016 \001(\014\022\031\n\021public_key_falcon\030\017 \001(\014\022\022\n\nstat"
    "e_root\030\020 \001(\t\022\026\n\016tx_merkle_root\030\021 \001(\t\022\023\n\006"
    "reward\030\022 \001(\001H\000\210\001\001\0223\n\017l2_transactions\030\023 \003"
    "(\0132\032.alyncoin.TransactionProto\022\022\n\nepoch_"
    "root\030\024 \001(\t\022\023\n\013epoch_proof\030\025 \001(\014\022\030\n\020accum"
    "ulated_work\030\026 \001(\tB\t\n\007_rewardb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_block_5fprotos_2eproto_deps[1] =
    {
        &::descriptor_table_transaction_5fprotos_2eproto,
};
static ::absl::once_flag descriptor_table_block_5fprotos_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_block_5fprotos_2eproto = {
    false,
    false,
    636,
    descriptor_table_protodef_block_5fprotos_2eproto,
    "block_protos.proto",
    &descriptor_table_block_5fprotos_2eproto_once,
    descriptor_table_block_5fprotos_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_block_5fprotos_2eproto::offsets,
    file_level_enum_descriptors_block_5fprotos_2eproto,
    file_level_service_descriptors_block_5fprotos_2eproto,
};
namespace alyncoin {
// ===================================================================

class BlockProto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<BlockProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BlockProto, _impl_._has_bits_);
};

void BlockProto::clear_transactions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transactions_.Clear();
}
void BlockProto::clear_l2_transactions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.l2_transactions_.Clear();
}
BlockProto::BlockProto(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:alyncoin.BlockProto)
}
inline PROTOBUF_NDEBUG_INLINE BlockProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::alyncoin::BlockProto& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        transactions_{visibility, arena, from.transactions_},
        l2_transactions_{visibility, arena, from.l2_transactions_},
        previous_hash_(arena, from.previous_hash_),
        hash_(arena, from.hash_),
        miner_address_(arena, from.miner_address_),
        block_signature_(arena, from.block_signature_),
        keccak_hash_(arena, from.keccak_hash_),
        zk_stark_proof_(arena, from.zk_stark_proof_),
        dilithium_signature_(arena, from.dilithium_signature_),
        falcon_signature_(arena, from.falcon_signature_),
        public_key_dilithium_(arena, from.public_key_dilithium_),
        public_key_falcon_(arena, from.public_key_falcon_),
        state_root_(arena, from.state_root_),
        tx_merkle_root_(arena, from.tx_merkle_root_),
        epoch_root_(arena, from.epoch_root_),
        epoch_proof_(arena, from.epoch_proof_),
        accumulated_work_(arena, from.accumulated_work_) {}

BlockProto::BlockProto(
    ::google::protobuf::Arena* arena,
    const BlockProto& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BlockProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, index_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, index_),
           offsetof(Impl_, reward_) -
               offsetof(Impl_, index_) +
               sizeof(Impl_::reward_));

  // @@protoc_insertion_point(copy_constructor:alyncoin.BlockProto)
}
inline PROTOBUF_NDEBUG_INLINE BlockProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        transactions_{visibility, arena},
        l2_transactions_{visibility, arena},
        previous_hash_(arena),
        hash_(arena),
        miner_address_(arena),
        block_signature_(arena),
        keccak_hash_(arena),
        zk_stark_proof_(arena),
        dilithium_signature_(arena),
        falcon_signature_(arena),
        public_key_dilithium_(arena),
        public_key_falcon_(arena),
        state_root_(arena),
        tx_merkle_root_(arena),
        epoch_root_(arena),
        epoch_proof_(arena),
        accumulated_work_(arena) {}

inline void BlockProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, index_),
           0,
           offsetof(Impl_, reward_) -
               offsetof(Impl_, index_) +
               sizeof(Impl_::reward_));
}
BlockProto::~BlockProto() {
  // @@protoc_insertion_point(destructor:alyncoin.BlockProto)
  SharedDtor(*this);
}
inline void BlockProto::SharedDtor(MessageLite& self) {
  BlockProto& this_ = static_cast<BlockProto&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.previous_hash_.Destroy();
  this_._impl_.hash_.Destroy();
  this_._impl_.miner_address_.Destroy();
  this_._impl_.block_signature_.Destroy();
  this_._impl_.keccak_hash_.Destroy();
  this_._impl_.zk_stark_proof_.Destroy();
  this_._impl_.dilithium_signature_.Destroy();
  this_._impl_.falcon_signature_.Destroy();
  this_._impl_.public_key_dilithium_.Destroy();
  this_._impl_.public_key_falcon_.Destroy();
  this_._impl_.state_root_.Destroy();
  this_._impl_.tx_merkle_root_.Destroy();
  this_._impl_.epoch_root_.Destroy();
  this_._impl_.epoch_proof_.Destroy();
  this_._impl_.accumulated_work_.Destroy();
  this_._impl_.~Impl_();
}

inline void* BlockProto::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) BlockProto(arena);
}
constexpr auto BlockProto::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.transactions_) +
          decltype(BlockProto::_impl_.transactions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.l2_transactions_) +
          decltype(BlockProto::_impl_.l2_transactions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(BlockProto), alignof(BlockProto), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&BlockProto::PlacementNew_,
                                 sizeof(BlockProto),
                                 alignof(BlockProto));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull BlockProto::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_BlockProto_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &BlockProto::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<BlockProto>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &BlockProto::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<BlockProto>(), &BlockProto::ByteSizeLong,
            &BlockProto::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(BlockProto, _impl_._cached_size_),
        false,
    },
    &BlockProto::kDescriptorMethods,
    &descriptor_table_block_5fprotos_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* BlockProto::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 22, 2, 135, 2> BlockProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BlockProto, _impl_._has_bits_),
    0, // no _extensions_
    22, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4290772992,  // skipmap
    offsetof(decltype(_table_), field_entries),
    22,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::alyncoin::BlockProto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 index = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BlockProto, _impl_.index_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.index_)}},
    // string previous_hash = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.previous_hash_)}},
    // repeated .alyncoin.TransactionProto transactions = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.transactions_)}},
    // string hash = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.hash_)}},
    // string miner_address = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.miner_address_)}},
    // uint64 nonce = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BlockProto, _impl_.nonce_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.nonce_)}},
    // uint64 timestamp = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BlockProto, _impl_.timestamp_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.timestamp_)}},
    // int32 difficulty = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BlockProto, _impl_.difficulty_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.difficulty_)}},
    // bytes block_signature = 9;
    {::_pbi::TcParser::FastBS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.block_signature_)}},
    // string keccak_hash = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.keccak_hash_)}},
    // bytes zk_stark_proof = 11;
    {::_pbi::TcParser::FastBS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.zk_stark_proof_)}},
    // bytes dilithium_signature = 12;
    {::_pbi::TcParser::FastBS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.dilithium_signature_)}},
    // bytes falcon_signature = 13;
    {::_pbi::TcParser::FastBS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.falcon_signature_)}},
    // bytes public_key_dilithium = 14;
    {::_pbi::TcParser::FastBS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.public_key_dilithium_)}},
    // bytes public_key_falcon = 15;
    {::_pbi::TcParser::FastBS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.public_key_falcon_)}},
    // string state_root = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.state_root_)}},
    // string tx_merkle_root = 17;
    {::_pbi::TcParser::FastUS2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.tx_merkle_root_)}},
    // optional double reward = 18;
    {::_pbi::TcParser::FastF64S2,
     {401, 0, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.reward_)}},
    // repeated .alyncoin.TransactionProto l2_transactions = 19;
    {::_pbi::TcParser::FastMtR2,
     {410, 63, 1, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.l2_transactions_)}},
    // string epoch_root = 20;
    {::_pbi::TcParser::FastUS2,
     {418, 63, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.epoch_root_)}},
    // bytes epoch_proof = 21;
    {::_pbi::TcParser::FastBS2,
     {426, 63, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.epoch_proof_)}},
    // string accumulated_work = 22;
    {::_pbi::TcParser::FastUS2,
     {434, 63, 0, PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.accumulated_work_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 index = 1;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.index_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string previous_hash = 2;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.previous_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .alyncoin.TransactionProto transactions = 3;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.transactions_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string hash = 4;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string miner_address = 5;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.miner_address_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 nonce = 6;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.nonce_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 timestamp = 7;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.timestamp_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // int32 difficulty = 8;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.difficulty_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bytes block_signature = 9;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.block_signature_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string keccak_hash = 10;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.keccak_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes zk_stark_proof = 11;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.zk_stark_proof_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes dilithium_signature = 12;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.dilithium_signature_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes falcon_signature = 13;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.falcon_signature_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes public_key_dilithium = 14;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.public_key_dilithium_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes public_key_falcon = 15;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.public_key_falcon_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string state_root = 16;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.state_root_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string tx_merkle_root = 17;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.tx_merkle_root_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional double reward = 18;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.reward_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // repeated .alyncoin.TransactionProto l2_transactions = 19;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.l2_transactions_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string epoch_root = 20;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.epoch_root_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes epoch_proof = 21;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.epoch_proof_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string accumulated_work = 22;
    {PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.accumulated_work_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::alyncoin::TransactionProto>()},
    {::_pbi::TcParser::GetTable<::alyncoin::TransactionProto>()},
  }}, {{
    "\23\0\15\0\4\15\0\0\0\0\13\0\0\0\0\0\12\16\0\0\12\0\20\0"
    "alyncoin.BlockProto"
    "previous_hash"
    "hash"
    "miner_address"
    "keccak_hash"
    "state_root"
    "tx_merkle_root"
    "epoch_root"
    "accumulated_work"
  }},
};

PROTOBUF_NOINLINE void BlockProto::Clear() {
// @@protoc_insertion_point(message_clear_start:alyncoin.BlockProto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transactions_.Clear();
  _impl_.l2_transactions_.Clear();
  _impl_.previous_hash_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _impl_.miner_address_.ClearToEmpty();
  _impl_.block_signature_.ClearToEmpty();
  _impl_.keccak_hash_.ClearToEmpty();
  _impl_.zk_stark_proof_.ClearToEmpty();
  _impl_.dilithium_signature_.ClearToEmpty();
  _impl_.falcon_signature_.ClearToEmpty();
  _impl_.public_key_dilithium_.ClearToEmpty();
  _impl_.public_key_falcon_.ClearToEmpty();
  _impl_.state_root_.ClearToEmpty();
  _impl_.tx_merkle_root_.ClearToEmpty();
  _impl_.epoch_root_.ClearToEmpty();
  _impl_.epoch_proof_.ClearToEmpty();
  _impl_.accumulated_work_.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.timestamp_));
  _impl_.reward_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BlockProto::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BlockProto& this_ = static_cast<const BlockProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BlockProto::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BlockProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:alyncoin.BlockProto)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 index = 1;
          if (this_._internal_index() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_index(), target);
          }

          // string previous_hash = 2;
          if (!this_._internal_previous_hash().empty()) {
            const std::string& _s = this_._internal_previous_hash();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "alyncoin.BlockProto.previous_hash");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // repeated .alyncoin.TransactionProto transactions = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_transactions_size());
               i < n; i++) {
            const auto& repfield = this_._internal_transactions().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // string hash = 4;
          if (!this_._internal_hash().empty()) {
            const std::string& _s = this_._internal_hash();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "alyncoin.BlockProto.hash");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string miner_address = 5;
          if (!this_._internal_miner_address().empty()) {
            const std::string& _s = this_._internal_miner_address();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "alyncoin.BlockProto.miner_address");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // uint64 nonce = 6;
          if (this_._internal_nonce() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                6, this_._internal_nonce(), target);
          }

          // uint64 timestamp = 7;
          if (this_._internal_timestamp() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                7, this_._internal_timestamp(), target);
          }

          // int32 difficulty = 8;
          if (this_._internal_difficulty() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_difficulty(), target);
          }

          // bytes block_signature = 9;
          if (!this_._internal_block_signature().empty()) {
            const std::string& _s = this_._internal_block_signature();
            target = stream->WriteBytesMaybeAliased(9, _s, target);
          }

          // string keccak_hash = 10;
          if (!this_._internal_keccak_hash().empty()) {
            const std::string& _s = this_._internal_keccak_hash();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "alyncoin.BlockProto.keccak_hash");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          // bytes zk_stark_proof = 11;
          if (!this_._internal_zk_stark_proof().empty()) {
            const std::string& _s = this_._internal_zk_stark_proof();
            target = stream->WriteBytesMaybeAliased(11, _s, target);
          }

          // bytes dilithium_signature = 12;
          if (!this_._internal_dilithium_signature().empty()) {
            const std::string& _s = this_._internal_dilithium_signature();
            target = stream->WriteBytesMaybeAliased(12, _s, target);
          }

          // bytes falcon_signature = 13;
          if (!this_._internal_falcon_signature().empty()) {
            const std::string& _s = this_._internal_falcon_signature();
            target = stream->WriteBytesMaybeAliased(13, _s, target);
          }

          // bytes public_key_dilithium = 14;
          if (!this_._internal_public_key_dilithium().empty()) {
            const std::string& _s = this_._internal_public_key_dilithium();
            target = stream->WriteBytesMaybeAliased(14, _s, target);
          }

          // bytes public_key_falcon = 15;
          if (!this_._internal_public_key_falcon().empty()) {
            const std::string& _s = this_._internal_public_key_falcon();
            target = stream->WriteBytesMaybeAliased(15, _s, target);
          }

          // string state_root = 16;
          if (!this_._internal_state_root().empty()) {
            const std::string& _s = this_._internal_state_root();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "alyncoin.BlockProto.state_root");
            target = stream->WriteStringMaybeAliased(16, _s, target);
          }

          // string tx_merkle_root = 17;
          if (!this_._internal_tx_merkle_root().empty()) {
            const std::string& _s = this_._internal_tx_merkle_root();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "alyncoin.BlockProto.tx_merkle_root");
            target = stream->WriteStringMaybeAliased(17, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional double reward = 18;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                18, this_._internal_reward(), target);
          }

          // repeated .alyncoin.TransactionProto l2_transactions = 19;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_l2_transactions_size());
               i < n; i++) {
            const auto& repfield = this_._internal_l2_transactions().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    19, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // string epoch_root = 20;
          if (!this_._internal_epoch_root().empty()) {
            const std::string& _s = this_._internal_epoch_root();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "alyncoin.BlockProto.epoch_root");
            target = stream->WriteStringMaybeAliased(20, _s, target);
          }

          // bytes epoch_proof = 21;
          if (!this_._internal_epoch_proof().empty()) {
            const std::string& _s = this_._internal_epoch_proof();
            target = stream->WriteBytesMaybeAliased(21, _s, target);
          }

          // string accumulated_work = 22;
          if (!this_._internal_accumulated_work().empty()) {
            const std::string& _s = this_._internal_accumulated_work();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "alyncoin.BlockProto.accumulated_work");
            target = stream->WriteStringMaybeAliased(22, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:alyncoin.BlockProto)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BlockProto::ByteSizeLong(const MessageLite& base) {
          const BlockProto& this_ = static_cast<const BlockProto&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BlockProto::ByteSizeLong() const {
          const BlockProto& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:alyncoin.BlockProto)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .alyncoin.TransactionProto transactions = 3;
            {
              total_size += 1UL * this_._internal_transactions_size();
              for (const auto& msg : this_._internal_transactions()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .alyncoin.TransactionProto l2_transactions = 19;
            {
              total_size += 2UL * this_._internal_l2_transactions_size();
              for (const auto& msg : this_._internal_l2_transactions()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string previous_hash = 2;
            if (!this_._internal_previous_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_previous_hash());
            }
            // string hash = 4;
            if (!this_._internal_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_hash());
            }
            // string miner_address = 5;
            if (!this_._internal_miner_address().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_miner_address());
            }
            // bytes block_signature = 9;
            if (!this_._internal_block_signature().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_block_signature());
            }
            // string keccak_hash = 10;
            if (!this_._internal_keccak_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_keccak_hash());
            }
            // bytes zk_stark_proof = 11;
            if (!this_._internal_zk_stark_proof().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_zk_stark_proof());
            }
            // bytes dilithium_signature = 12;
            if (!this_._internal_dilithium_signature().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_dilithium_signature());
            }
            // bytes falcon_signature = 13;
            if (!this_._internal_falcon_signature().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_falcon_signature());
            }
            // bytes public_key_dilithium = 14;
            if (!this_._internal_public_key_dilithium().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_public_key_dilithium());
            }
            // bytes public_key_falcon = 15;
            if (!this_._internal_public_key_falcon().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_public_key_falcon());
            }
            // string state_root = 16;
            if (!this_._internal_state_root().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_state_root());
            }
            // string tx_merkle_root = 17;
            if (!this_._internal_tx_merkle_root().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_tx_merkle_root());
            }
            // string epoch_root = 20;
            if (!this_._internal_epoch_root().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_epoch_root());
            }
            // bytes epoch_proof = 21;
            if (!this_._internal_epoch_proof().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_epoch_proof());
            }
            // string accumulated_work = 22;
            if (!this_._internal_accumulated_work().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_accumulated_work());
            }
            // int32 index = 1;
            if (this_._internal_index() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_index());
            }
            // int32 difficulty = 8;
            if (this_._internal_difficulty() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_difficulty());
            }
            // uint64 nonce = 6;
            if (this_._internal_nonce() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_nonce());
            }
            // uint64 timestamp = 7;
            if (this_._internal_timestamp() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_timestamp());
            }
          }
           {
            // optional double reward = 18;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 10;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BlockProto::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BlockProto*>(&to_msg);
  auto& from = static_cast<const BlockProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:alyncoin.BlockProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_transactions()->MergeFrom(
      from._internal_transactions());
  _this->_internal_mutable_l2_transactions()->MergeFrom(
      from._internal_l2_transactions());
  if (!from._internal_previous_hash().empty()) {
    _this->_internal_set_previous_hash(from._internal_previous_hash());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_miner_address().empty()) {
    _this->_internal_set_miner_address(from._internal_miner_address());
  }
  if (!from._internal_block_signature().empty()) {
    _this->_internal_set_block_signature(from._internal_block_signature());
  }
  if (!from._internal_keccak_hash().empty()) {
    _this->_internal_set_keccak_hash(from._internal_keccak_hash());
  }
  if (!from._internal_zk_stark_proof().empty()) {
    _this->_internal_set_zk_stark_proof(from._internal_zk_stark_proof());
  }
  if (!from._internal_dilithium_signature().empty()) {
    _this->_internal_set_dilithium_signature(from._internal_dilithium_signature());
  }
  if (!from._internal_falcon_signature().empty()) {
    _this->_internal_set_falcon_signature(from._internal_falcon_signature());
  }
  if (!from._internal_public_key_dilithium().empty()) {
    _this->_internal_set_public_key_dilithium(from._internal_public_key_dilithium());
  }
  if (!from._internal_public_key_falcon().empty()) {
    _this->_internal_set_public_key_falcon(from._internal_public_key_falcon());
  }
  if (!from._internal_state_root().empty()) {
    _this->_internal_set_state_root(from._internal_state_root());
  }
  if (!from._internal_tx_merkle_root().empty()) {
    _this->_internal_set_tx_merkle_root(from._internal_tx_merkle_root());
  }
  if (!from._internal_epoch_root().empty()) {
    _this->_internal_set_epoch_root(from._internal_epoch_root());
  }
  if (!from._internal_epoch_proof().empty()) {
    _this->_internal_set_epoch_proof(from._internal_epoch_proof());
  }
  if (!from._internal_accumulated_work().empty()) {
    _this->_internal_set_accumulated_work(from._internal_accumulated_work());
  }
  if (from._internal_index() != 0) {
    _this->_impl_.index_ = from._impl_.index_;
  }
  if (from._internal_difficulty() != 0) {
    _this->_impl_.difficulty_ = from._impl_.difficulty_;
  }
  if (from._internal_nonce() != 0) {
    _this->_impl_.nonce_ = from._impl_.nonce_;
  }
  if (from._internal_timestamp() != 0) {
    _this->_impl_.timestamp_ = from._impl_.timestamp_;
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.reward_ = from._impl_.reward_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BlockProto::CopyFrom(const BlockProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alyncoin.BlockProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BlockProto::InternalSwap(BlockProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.transactions_.InternalSwap(&other->_impl_.transactions_);
  _impl_.l2_transactions_.InternalSwap(&other->_impl_.l2_transactions_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.previous_hash_, &other->_impl_.previous_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, &other->_impl_.hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.miner_address_, &other->_impl_.miner_address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.block_signature_, &other->_impl_.block_signature_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.keccak_hash_, &other->_impl_.keccak_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zk_stark_proof_, &other->_impl_.zk_stark_proof_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dilithium_signature_, &other->_impl_.dilithium_signature_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.falcon_signature_, &other->_impl_.falcon_signature_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.public_key_dilithium_, &other->_impl_.public_key_dilithium_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.public_key_falcon_, &other->_impl_.public_key_falcon_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.state_root_, &other->_impl_.state_root_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tx_merkle_root_, &other->_impl_.tx_merkle_root_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.epoch_root_, &other->_impl_.epoch_root_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.epoch_proof_, &other->_impl_.epoch_proof_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.accumulated_work_, &other->_impl_.accumulated_work_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.reward_)
      + sizeof(BlockProto::_impl_.reward_)
      - PROTOBUF_FIELD_OFFSET(BlockProto, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::google::protobuf::Metadata BlockProto::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace alyncoin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_block_5fprotos_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
