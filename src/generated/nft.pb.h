// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: nft.proto
// Protobuf C++ Version: 5.29.3

#ifndef nft_2eproto_2epb_2eh
#define nft_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_nft_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_nft_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_nft_2eproto;
class NFTProto;
struct NFTProtoDefaultTypeInternal;
extern NFTProtoDefaultTypeInternal _NFTProto_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class NFTProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NFTProto) */ {
 public:
  inline NFTProto() : NFTProto(nullptr) {}
  ~NFTProto() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NFTProto* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NFTProto));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NFTProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline NFTProto(const NFTProto& from) : NFTProto(nullptr, from) {}
  inline NFTProto(NFTProto&& from) noexcept
      : NFTProto(nullptr, std::move(from)) {}
  inline NFTProto& operator=(const NFTProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NFTProto& operator=(NFTProto&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NFTProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const NFTProto* internal_default_instance() {
    return reinterpret_cast<const NFTProto*>(
        &_NFTProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(NFTProto& a, NFTProto& b) { a.Swap(&b); }
  inline void Swap(NFTProto* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NFTProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NFTProto* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NFTProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NFTProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NFTProto& from) { NFTProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NFTProto* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "NFTProto"; }

 protected:
  explicit NFTProto(::google::protobuf::Arena* arena);
  NFTProto(::google::protobuf::Arena* arena, const NFTProto& from);
  NFTProto(::google::protobuf::Arena* arena, NFTProto&& from) noexcept
      : NFTProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTransferLedgerFieldNumber = 13,
    kBundledAssetsFieldNumber = 15,
    kPreviousVersionsFieldNumber = 20,
    kIdFieldNumber = 1,
    kCreatorFieldNumber = 2,
    kOwnerFieldNumber = 3,
    kMetadataFieldNumber = 4,
    kImageHashFieldNumber = 5,
    kSignatureFieldNumber = 7,
    kZkStarkProofFieldNumber = 8,
    kVersionFieldNumber = 9,
    kNftTypeFieldNumber = 10,
    kProofHashFieldNumber = 11,
    kExtraDataFieldNumber = 12,
    kCreatorIdentityFieldNumber = 14,
    kDilithiumSignatureFieldNumber = 16,
    kEncryptedMetadataFieldNumber = 19,
    kTimestampFieldNumber = 6,
    kExpiryTimestampFieldNumber = 17,
    kRevokedFieldNumber = 18,
  };
  // repeated string transferLedger = 13;
  int transferledger_size() const;
  private:
  int _internal_transferledger_size() const;

  public:
  void clear_transferledger() ;
  const std::string& transferledger(int index) const;
  std::string* mutable_transferledger(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transferledger(int index, Arg_&& value, Args_... args);
  std::string* add_transferledger();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_transferledger(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& transferledger() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_transferledger();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_transferledger() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_transferledger();

  public:
  // repeated string bundled_assets = 15;
  int bundled_assets_size() const;
  private:
  int _internal_bundled_assets_size() const;

  public:
  void clear_bundled_assets() ;
  const std::string& bundled_assets(int index) const;
  std::string* mutable_bundled_assets(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bundled_assets(int index, Arg_&& value, Args_... args);
  std::string* add_bundled_assets();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_bundled_assets(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& bundled_assets() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_bundled_assets();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_bundled_assets() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_bundled_assets();

  public:
  // repeated string previous_versions = 20;
  int previous_versions_size() const;
  private:
  int _internal_previous_versions_size() const;

  public:
  void clear_previous_versions() ;
  const std::string& previous_versions(int index) const;
  std::string* mutable_previous_versions(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_previous_versions(int index, Arg_&& value, Args_... args);
  std::string* add_previous_versions();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_previous_versions(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& previous_versions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_previous_versions();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_previous_versions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_previous_versions();

  public:
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string creator = 2;
  void clear_creator() ;
  const std::string& creator() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_creator(Arg_&& arg, Args_... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* value);

  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(
      const std::string& value);
  std::string* _internal_mutable_creator();

  public:
  // string owner = 3;
  void clear_owner() ;
  const std::string& owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* value);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // string metadata = 4;
  void clear_metadata() ;
  const std::string& metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* value);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // string image_hash = 5;
  void clear_image_hash() ;
  const std::string& image_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image_hash(Arg_&& arg, Args_... args);
  std::string* mutable_image_hash();
  PROTOBUF_NODISCARD std::string* release_image_hash();
  void set_allocated_image_hash(std::string* value);

  private:
  const std::string& _internal_image_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_hash(
      const std::string& value);
  std::string* _internal_mutable_image_hash();

  public:
  // bytes signature = 7;
  void clear_signature() ;
  const std::string& signature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* value);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // bytes zk_stark_proof = 8;
  void clear_zk_stark_proof() ;
  const std::string& zk_stark_proof() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zk_stark_proof(Arg_&& arg, Args_... args);
  std::string* mutable_zk_stark_proof();
  PROTOBUF_NODISCARD std::string* release_zk_stark_proof();
  void set_allocated_zk_stark_proof(std::string* value);

  private:
  const std::string& _internal_zk_stark_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zk_stark_proof(
      const std::string& value);
  std::string* _internal_mutable_zk_stark_proof();

  public:
  // string version = 9;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string nft_type = 10;
  void clear_nft_type() ;
  const std::string& nft_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nft_type(Arg_&& arg, Args_... args);
  std::string* mutable_nft_type();
  PROTOBUF_NODISCARD std::string* release_nft_type();
  void set_allocated_nft_type(std::string* value);

  private:
  const std::string& _internal_nft_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nft_type(
      const std::string& value);
  std::string* _internal_mutable_nft_type();

  public:
  // string proof_hash = 11;
  void clear_proof_hash() ;
  const std::string& proof_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proof_hash(Arg_&& arg, Args_... args);
  std::string* mutable_proof_hash();
  PROTOBUF_NODISCARD std::string* release_proof_hash();
  void set_allocated_proof_hash(std::string* value);

  private:
  const std::string& _internal_proof_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof_hash(
      const std::string& value);
  std::string* _internal_mutable_proof_hash();

  public:
  // string extra_data = 12;
  void clear_extra_data() ;
  const std::string& extra_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_extra_data(Arg_&& arg, Args_... args);
  std::string* mutable_extra_data();
  PROTOBUF_NODISCARD std::string* release_extra_data();
  void set_allocated_extra_data(std::string* value);

  private:
  const std::string& _internal_extra_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra_data(
      const std::string& value);
  std::string* _internal_mutable_extra_data();

  public:
  // string creator_identity = 14;
  void clear_creator_identity() ;
  const std::string& creator_identity() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_creator_identity(Arg_&& arg, Args_... args);
  std::string* mutable_creator_identity();
  PROTOBUF_NODISCARD std::string* release_creator_identity();
  void set_allocated_creator_identity(std::string* value);

  private:
  const std::string& _internal_creator_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator_identity(
      const std::string& value);
  std::string* _internal_mutable_creator_identity();

  public:
  // bytes dilithium_signature = 16;
  void clear_dilithium_signature() ;
  const std::string& dilithium_signature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dilithium_signature(Arg_&& arg, Args_... args);
  std::string* mutable_dilithium_signature();
  PROTOBUF_NODISCARD std::string* release_dilithium_signature();
  void set_allocated_dilithium_signature(std::string* value);

  private:
  const std::string& _internal_dilithium_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dilithium_signature(
      const std::string& value);
  std::string* _internal_mutable_dilithium_signature();

  public:
  // string encrypted_metadata = 19;
  void clear_encrypted_metadata() ;
  const std::string& encrypted_metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_encrypted_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_encrypted_metadata();
  PROTOBUF_NODISCARD std::string* release_encrypted_metadata();
  void set_allocated_encrypted_metadata(std::string* value);

  private:
  const std::string& _internal_encrypted_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_metadata(
      const std::string& value);
  std::string* _internal_mutable_encrypted_metadata();

  public:
  // int64 timestamp = 6;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // int64 expiry_timestamp = 17;
  void clear_expiry_timestamp() ;
  ::int64_t expiry_timestamp() const;
  void set_expiry_timestamp(::int64_t value);

  private:
  ::int64_t _internal_expiry_timestamp() const;
  void _internal_set_expiry_timestamp(::int64_t value);

  public:
  // bool revoked = 18;
  void clear_revoked() ;
  bool revoked() const;
  void set_revoked(bool value);

  private:
  bool _internal_revoked() const;
  void _internal_set_revoked(bool value);

  public:
  // @@protoc_insertion_point(class_scope:NFTProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 20, 0,
      179, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NFTProto& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> transferledger_;
    ::google::protobuf::RepeatedPtrField<std::string> bundled_assets_;
    ::google::protobuf::RepeatedPtrField<std::string> previous_versions_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr creator_;
    ::google::protobuf::internal::ArenaStringPtr owner_;
    ::google::protobuf::internal::ArenaStringPtr metadata_;
    ::google::protobuf::internal::ArenaStringPtr image_hash_;
    ::google::protobuf::internal::ArenaStringPtr signature_;
    ::google::protobuf::internal::ArenaStringPtr zk_stark_proof_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr nft_type_;
    ::google::protobuf::internal::ArenaStringPtr proof_hash_;
    ::google::protobuf::internal::ArenaStringPtr extra_data_;
    ::google::protobuf::internal::ArenaStringPtr creator_identity_;
    ::google::protobuf::internal::ArenaStringPtr dilithium_signature_;
    ::google::protobuf::internal::ArenaStringPtr encrypted_metadata_;
    ::int64_t timestamp_;
    ::int64_t expiry_timestamp_;
    bool revoked_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nft_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NFTProto

// string id = 1;
inline void NFTProto::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& NFTProto::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NFTProto.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NFTProto::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NFTProto.id)
}
inline std::string* NFTProto::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:NFTProto.id)
  return _s;
}
inline const std::string& NFTProto::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void NFTProto::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* NFTProto::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* NFTProto::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NFTProto.id)
  return _impl_.id_.Release();
}
inline void NFTProto::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NFTProto.id)
}

// string creator = 2;
inline void NFTProto::clear_creator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creator_.ClearToEmpty();
}
inline const std::string& NFTProto::creator() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NFTProto.creator)
  return _internal_creator();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NFTProto::set_creator(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creator_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NFTProto.creator)
}
inline std::string* NFTProto::mutable_creator() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:NFTProto.creator)
  return _s;
}
inline const std::string& NFTProto::_internal_creator() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.creator_.Get();
}
inline void NFTProto::_internal_set_creator(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creator_.Set(value, GetArena());
}
inline std::string* NFTProto::_internal_mutable_creator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.creator_.Mutable( GetArena());
}
inline std::string* NFTProto::release_creator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NFTProto.creator)
  return _impl_.creator_.Release();
}
inline void NFTProto::set_allocated_creator(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creator_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.creator_.IsDefault()) {
    _impl_.creator_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NFTProto.creator)
}

// string owner = 3;
inline void NFTProto::clear_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& NFTProto::owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NFTProto.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NFTProto::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NFTProto.owner)
}
inline std::string* NFTProto::mutable_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:NFTProto.owner)
  return _s;
}
inline const std::string& NFTProto::_internal_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_.Get();
}
inline void NFTProto::_internal_set_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(value, GetArena());
}
inline std::string* NFTProto::_internal_mutable_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_.Mutable( GetArena());
}
inline std::string* NFTProto::release_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NFTProto.owner)
  return _impl_.owner_.Release();
}
inline void NFTProto::set_allocated_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NFTProto.owner)
}

// string metadata = 4;
inline void NFTProto::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& NFTProto::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NFTProto.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NFTProto::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NFTProto.metadata)
}
inline std::string* NFTProto::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:NFTProto.metadata)
  return _s;
}
inline const std::string& NFTProto::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.Get();
}
inline void NFTProto::_internal_set_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(value, GetArena());
}
inline std::string* NFTProto::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.Mutable( GetArena());
}
inline std::string* NFTProto::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NFTProto.metadata)
  return _impl_.metadata_.Release();
}
inline void NFTProto::set_allocated_metadata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NFTProto.metadata)
}

// string image_hash = 5;
inline void NFTProto::clear_image_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_hash_.ClearToEmpty();
}
inline const std::string& NFTProto::image_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NFTProto.image_hash)
  return _internal_image_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NFTProto::set_image_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NFTProto.image_hash)
}
inline std::string* NFTProto::mutable_image_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_image_hash();
  // @@protoc_insertion_point(field_mutable:NFTProto.image_hash)
  return _s;
}
inline const std::string& NFTProto::_internal_image_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.image_hash_.Get();
}
inline void NFTProto::_internal_set_image_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_hash_.Set(value, GetArena());
}
inline std::string* NFTProto::_internal_mutable_image_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.image_hash_.Mutable( GetArena());
}
inline std::string* NFTProto::release_image_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NFTProto.image_hash)
  return _impl_.image_hash_.Release();
}
inline void NFTProto::set_allocated_image_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.image_hash_.IsDefault()) {
    _impl_.image_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NFTProto.image_hash)
}

// int64 timestamp = 6;
inline void NFTProto::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t NFTProto::timestamp() const {
  // @@protoc_insertion_point(field_get:NFTProto.timestamp)
  return _internal_timestamp();
}
inline void NFTProto::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:NFTProto.timestamp)
}
inline ::int64_t NFTProto::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void NFTProto::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// bytes signature = 7;
inline void NFTProto::clear_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& NFTProto::signature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NFTProto.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NFTProto::set_signature(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NFTProto.signature)
}
inline std::string* NFTProto::mutable_signature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:NFTProto.signature)
  return _s;
}
inline const std::string& NFTProto::_internal_signature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signature_.Get();
}
inline void NFTProto::_internal_set_signature(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.Set(value, GetArena());
}
inline std::string* NFTProto::_internal_mutable_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.signature_.Mutable( GetArena());
}
inline std::string* NFTProto::release_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NFTProto.signature)
  return _impl_.signature_.Release();
}
inline void NFTProto::set_allocated_signature(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NFTProto.signature)
}

// bytes zk_stark_proof = 8;
inline void NFTProto::clear_zk_stark_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zk_stark_proof_.ClearToEmpty();
}
inline const std::string& NFTProto::zk_stark_proof() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NFTProto.zk_stark_proof)
  return _internal_zk_stark_proof();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NFTProto::set_zk_stark_proof(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zk_stark_proof_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NFTProto.zk_stark_proof)
}
inline std::string* NFTProto::mutable_zk_stark_proof() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_zk_stark_proof();
  // @@protoc_insertion_point(field_mutable:NFTProto.zk_stark_proof)
  return _s;
}
inline const std::string& NFTProto::_internal_zk_stark_proof() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.zk_stark_proof_.Get();
}
inline void NFTProto::_internal_set_zk_stark_proof(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zk_stark_proof_.Set(value, GetArena());
}
inline std::string* NFTProto::_internal_mutable_zk_stark_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.zk_stark_proof_.Mutable( GetArena());
}
inline std::string* NFTProto::release_zk_stark_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NFTProto.zk_stark_proof)
  return _impl_.zk_stark_proof_.Release();
}
inline void NFTProto::set_allocated_zk_stark_proof(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zk_stark_proof_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.zk_stark_proof_.IsDefault()) {
    _impl_.zk_stark_proof_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NFTProto.zk_stark_proof)
}

// string version = 9;
inline void NFTProto::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& NFTProto::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NFTProto.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NFTProto::set_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NFTProto.version)
}
inline std::string* NFTProto::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:NFTProto.version)
  return _s;
}
inline const std::string& NFTProto::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void NFTProto::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(value, GetArena());
}
inline std::string* NFTProto::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* NFTProto::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NFTProto.version)
  return _impl_.version_.Release();
}
inline void NFTProto::set_allocated_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NFTProto.version)
}

// string nft_type = 10;
inline void NFTProto::clear_nft_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nft_type_.ClearToEmpty();
}
inline const std::string& NFTProto::nft_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NFTProto.nft_type)
  return _internal_nft_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NFTProto::set_nft_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nft_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NFTProto.nft_type)
}
inline std::string* NFTProto::mutable_nft_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nft_type();
  // @@protoc_insertion_point(field_mutable:NFTProto.nft_type)
  return _s;
}
inline const std::string& NFTProto::_internal_nft_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nft_type_.Get();
}
inline void NFTProto::_internal_set_nft_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nft_type_.Set(value, GetArena());
}
inline std::string* NFTProto::_internal_mutable_nft_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nft_type_.Mutable( GetArena());
}
inline std::string* NFTProto::release_nft_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NFTProto.nft_type)
  return _impl_.nft_type_.Release();
}
inline void NFTProto::set_allocated_nft_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nft_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.nft_type_.IsDefault()) {
    _impl_.nft_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NFTProto.nft_type)
}

// string proof_hash = 11;
inline void NFTProto::clear_proof_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proof_hash_.ClearToEmpty();
}
inline const std::string& NFTProto::proof_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NFTProto.proof_hash)
  return _internal_proof_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NFTProto::set_proof_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proof_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NFTProto.proof_hash)
}
inline std::string* NFTProto::mutable_proof_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_proof_hash();
  // @@protoc_insertion_point(field_mutable:NFTProto.proof_hash)
  return _s;
}
inline const std::string& NFTProto::_internal_proof_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proof_hash_.Get();
}
inline void NFTProto::_internal_set_proof_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proof_hash_.Set(value, GetArena());
}
inline std::string* NFTProto::_internal_mutable_proof_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.proof_hash_.Mutable( GetArena());
}
inline std::string* NFTProto::release_proof_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NFTProto.proof_hash)
  return _impl_.proof_hash_.Release();
}
inline void NFTProto::set_allocated_proof_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proof_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.proof_hash_.IsDefault()) {
    _impl_.proof_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NFTProto.proof_hash)
}

// string extra_data = 12;
inline void NFTProto::clear_extra_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extra_data_.ClearToEmpty();
}
inline const std::string& NFTProto::extra_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NFTProto.extra_data)
  return _internal_extra_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NFTProto::set_extra_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extra_data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NFTProto.extra_data)
}
inline std::string* NFTProto::mutable_extra_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_extra_data();
  // @@protoc_insertion_point(field_mutable:NFTProto.extra_data)
  return _s;
}
inline const std::string& NFTProto::_internal_extra_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.extra_data_.Get();
}
inline void NFTProto::_internal_set_extra_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extra_data_.Set(value, GetArena());
}
inline std::string* NFTProto::_internal_mutable_extra_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.extra_data_.Mutable( GetArena());
}
inline std::string* NFTProto::release_extra_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NFTProto.extra_data)
  return _impl_.extra_data_.Release();
}
inline void NFTProto::set_allocated_extra_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extra_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.extra_data_.IsDefault()) {
    _impl_.extra_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NFTProto.extra_data)
}

// repeated string transferLedger = 13;
inline int NFTProto::_internal_transferledger_size() const {
  return _internal_transferledger().size();
}
inline int NFTProto::transferledger_size() const {
  return _internal_transferledger_size();
}
inline void NFTProto::clear_transferledger() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transferledger_.Clear();
}
inline std::string* NFTProto::add_transferledger() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_transferledger()->Add();
  // @@protoc_insertion_point(field_add_mutable:NFTProto.transferLedger)
  return _s;
}
inline const std::string& NFTProto::transferledger(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NFTProto.transferLedger)
  return _internal_transferledger().Get(index);
}
inline std::string* NFTProto::mutable_transferledger(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:NFTProto.transferLedger)
  return _internal_mutable_transferledger()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void NFTProto::set_transferledger(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_transferledger()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:NFTProto.transferLedger)
}
template <typename Arg_, typename... Args_>
inline void NFTProto::add_transferledger(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_transferledger(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:NFTProto.transferLedger)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NFTProto::transferledger() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NFTProto.transferLedger)
  return _internal_transferledger();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NFTProto::mutable_transferledger() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NFTProto.transferLedger)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_transferledger();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NFTProto::_internal_transferledger() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transferledger_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NFTProto::_internal_mutable_transferledger() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.transferledger_;
}

// string creator_identity = 14;
inline void NFTProto::clear_creator_identity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creator_identity_.ClearToEmpty();
}
inline const std::string& NFTProto::creator_identity() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NFTProto.creator_identity)
  return _internal_creator_identity();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NFTProto::set_creator_identity(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creator_identity_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NFTProto.creator_identity)
}
inline std::string* NFTProto::mutable_creator_identity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_creator_identity();
  // @@protoc_insertion_point(field_mutable:NFTProto.creator_identity)
  return _s;
}
inline const std::string& NFTProto::_internal_creator_identity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.creator_identity_.Get();
}
inline void NFTProto::_internal_set_creator_identity(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creator_identity_.Set(value, GetArena());
}
inline std::string* NFTProto::_internal_mutable_creator_identity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.creator_identity_.Mutable( GetArena());
}
inline std::string* NFTProto::release_creator_identity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NFTProto.creator_identity)
  return _impl_.creator_identity_.Release();
}
inline void NFTProto::set_allocated_creator_identity(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creator_identity_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.creator_identity_.IsDefault()) {
    _impl_.creator_identity_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NFTProto.creator_identity)
}

// repeated string bundled_assets = 15;
inline int NFTProto::_internal_bundled_assets_size() const {
  return _internal_bundled_assets().size();
}
inline int NFTProto::bundled_assets_size() const {
  return _internal_bundled_assets_size();
}
inline void NFTProto::clear_bundled_assets() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bundled_assets_.Clear();
}
inline std::string* NFTProto::add_bundled_assets() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_bundled_assets()->Add();
  // @@protoc_insertion_point(field_add_mutable:NFTProto.bundled_assets)
  return _s;
}
inline const std::string& NFTProto::bundled_assets(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NFTProto.bundled_assets)
  return _internal_bundled_assets().Get(index);
}
inline std::string* NFTProto::mutable_bundled_assets(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:NFTProto.bundled_assets)
  return _internal_mutable_bundled_assets()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void NFTProto::set_bundled_assets(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_bundled_assets()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:NFTProto.bundled_assets)
}
template <typename Arg_, typename... Args_>
inline void NFTProto::add_bundled_assets(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_bundled_assets(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:NFTProto.bundled_assets)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NFTProto::bundled_assets() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NFTProto.bundled_assets)
  return _internal_bundled_assets();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NFTProto::mutable_bundled_assets() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NFTProto.bundled_assets)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_bundled_assets();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NFTProto::_internal_bundled_assets() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bundled_assets_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NFTProto::_internal_mutable_bundled_assets() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.bundled_assets_;
}

// bytes dilithium_signature = 16;
inline void NFTProto::clear_dilithium_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dilithium_signature_.ClearToEmpty();
}
inline const std::string& NFTProto::dilithium_signature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NFTProto.dilithium_signature)
  return _internal_dilithium_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NFTProto::set_dilithium_signature(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dilithium_signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NFTProto.dilithium_signature)
}
inline std::string* NFTProto::mutable_dilithium_signature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dilithium_signature();
  // @@protoc_insertion_point(field_mutable:NFTProto.dilithium_signature)
  return _s;
}
inline const std::string& NFTProto::_internal_dilithium_signature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dilithium_signature_.Get();
}
inline void NFTProto::_internal_set_dilithium_signature(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dilithium_signature_.Set(value, GetArena());
}
inline std::string* NFTProto::_internal_mutable_dilithium_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dilithium_signature_.Mutable( GetArena());
}
inline std::string* NFTProto::release_dilithium_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NFTProto.dilithium_signature)
  return _impl_.dilithium_signature_.Release();
}
inline void NFTProto::set_allocated_dilithium_signature(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dilithium_signature_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.dilithium_signature_.IsDefault()) {
    _impl_.dilithium_signature_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NFTProto.dilithium_signature)
}

// int64 expiry_timestamp = 17;
inline void NFTProto::clear_expiry_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiry_timestamp_ = ::int64_t{0};
}
inline ::int64_t NFTProto::expiry_timestamp() const {
  // @@protoc_insertion_point(field_get:NFTProto.expiry_timestamp)
  return _internal_expiry_timestamp();
}
inline void NFTProto::set_expiry_timestamp(::int64_t value) {
  _internal_set_expiry_timestamp(value);
  // @@protoc_insertion_point(field_set:NFTProto.expiry_timestamp)
}
inline ::int64_t NFTProto::_internal_expiry_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expiry_timestamp_;
}
inline void NFTProto::_internal_set_expiry_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiry_timestamp_ = value;
}

// bool revoked = 18;
inline void NFTProto::clear_revoked() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.revoked_ = false;
}
inline bool NFTProto::revoked() const {
  // @@protoc_insertion_point(field_get:NFTProto.revoked)
  return _internal_revoked();
}
inline void NFTProto::set_revoked(bool value) {
  _internal_set_revoked(value);
  // @@protoc_insertion_point(field_set:NFTProto.revoked)
}
inline bool NFTProto::_internal_revoked() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.revoked_;
}
inline void NFTProto::_internal_set_revoked(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.revoked_ = value;
}

// string encrypted_metadata = 19;
inline void NFTProto::clear_encrypted_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_metadata_.ClearToEmpty();
}
inline const std::string& NFTProto::encrypted_metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NFTProto.encrypted_metadata)
  return _internal_encrypted_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NFTProto::set_encrypted_metadata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NFTProto.encrypted_metadata)
}
inline std::string* NFTProto::mutable_encrypted_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_encrypted_metadata();
  // @@protoc_insertion_point(field_mutable:NFTProto.encrypted_metadata)
  return _s;
}
inline const std::string& NFTProto::_internal_encrypted_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.encrypted_metadata_.Get();
}
inline void NFTProto::_internal_set_encrypted_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_metadata_.Set(value, GetArena());
}
inline std::string* NFTProto::_internal_mutable_encrypted_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.encrypted_metadata_.Mutable( GetArena());
}
inline std::string* NFTProto::release_encrypted_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NFTProto.encrypted_metadata)
  return _impl_.encrypted_metadata_.Release();
}
inline void NFTProto::set_allocated_encrypted_metadata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encrypted_metadata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.encrypted_metadata_.IsDefault()) {
    _impl_.encrypted_metadata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NFTProto.encrypted_metadata)
}

// repeated string previous_versions = 20;
inline int NFTProto::_internal_previous_versions_size() const {
  return _internal_previous_versions().size();
}
inline int NFTProto::previous_versions_size() const {
  return _internal_previous_versions_size();
}
inline void NFTProto::clear_previous_versions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.previous_versions_.Clear();
}
inline std::string* NFTProto::add_previous_versions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_previous_versions()->Add();
  // @@protoc_insertion_point(field_add_mutable:NFTProto.previous_versions)
  return _s;
}
inline const std::string& NFTProto::previous_versions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NFTProto.previous_versions)
  return _internal_previous_versions().Get(index);
}
inline std::string* NFTProto::mutable_previous_versions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:NFTProto.previous_versions)
  return _internal_mutable_previous_versions()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void NFTProto::set_previous_versions(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_previous_versions()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:NFTProto.previous_versions)
}
template <typename Arg_, typename... Args_>
inline void NFTProto::add_previous_versions(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_previous_versions(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:NFTProto.previous_versions)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NFTProto::previous_versions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:NFTProto.previous_versions)
  return _internal_previous_versions();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NFTProto::mutable_previous_versions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:NFTProto.previous_versions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_previous_versions();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NFTProto::_internal_previous_versions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.previous_versions_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NFTProto::_internal_mutable_previous_versions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.previous_versions_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // nft_2eproto_2epb_2eh
