// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction_protos.proto

#include "transaction_protos.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace alyncoin {
PROTOBUF_CONSTEXPR TransactionProto::TransactionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recipient_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signature_dilithium_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signature_falcon_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.zkproof_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_pubkey_dilithium_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_pubkey_falcon_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.amount_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.amount_)*/0
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.nonce_)*/uint64_t{0u}
  , /*decltype(_impl_.is_system_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransactionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionProtoDefaultTypeInternal() {}
  union {
    TransactionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionProtoDefaultTypeInternal _TransactionProto_default_instance_;
}  // namespace alyncoin
static ::_pb::Metadata file_level_metadata_transaction_5fprotos_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_transaction_5fprotos_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_transaction_5fprotos_2eproto = nullptr;

const uint32_t TableStruct_transaction_5fprotos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.sender_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.recipient_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.signature_dilithium_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.signature_falcon_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.zkproof_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.sender_pubkey_dilithium_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.sender_pubkey_falcon_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.is_system_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.amount_str_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::TransactionProto, _impl_.nonce_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::alyncoin::TransactionProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::alyncoin::_TransactionProto_default_instance_._instance,
};

const char descriptor_table_protodef_transaction_5fprotos_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030transaction_protos.proto\022\010alyncoin\"\265\002\n"
  "\020TransactionProto\022\016\n\006sender\030\001 \001(\t\022\021\n\trec"
  "ipient\030\002 \001(\t\022\016\n\006amount\030\003 \001(\001\022\021\n\ttimestam"
  "p\030\004 \001(\004\022\033\n\023signature_dilithium\030\005 \001(\014\022\030\n\020"
  "signature_falcon\030\006 \001(\014\022\017\n\007zkproof\030\007 \001(\014\022"
  "\037\n\027sender_pubkey_dilithium\030\010 \001(\014\022\034\n\024send"
  "er_pubkey_falcon\030\t \001(\014\022\020\n\010metadata\030\n \001(\t"
  "\022\014\n\004hash\030\013 \001(\t\022\021\n\tis_system\030\014 \001(\010\022\022\n\namo"
  "unt_str\030\r \001(\t\022\r\n\005nonce\030\016 \001(\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_transaction_5fprotos_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transaction_5fprotos_2eproto = {
    false, false, 356, descriptor_table_protodef_transaction_5fprotos_2eproto,
    "transaction_protos.proto",
    &descriptor_table_transaction_5fprotos_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_transaction_5fprotos_2eproto::offsets,
    file_level_metadata_transaction_5fprotos_2eproto, file_level_enum_descriptors_transaction_5fprotos_2eproto,
    file_level_service_descriptors_transaction_5fprotos_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transaction_5fprotos_2eproto_getter() {
  return &descriptor_table_transaction_5fprotos_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transaction_5fprotos_2eproto(&descriptor_table_transaction_5fprotos_2eproto);
namespace alyncoin {

// ===================================================================

class TransactionProto::_Internal {
 public:
};

TransactionProto::TransactionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:alyncoin.TransactionProto)
}
TransactionProto::TransactionProto(const TransactionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransactionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_){}
    , decltype(_impl_.recipient_){}
    , decltype(_impl_.signature_dilithium_){}
    , decltype(_impl_.signature_falcon_){}
    , decltype(_impl_.zkproof_){}
    , decltype(_impl_.sender_pubkey_dilithium_){}
    , decltype(_impl_.sender_pubkey_falcon_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.amount_str_){}
    , decltype(_impl_.amount_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.nonce_){}
    , decltype(_impl_.is_system_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), 
      _this->GetArenaForAllocation());
  }
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recipient().empty()) {
    _this->_impl_.recipient_.Set(from._internal_recipient(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signature_dilithium_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_dilithium_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature_dilithium().empty()) {
    _this->_impl_.signature_dilithium_.Set(from._internal_signature_dilithium(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signature_falcon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_falcon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature_falcon().empty()) {
    _this->_impl_.signature_falcon_.Set(from._internal_signature_falcon(), 
      _this->GetArenaForAllocation());
  }
  _impl_.zkproof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.zkproof_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_zkproof().empty()) {
    _this->_impl_.zkproof_.Set(from._internal_zkproof(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sender_pubkey_dilithium_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_pubkey_dilithium_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_pubkey_dilithium().empty()) {
    _this->_impl_.sender_pubkey_dilithium_.Set(from._internal_sender_pubkey_dilithium(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sender_pubkey_falcon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_pubkey_falcon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_pubkey_falcon().empty()) {
    _this->_impl_.sender_pubkey_falcon_.Set(from._internal_sender_pubkey_falcon(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.amount_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.amount_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount_str().empty()) {
    _this->_impl_.amount_str_.Set(from._internal_amount_str(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.amount_, &from._impl_.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_system_) -
    reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.is_system_));
  // @@protoc_insertion_point(copy_constructor:alyncoin.TransactionProto)
}

inline void TransactionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_){}
    , decltype(_impl_.recipient_){}
    , decltype(_impl_.signature_dilithium_){}
    , decltype(_impl_.signature_falcon_){}
    , decltype(_impl_.zkproof_){}
    , decltype(_impl_.sender_pubkey_dilithium_){}
    , decltype(_impl_.sender_pubkey_falcon_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.amount_str_){}
    , decltype(_impl_.amount_){0}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.nonce_){uint64_t{0u}}
    , decltype(_impl_.is_system_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_dilithium_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_dilithium_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_falcon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_falcon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zkproof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.zkproof_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sender_pubkey_dilithium_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_pubkey_dilithium_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sender_pubkey_falcon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_pubkey_falcon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amount_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.amount_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransactionProto::~TransactionProto() {
  // @@protoc_insertion_point(destructor:alyncoin.TransactionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransactionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.recipient_.Destroy();
  _impl_.signature_dilithium_.Destroy();
  _impl_.signature_falcon_.Destroy();
  _impl_.zkproof_.Destroy();
  _impl_.sender_pubkey_dilithium_.Destroy();
  _impl_.sender_pubkey_falcon_.Destroy();
  _impl_.metadata_.Destroy();
  _impl_.hash_.Destroy();
  _impl_.amount_str_.Destroy();
}

void TransactionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransactionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:alyncoin.TransactionProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.recipient_.ClearToEmpty();
  _impl_.signature_dilithium_.ClearToEmpty();
  _impl_.signature_falcon_.ClearToEmpty();
  _impl_.zkproof_.ClearToEmpty();
  _impl_.sender_pubkey_dilithium_.ClearToEmpty();
  _impl_.sender_pubkey_falcon_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _impl_.amount_str_.ClearToEmpty();
  ::memset(&_impl_.amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_system_) -
      reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.is_system_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "alyncoin.TransactionProto.sender"));
        } else
          goto handle_unusual;
        continue;
      // string recipient = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_recipient();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "alyncoin.TransactionProto.recipient"));
        } else
          goto handle_unusual;
        continue;
      // double amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes signature_dilithium = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_signature_dilithium();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes signature_falcon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_signature_falcon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes zkproof = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_zkproof();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sender_pubkey_dilithium = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_sender_pubkey_dilithium();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sender_pubkey_falcon = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_sender_pubkey_falcon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string metadata = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "alyncoin.TransactionProto.metadata"));
        } else
          goto handle_unusual;
        continue;
      // string hash = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "alyncoin.TransactionProto.hash"));
        } else
          goto handle_unusual;
        continue;
      // bool is_system = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.is_system_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string amount_str = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_amount_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "alyncoin.TransactionProto.amount_str"));
        } else
          goto handle_unusual;
        continue;
      // uint64 nonce = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:alyncoin.TransactionProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1;
  if (!this->_internal_sender().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender().data(), static_cast<int>(this->_internal_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "alyncoin.TransactionProto.sender");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sender(), target);
  }

  // string recipient = 2;
  if (!this->_internal_recipient().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient().data(), static_cast<int>(this->_internal_recipient().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "alyncoin.TransactionProto.recipient");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_recipient(), target);
  }

  // double amount = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = this->_internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_amount(), target);
  }

  // uint64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // bytes signature_dilithium = 5;
  if (!this->_internal_signature_dilithium().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_signature_dilithium(), target);
  }

  // bytes signature_falcon = 6;
  if (!this->_internal_signature_falcon().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_signature_falcon(), target);
  }

  // bytes zkproof = 7;
  if (!this->_internal_zkproof().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_zkproof(), target);
  }

  // bytes sender_pubkey_dilithium = 8;
  if (!this->_internal_sender_pubkey_dilithium().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_sender_pubkey_dilithium(), target);
  }

  // bytes sender_pubkey_falcon = 9;
  if (!this->_internal_sender_pubkey_falcon().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_sender_pubkey_falcon(), target);
  }

  // string metadata = 10;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "alyncoin.TransactionProto.metadata");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_metadata(), target);
  }

  // string hash = 11;
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "alyncoin.TransactionProto.hash");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_hash(), target);
  }

  // bool is_system = 12;
  if (this->_internal_is_system() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_is_system(), target);
  }

  // string amount_str = 13;
  if (!this->_internal_amount_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount_str().data(), static_cast<int>(this->_internal_amount_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "alyncoin.TransactionProto.amount_str");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_amount_str(), target);
  }

  // uint64 nonce = 14;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alyncoin.TransactionProto)
  return target;
}

size_t TransactionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alyncoin.TransactionProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender());
  }

  // string recipient = 2;
  if (!this->_internal_recipient().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient());
  }

  // bytes signature_dilithium = 5;
  if (!this->_internal_signature_dilithium().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature_dilithium());
  }

  // bytes signature_falcon = 6;
  if (!this->_internal_signature_falcon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature_falcon());
  }

  // bytes zkproof = 7;
  if (!this->_internal_zkproof().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_zkproof());
  }

  // bytes sender_pubkey_dilithium = 8;
  if (!this->_internal_sender_pubkey_dilithium().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender_pubkey_dilithium());
  }

  // bytes sender_pubkey_falcon = 9;
  if (!this->_internal_sender_pubkey_falcon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender_pubkey_falcon());
  }

  // string metadata = 10;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // string hash = 11;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // string amount_str = 13;
  if (!this->_internal_amount_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount_str());
  }

  // double amount = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = this->_internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    total_size += 1 + 8;
  }

  // uint64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint64 nonce = 14;
  if (this->_internal_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  // bool is_system = 12;
  if (this->_internal_is_system() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransactionProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionProto::GetClassData() const { return &_class_data_; }


void TransactionProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransactionProto*>(&to_msg);
  auto& from = static_cast<const TransactionProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:alyncoin.TransactionProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_recipient().empty()) {
    _this->_internal_set_recipient(from._internal_recipient());
  }
  if (!from._internal_signature_dilithium().empty()) {
    _this->_internal_set_signature_dilithium(from._internal_signature_dilithium());
  }
  if (!from._internal_signature_falcon().empty()) {
    _this->_internal_set_signature_falcon(from._internal_signature_falcon());
  }
  if (!from._internal_zkproof().empty()) {
    _this->_internal_set_zkproof(from._internal_zkproof());
  }
  if (!from._internal_sender_pubkey_dilithium().empty()) {
    _this->_internal_set_sender_pubkey_dilithium(from._internal_sender_pubkey_dilithium());
  }
  if (!from._internal_sender_pubkey_falcon().empty()) {
    _this->_internal_set_sender_pubkey_falcon(from._internal_sender_pubkey_falcon());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_amount_str().empty()) {
    _this->_internal_set_amount_str(from._internal_amount_str());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = from._internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_nonce() != 0) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  if (from._internal_is_system() != 0) {
    _this->_internal_set_is_system(from._internal_is_system());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionProto::CopyFrom(const TransactionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alyncoin.TransactionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionProto::IsInitialized() const {
  return true;
}

void TransactionProto::InternalSwap(TransactionProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_, lhs_arena,
      &other->_impl_.sender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.recipient_, lhs_arena,
      &other->_impl_.recipient_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_dilithium_, lhs_arena,
      &other->_impl_.signature_dilithium_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_falcon_, lhs_arena,
      &other->_impl_.signature_falcon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.zkproof_, lhs_arena,
      &other->_impl_.zkproof_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_pubkey_dilithium_, lhs_arena,
      &other->_impl_.sender_pubkey_dilithium_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_pubkey_falcon_, lhs_arena,
      &other->_impl_.sender_pubkey_falcon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.amount_str_, lhs_arena,
      &other->_impl_.amount_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionProto, _impl_.is_system_)
      + sizeof(TransactionProto::_impl_.is_system_)
      - PROTOBUF_FIELD_OFFSET(TransactionProto, _impl_.amount_)>(
          reinterpret_cast<char*>(&_impl_.amount_),
          reinterpret_cast<char*>(&other->_impl_.amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transaction_5fprotos_2eproto_getter, &descriptor_table_transaction_5fprotos_2eproto_once,
      file_level_metadata_transaction_5fprotos_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace alyncoin
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::alyncoin::TransactionProto*
Arena::CreateMaybeMessage< ::alyncoin::TransactionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::alyncoin::TransactionProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
