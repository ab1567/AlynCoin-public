// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: identity.proto
// Protobuf C++ Version: 5.29.3

#ifndef identity_2eproto_2epb_2eh
#define identity_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_identity_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_identity_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_identity_2eproto;
namespace identity {
class ZkIdentityProto;
struct ZkIdentityProtoDefaultTypeInternal;
extern ZkIdentityProtoDefaultTypeInternal _ZkIdentityProto_default_instance_;
}  // namespace identity
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace identity {

// ===================================================================


// -------------------------------------------------------------------

class ZkIdentityProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:identity.ZkIdentityProto) */ {
 public:
  inline ZkIdentityProto() : ZkIdentityProto(nullptr) {}
  ~ZkIdentityProto() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ZkIdentityProto* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ZkIdentityProto));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ZkIdentityProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline ZkIdentityProto(const ZkIdentityProto& from) : ZkIdentityProto(nullptr, from) {}
  inline ZkIdentityProto(ZkIdentityProto&& from) noexcept
      : ZkIdentityProto(nullptr, std::move(from)) {}
  inline ZkIdentityProto& operator=(const ZkIdentityProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZkIdentityProto& operator=(ZkIdentityProto&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZkIdentityProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZkIdentityProto* internal_default_instance() {
    return reinterpret_cast<const ZkIdentityProto*>(
        &_ZkIdentityProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ZkIdentityProto& a, ZkIdentityProto& b) { a.Swap(&b); }
  inline void Swap(ZkIdentityProto* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZkIdentityProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZkIdentityProto* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ZkIdentityProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ZkIdentityProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ZkIdentityProto& from) { ZkIdentityProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ZkIdentityProto* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "identity.ZkIdentityProto"; }

 protected:
  explicit ZkIdentityProto(::google::protobuf::Arena* arena);
  ZkIdentityProto(::google::protobuf::Arena* arena, const ZkIdentityProto& from);
  ZkIdentityProto(::google::protobuf::Arena* arena, ZkIdentityProto&& from) noexcept
      : ZkIdentityProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUuidFieldNumber = 1,
    kNameFieldNumber = 2,
    kPublicKeyFieldNumber = 3,
    kMetadataHashFieldNumber = 4,
    kZkProofFieldNumber = 6,
    kFalconSignatureFieldNumber = 7,
    kDilithiumSignatureFieldNumber = 8,
    kCreatedAtFieldNumber = 5,
  };
  // string uuid = 1;
  void clear_uuid() ;
  const std::string& uuid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uuid(Arg_&& arg, Args_... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* value);

  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(
      const std::string& value);
  std::string* _internal_mutable_uuid();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string publicKey = 3;
  void clear_publickey() ;
  const std::string& publickey() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_publickey(Arg_&& arg, Args_... args);
  std::string* mutable_publickey();
  PROTOBUF_NODISCARD std::string* release_publickey();
  void set_allocated_publickey(std::string* value);

  private:
  const std::string& _internal_publickey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_publickey(
      const std::string& value);
  std::string* _internal_mutable_publickey();

  public:
  // string metadataHash = 4;
  void clear_metadatahash() ;
  const std::string& metadatahash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadatahash(Arg_&& arg, Args_... args);
  std::string* mutable_metadatahash();
  PROTOBUF_NODISCARD std::string* release_metadatahash();
  void set_allocated_metadatahash(std::string* value);

  private:
  const std::string& _internal_metadatahash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadatahash(
      const std::string& value);
  std::string* _internal_mutable_metadatahash();

  public:
  // bytes zkProof = 6;
  void clear_zkproof() ;
  const std::string& zkproof() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zkproof(Arg_&& arg, Args_... args);
  std::string* mutable_zkproof();
  PROTOBUF_NODISCARD std::string* release_zkproof();
  void set_allocated_zkproof(std::string* value);

  private:
  const std::string& _internal_zkproof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zkproof(
      const std::string& value);
  std::string* _internal_mutable_zkproof();

  public:
  // bytes falconSignature = 7;
  void clear_falconsignature() ;
  const std::string& falconsignature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_falconsignature(Arg_&& arg, Args_... args);
  std::string* mutable_falconsignature();
  PROTOBUF_NODISCARD std::string* release_falconsignature();
  void set_allocated_falconsignature(std::string* value);

  private:
  const std::string& _internal_falconsignature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_falconsignature(
      const std::string& value);
  std::string* _internal_mutable_falconsignature();

  public:
  // bytes dilithiumSignature = 8;
  void clear_dilithiumsignature() ;
  const std::string& dilithiumsignature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dilithiumsignature(Arg_&& arg, Args_... args);
  std::string* mutable_dilithiumsignature();
  PROTOBUF_NODISCARD std::string* release_dilithiumsignature();
  void set_allocated_dilithiumsignature(std::string* value);

  private:
  const std::string& _internal_dilithiumsignature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dilithiumsignature(
      const std::string& value);
  std::string* _internal_mutable_dilithiumsignature();

  public:
  // int64 createdAt = 5;
  void clear_createdat() ;
  ::int64_t createdat() const;
  void set_createdat(::int64_t value);

  private:
  ::int64_t _internal_createdat() const;
  void _internal_set_createdat(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:identity.ZkIdentityProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      70, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ZkIdentityProto& from_msg);
    ::google::protobuf::internal::ArenaStringPtr uuid_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr publickey_;
    ::google::protobuf::internal::ArenaStringPtr metadatahash_;
    ::google::protobuf::internal::ArenaStringPtr zkproof_;
    ::google::protobuf::internal::ArenaStringPtr falconsignature_;
    ::google::protobuf::internal::ArenaStringPtr dilithiumsignature_;
    ::int64_t createdat_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_identity_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ZkIdentityProto

// string uuid = 1;
inline void ZkIdentityProto::clear_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& ZkIdentityProto::uuid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:identity.ZkIdentityProto.uuid)
  return _internal_uuid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ZkIdentityProto::set_uuid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:identity.ZkIdentityProto.uuid)
}
inline std::string* ZkIdentityProto::mutable_uuid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:identity.ZkIdentityProto.uuid)
  return _s;
}
inline const std::string& ZkIdentityProto::_internal_uuid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uuid_.Get();
}
inline void ZkIdentityProto::_internal_set_uuid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.Set(value, GetArena());
}
inline std::string* ZkIdentityProto::_internal_mutable_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.uuid_.Mutable( GetArena());
}
inline std::string* ZkIdentityProto::release_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:identity.ZkIdentityProto.uuid)
  return _impl_.uuid_.Release();
}
inline void ZkIdentityProto::set_allocated_uuid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:identity.ZkIdentityProto.uuid)
}

// string name = 2;
inline void ZkIdentityProto::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ZkIdentityProto::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:identity.ZkIdentityProto.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ZkIdentityProto::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:identity.ZkIdentityProto.name)
}
inline std::string* ZkIdentityProto::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:identity.ZkIdentityProto.name)
  return _s;
}
inline const std::string& ZkIdentityProto::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void ZkIdentityProto::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ZkIdentityProto::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ZkIdentityProto::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:identity.ZkIdentityProto.name)
  return _impl_.name_.Release();
}
inline void ZkIdentityProto::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:identity.ZkIdentityProto.name)
}

// string publicKey = 3;
inline void ZkIdentityProto::clear_publickey() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.publickey_.ClearToEmpty();
}
inline const std::string& ZkIdentityProto::publickey() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:identity.ZkIdentityProto.publicKey)
  return _internal_publickey();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ZkIdentityProto::set_publickey(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.publickey_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:identity.ZkIdentityProto.publicKey)
}
inline std::string* ZkIdentityProto::mutable_publickey() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_publickey();
  // @@protoc_insertion_point(field_mutable:identity.ZkIdentityProto.publicKey)
  return _s;
}
inline const std::string& ZkIdentityProto::_internal_publickey() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.publickey_.Get();
}
inline void ZkIdentityProto::_internal_set_publickey(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.publickey_.Set(value, GetArena());
}
inline std::string* ZkIdentityProto::_internal_mutable_publickey() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.publickey_.Mutable( GetArena());
}
inline std::string* ZkIdentityProto::release_publickey() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:identity.ZkIdentityProto.publicKey)
  return _impl_.publickey_.Release();
}
inline void ZkIdentityProto::set_allocated_publickey(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.publickey_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.publickey_.IsDefault()) {
    _impl_.publickey_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:identity.ZkIdentityProto.publicKey)
}

// string metadataHash = 4;
inline void ZkIdentityProto::clear_metadatahash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadatahash_.ClearToEmpty();
}
inline const std::string& ZkIdentityProto::metadatahash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:identity.ZkIdentityProto.metadataHash)
  return _internal_metadatahash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ZkIdentityProto::set_metadatahash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadatahash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:identity.ZkIdentityProto.metadataHash)
}
inline std::string* ZkIdentityProto::mutable_metadatahash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadatahash();
  // @@protoc_insertion_point(field_mutable:identity.ZkIdentityProto.metadataHash)
  return _s;
}
inline const std::string& ZkIdentityProto::_internal_metadatahash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadatahash_.Get();
}
inline void ZkIdentityProto::_internal_set_metadatahash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadatahash_.Set(value, GetArena());
}
inline std::string* ZkIdentityProto::_internal_mutable_metadatahash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadatahash_.Mutable( GetArena());
}
inline std::string* ZkIdentityProto::release_metadatahash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:identity.ZkIdentityProto.metadataHash)
  return _impl_.metadatahash_.Release();
}
inline void ZkIdentityProto::set_allocated_metadatahash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadatahash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadatahash_.IsDefault()) {
    _impl_.metadatahash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:identity.ZkIdentityProto.metadataHash)
}

// int64 createdAt = 5;
inline void ZkIdentityProto::clear_createdat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.createdat_ = ::int64_t{0};
}
inline ::int64_t ZkIdentityProto::createdat() const {
  // @@protoc_insertion_point(field_get:identity.ZkIdentityProto.createdAt)
  return _internal_createdat();
}
inline void ZkIdentityProto::set_createdat(::int64_t value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:identity.ZkIdentityProto.createdAt)
}
inline ::int64_t ZkIdentityProto::_internal_createdat() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.createdat_;
}
inline void ZkIdentityProto::_internal_set_createdat(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.createdat_ = value;
}

// bytes zkProof = 6;
inline void ZkIdentityProto::clear_zkproof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zkproof_.ClearToEmpty();
}
inline const std::string& ZkIdentityProto::zkproof() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:identity.ZkIdentityProto.zkProof)
  return _internal_zkproof();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ZkIdentityProto::set_zkproof(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zkproof_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:identity.ZkIdentityProto.zkProof)
}
inline std::string* ZkIdentityProto::mutable_zkproof() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_zkproof();
  // @@protoc_insertion_point(field_mutable:identity.ZkIdentityProto.zkProof)
  return _s;
}
inline const std::string& ZkIdentityProto::_internal_zkproof() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.zkproof_.Get();
}
inline void ZkIdentityProto::_internal_set_zkproof(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zkproof_.Set(value, GetArena());
}
inline std::string* ZkIdentityProto::_internal_mutable_zkproof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.zkproof_.Mutable( GetArena());
}
inline std::string* ZkIdentityProto::release_zkproof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:identity.ZkIdentityProto.zkProof)
  return _impl_.zkproof_.Release();
}
inline void ZkIdentityProto::set_allocated_zkproof(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zkproof_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.zkproof_.IsDefault()) {
    _impl_.zkproof_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:identity.ZkIdentityProto.zkProof)
}

// bytes falconSignature = 7;
inline void ZkIdentityProto::clear_falconsignature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.falconsignature_.ClearToEmpty();
}
inline const std::string& ZkIdentityProto::falconsignature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:identity.ZkIdentityProto.falconSignature)
  return _internal_falconsignature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ZkIdentityProto::set_falconsignature(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.falconsignature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:identity.ZkIdentityProto.falconSignature)
}
inline std::string* ZkIdentityProto::mutable_falconsignature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_falconsignature();
  // @@protoc_insertion_point(field_mutable:identity.ZkIdentityProto.falconSignature)
  return _s;
}
inline const std::string& ZkIdentityProto::_internal_falconsignature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.falconsignature_.Get();
}
inline void ZkIdentityProto::_internal_set_falconsignature(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.falconsignature_.Set(value, GetArena());
}
inline std::string* ZkIdentityProto::_internal_mutable_falconsignature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.falconsignature_.Mutable( GetArena());
}
inline std::string* ZkIdentityProto::release_falconsignature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:identity.ZkIdentityProto.falconSignature)
  return _impl_.falconsignature_.Release();
}
inline void ZkIdentityProto::set_allocated_falconsignature(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.falconsignature_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.falconsignature_.IsDefault()) {
    _impl_.falconsignature_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:identity.ZkIdentityProto.falconSignature)
}

// bytes dilithiumSignature = 8;
inline void ZkIdentityProto::clear_dilithiumsignature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dilithiumsignature_.ClearToEmpty();
}
inline const std::string& ZkIdentityProto::dilithiumsignature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:identity.ZkIdentityProto.dilithiumSignature)
  return _internal_dilithiumsignature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ZkIdentityProto::set_dilithiumsignature(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dilithiumsignature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:identity.ZkIdentityProto.dilithiumSignature)
}
inline std::string* ZkIdentityProto::mutable_dilithiumsignature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dilithiumsignature();
  // @@protoc_insertion_point(field_mutable:identity.ZkIdentityProto.dilithiumSignature)
  return _s;
}
inline const std::string& ZkIdentityProto::_internal_dilithiumsignature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dilithiumsignature_.Get();
}
inline void ZkIdentityProto::_internal_set_dilithiumsignature(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dilithiumsignature_.Set(value, GetArena());
}
inline std::string* ZkIdentityProto::_internal_mutable_dilithiumsignature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dilithiumsignature_.Mutable( GetArena());
}
inline std::string* ZkIdentityProto::release_dilithiumsignature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:identity.ZkIdentityProto.dilithiumSignature)
  return _impl_.dilithiumsignature_.Release();
}
inline void ZkIdentityProto::set_allocated_dilithiumsignature(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dilithiumsignature_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.dilithiumsignature_.IsDefault()) {
    _impl_.dilithiumsignature_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:identity.ZkIdentityProto.dilithiumSignature)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace identity


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // identity_2eproto_2epb_2eh
