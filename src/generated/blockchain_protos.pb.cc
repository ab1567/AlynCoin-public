// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockchain_protos.proto

#include "blockchain_protos.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace alyncoin {
PROTOBUF_CONSTEXPR BlockchainProto::BlockchainProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blocks_)*/{}
  , /*decltype(_impl_.pending_transactions_)*/{}
  , /*decltype(_impl_.chain_id_)*/0
  , /*decltype(_impl_.difficulty_)*/0
  , /*decltype(_impl_.block_reward_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockchainProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockchainProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockchainProtoDefaultTypeInternal() {}
  union {
    BlockchainProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockchainProtoDefaultTypeInternal _BlockchainProto_default_instance_;
}  // namespace alyncoin
static ::_pb::Metadata file_level_metadata_blockchain_5fprotos_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_blockchain_5fprotos_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_blockchain_5fprotos_2eproto = nullptr;

const uint32_t TableStruct_blockchain_5fprotos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::alyncoin::BlockchainProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::alyncoin::BlockchainProto, _impl_.chain_id_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::BlockchainProto, _impl_.blocks_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::BlockchainProto, _impl_.pending_transactions_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::BlockchainProto, _impl_.difficulty_),
  PROTOBUF_FIELD_OFFSET(::alyncoin::BlockchainProto, _impl_.block_reward_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::alyncoin::BlockchainProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::alyncoin::_BlockchainProto_default_instance_._instance,
};

const char descriptor_table_protodef_blockchain_5fprotos_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027blockchain_protos.proto\022\010alyncoin\032\022blo"
  "ck_protos.proto\032\030transaction_protos.prot"
  "o\"\255\001\n\017BlockchainProto\022\020\n\010chain_id\030\001 \001(\005\022"
  "$\n\006blocks\030\002 \003(\0132\024.alyncoin.BlockProto\0228\n"
  "\024pending_transactions\030\003 \003(\0132\032.alyncoin.T"
  "ransactionProto\022\022\n\ndifficulty\030\004 \001(\005\022\024\n\014b"
  "lock_reward\030\005 \001(\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_blockchain_5fprotos_2eproto_deps[2] = {
  &::descriptor_table_block_5fprotos_2eproto,
  &::descriptor_table_transaction_5fprotos_2eproto,
};
static ::_pbi::once_flag descriptor_table_blockchain_5fprotos_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_blockchain_5fprotos_2eproto = {
    false, false, 265, descriptor_table_protodef_blockchain_5fprotos_2eproto,
    "blockchain_protos.proto",
    &descriptor_table_blockchain_5fprotos_2eproto_once, descriptor_table_blockchain_5fprotos_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_blockchain_5fprotos_2eproto::offsets,
    file_level_metadata_blockchain_5fprotos_2eproto, file_level_enum_descriptors_blockchain_5fprotos_2eproto,
    file_level_service_descriptors_blockchain_5fprotos_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_blockchain_5fprotos_2eproto_getter() {
  return &descriptor_table_blockchain_5fprotos_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_blockchain_5fprotos_2eproto(&descriptor_table_blockchain_5fprotos_2eproto);
namespace alyncoin {

// ===================================================================

class BlockchainProto::_Internal {
 public:
};

void BlockchainProto::clear_blocks() {
  _impl_.blocks_.Clear();
}
void BlockchainProto::clear_pending_transactions() {
  _impl_.pending_transactions_.Clear();
}
BlockchainProto::BlockchainProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:alyncoin.BlockchainProto)
}
BlockchainProto::BlockchainProto(const BlockchainProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockchainProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){from._impl_.blocks_}
    , decltype(_impl_.pending_transactions_){from._impl_.pending_transactions_}
    , decltype(_impl_.chain_id_){}
    , decltype(_impl_.difficulty_){}
    , decltype(_impl_.block_reward_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.chain_id_, &from._impl_.chain_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.block_reward_) -
    reinterpret_cast<char*>(&_impl_.chain_id_)) + sizeof(_impl_.block_reward_));
  // @@protoc_insertion_point(copy_constructor:alyncoin.BlockchainProto)
}

inline void BlockchainProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){arena}
    , decltype(_impl_.pending_transactions_){arena}
    , decltype(_impl_.chain_id_){0}
    , decltype(_impl_.difficulty_){0}
    , decltype(_impl_.block_reward_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlockchainProto::~BlockchainProto() {
  // @@protoc_insertion_point(destructor:alyncoin.BlockchainProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockchainProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blocks_.~RepeatedPtrField();
  _impl_.pending_transactions_.~RepeatedPtrField();
}

void BlockchainProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockchainProto::Clear() {
// @@protoc_insertion_point(message_clear_start:alyncoin.BlockchainProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blocks_.Clear();
  _impl_.pending_transactions_.Clear();
  ::memset(&_impl_.chain_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.block_reward_) -
      reinterpret_cast<char*>(&_impl_.chain_id_)) + sizeof(_impl_.block_reward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockchainProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 chain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .alyncoin.BlockProto blocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .alyncoin.TransactionProto pending_transactions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pending_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 difficulty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double block_reward = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.block_reward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockchainProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:alyncoin.BlockchainProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chain_id = 1;
  if (this->_internal_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_chain_id(), target);
  }

  // repeated .alyncoin.BlockProto blocks = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_blocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .alyncoin.TransactionProto pending_transactions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pending_transactions_size()); i < n; i++) {
    const auto& repfield = this->_internal_pending_transactions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 difficulty = 4;
  if (this->_internal_difficulty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_difficulty(), target);
  }

  // double block_reward = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_block_reward = this->_internal_block_reward();
  uint64_t raw_block_reward;
  memcpy(&raw_block_reward, &tmp_block_reward, sizeof(tmp_block_reward));
  if (raw_block_reward != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_block_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alyncoin.BlockchainProto)
  return target;
}

size_t BlockchainProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alyncoin.BlockchainProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .alyncoin.BlockProto blocks = 2;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->_impl_.blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .alyncoin.TransactionProto pending_transactions = 3;
  total_size += 1UL * this->_internal_pending_transactions_size();
  for (const auto& msg : this->_impl_.pending_transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 chain_id = 1;
  if (this->_internal_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chain_id());
  }

  // int32 difficulty = 4;
  if (this->_internal_difficulty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_difficulty());
  }

  // double block_reward = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_block_reward = this->_internal_block_reward();
  uint64_t raw_block_reward;
  memcpy(&raw_block_reward, &tmp_block_reward, sizeof(tmp_block_reward));
  if (raw_block_reward != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockchainProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockchainProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockchainProto::GetClassData() const { return &_class_data_; }


void BlockchainProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockchainProto*>(&to_msg);
  auto& from = static_cast<const BlockchainProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:alyncoin.BlockchainProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blocks_.MergeFrom(from._impl_.blocks_);
  _this->_impl_.pending_transactions_.MergeFrom(from._impl_.pending_transactions_);
  if (from._internal_chain_id() != 0) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_difficulty() != 0) {
    _this->_internal_set_difficulty(from._internal_difficulty());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_block_reward = from._internal_block_reward();
  uint64_t raw_block_reward;
  memcpy(&raw_block_reward, &tmp_block_reward, sizeof(tmp_block_reward));
  if (raw_block_reward != 0) {
    _this->_internal_set_block_reward(from._internal_block_reward());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockchainProto::CopyFrom(const BlockchainProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alyncoin.BlockchainProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockchainProto::IsInitialized() const {
  return true;
}

void BlockchainProto::InternalSwap(BlockchainProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blocks_.InternalSwap(&other->_impl_.blocks_);
  _impl_.pending_transactions_.InternalSwap(&other->_impl_.pending_transactions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockchainProto, _impl_.block_reward_)
      + sizeof(BlockchainProto::_impl_.block_reward_)
      - PROTOBUF_FIELD_OFFSET(BlockchainProto, _impl_.chain_id_)>(
          reinterpret_cast<char*>(&_impl_.chain_id_),
          reinterpret_cast<char*>(&other->_impl_.chain_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockchainProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_blockchain_5fprotos_2eproto_getter, &descriptor_table_blockchain_5fprotos_2eproto_once,
      file_level_metadata_blockchain_5fprotos_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace alyncoin
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::alyncoin::BlockchainProto*
Arena::CreateMaybeMessage< ::alyncoin::BlockchainProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::alyncoin::BlockchainProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
