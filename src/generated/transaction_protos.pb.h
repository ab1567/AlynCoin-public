// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: transaction_protos.proto
// Protobuf C++ Version: 5.29.3

#ifndef transaction_5fprotos_2eproto_2epb_2eh
#define transaction_5fprotos_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_transaction_5fprotos_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_transaction_5fprotos_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_transaction_5fprotos_2eproto;
namespace alyncoin {
class TransactionProto;
struct TransactionProtoDefaultTypeInternal;
extern TransactionProtoDefaultTypeInternal _TransactionProto_default_instance_;
}  // namespace alyncoin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace alyncoin {

// ===================================================================


// -------------------------------------------------------------------

class TransactionProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:alyncoin.TransactionProto) */ {
 public:
  inline TransactionProto() : TransactionProto(nullptr) {}
  ~TransactionProto() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TransactionProto* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TransactionProto));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TransactionProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline TransactionProto(const TransactionProto& from) : TransactionProto(nullptr, from) {}
  inline TransactionProto(TransactionProto&& from) noexcept
      : TransactionProto(nullptr, std::move(from)) {}
  inline TransactionProto& operator=(const TransactionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionProto& operator=(TransactionProto&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionProto* internal_default_instance() {
    return reinterpret_cast<const TransactionProto*>(
        &_TransactionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TransactionProto& a, TransactionProto& b) { a.Swap(&b); }
  inline void Swap(TransactionProto* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionProto* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TransactionProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransactionProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TransactionProto& from) { TransactionProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TransactionProto* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "alyncoin.TransactionProto"; }

 protected:
  explicit TransactionProto(::google::protobuf::Arena* arena);
  TransactionProto(::google::protobuf::Arena* arena, const TransactionProto& from);
  TransactionProto(::google::protobuf::Arena* arena, TransactionProto&& from) noexcept
      : TransactionProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSenderFieldNumber = 1,
    kRecipientFieldNumber = 2,
    kSignatureDilithiumFieldNumber = 5,
    kSignatureFalconFieldNumber = 6,
    kZkproofFieldNumber = 7,
    kSenderPubkeyDilithiumFieldNumber = 8,
    kSenderPubkeyFalconFieldNumber = 9,
    kMetadataFieldNumber = 10,
    kHashFieldNumber = 11,
    kAmountStrFieldNumber = 13,
    kAmountFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kIsSystemFieldNumber = 12,
  };
  // string sender = 1;
  void clear_sender() ;
  const std::string& sender() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* value);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // string recipient = 2;
  void clear_recipient() ;
  const std::string& recipient() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recipient(Arg_&& arg, Args_... args);
  std::string* mutable_recipient();
  PROTOBUF_NODISCARD std::string* release_recipient();
  void set_allocated_recipient(std::string* value);

  private:
  const std::string& _internal_recipient() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient(
      const std::string& value);
  std::string* _internal_mutable_recipient();

  public:
  // bytes signature_dilithium = 5;
  void clear_signature_dilithium() ;
  const std::string& signature_dilithium() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature_dilithium(Arg_&& arg, Args_... args);
  std::string* mutable_signature_dilithium();
  PROTOBUF_NODISCARD std::string* release_signature_dilithium();
  void set_allocated_signature_dilithium(std::string* value);

  private:
  const std::string& _internal_signature_dilithium() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature_dilithium(
      const std::string& value);
  std::string* _internal_mutable_signature_dilithium();

  public:
  // bytes signature_falcon = 6;
  void clear_signature_falcon() ;
  const std::string& signature_falcon() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature_falcon(Arg_&& arg, Args_... args);
  std::string* mutable_signature_falcon();
  PROTOBUF_NODISCARD std::string* release_signature_falcon();
  void set_allocated_signature_falcon(std::string* value);

  private:
  const std::string& _internal_signature_falcon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature_falcon(
      const std::string& value);
  std::string* _internal_mutable_signature_falcon();

  public:
  // bytes zkproof = 7;
  void clear_zkproof() ;
  const std::string& zkproof() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zkproof(Arg_&& arg, Args_... args);
  std::string* mutable_zkproof();
  PROTOBUF_NODISCARD std::string* release_zkproof();
  void set_allocated_zkproof(std::string* value);

  private:
  const std::string& _internal_zkproof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zkproof(
      const std::string& value);
  std::string* _internal_mutable_zkproof();

  public:
  // bytes sender_pubkey_dilithium = 8;
  void clear_sender_pubkey_dilithium() ;
  const std::string& sender_pubkey_dilithium() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender_pubkey_dilithium(Arg_&& arg, Args_... args);
  std::string* mutable_sender_pubkey_dilithium();
  PROTOBUF_NODISCARD std::string* release_sender_pubkey_dilithium();
  void set_allocated_sender_pubkey_dilithium(std::string* value);

  private:
  const std::string& _internal_sender_pubkey_dilithium() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_pubkey_dilithium(
      const std::string& value);
  std::string* _internal_mutable_sender_pubkey_dilithium();

  public:
  // bytes sender_pubkey_falcon = 9;
  void clear_sender_pubkey_falcon() ;
  const std::string& sender_pubkey_falcon() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender_pubkey_falcon(Arg_&& arg, Args_... args);
  std::string* mutable_sender_pubkey_falcon();
  PROTOBUF_NODISCARD std::string* release_sender_pubkey_falcon();
  void set_allocated_sender_pubkey_falcon(std::string* value);

  private:
  const std::string& _internal_sender_pubkey_falcon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_pubkey_falcon(
      const std::string& value);
  std::string* _internal_mutable_sender_pubkey_falcon();

  public:
  // string metadata = 10;
  void clear_metadata() ;
  const std::string& metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* value);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // string hash = 11;
  void clear_hash() ;
  const std::string& hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* value);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // string amount_str = 13;
  void clear_amount_str() ;
  const std::string& amount_str() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_amount_str(Arg_&& arg, Args_... args);
  std::string* mutable_amount_str();
  PROTOBUF_NODISCARD std::string* release_amount_str();
  void set_allocated_amount_str(std::string* value);

  private:
  const std::string& _internal_amount_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount_str(
      const std::string& value);
  std::string* _internal_mutable_amount_str();

  public:
  // double amount = 3;
  void clear_amount() ;
  double amount() const;
  void set_amount(double value);

  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);

  public:
  // uint64 timestamp = 4;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // bool is_system = 12;
  void clear_is_system() ;
  bool is_system() const;
  void set_is_system(bool value);

  private:
  bool _internal_is_system() const;
  void _internal_set_is_system(bool value);

  public:
  // @@protoc_insertion_point(class_scope:alyncoin.TransactionProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 0,
      79, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TransactionProto& from_msg);
    ::google::protobuf::internal::ArenaStringPtr sender_;
    ::google::protobuf::internal::ArenaStringPtr recipient_;
    ::google::protobuf::internal::ArenaStringPtr signature_dilithium_;
    ::google::protobuf::internal::ArenaStringPtr signature_falcon_;
    ::google::protobuf::internal::ArenaStringPtr zkproof_;
    ::google::protobuf::internal::ArenaStringPtr sender_pubkey_dilithium_;
    ::google::protobuf::internal::ArenaStringPtr sender_pubkey_falcon_;
    ::google::protobuf::internal::ArenaStringPtr metadata_;
    ::google::protobuf::internal::ArenaStringPtr hash_;
    ::google::protobuf::internal::ArenaStringPtr amount_str_;
    double amount_;
    ::uint64_t timestamp_;
    bool is_system_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transaction_5fprotos_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TransactionProto

// string sender = 1;
inline void TransactionProto::clear_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& TransactionProto::sender() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransactionProto::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.sender)
}
inline std::string* TransactionProto::mutable_sender() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:alyncoin.TransactionProto.sender)
  return _s;
}
inline const std::string& TransactionProto::_internal_sender() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_.Get();
}
inline void TransactionProto::_internal_set_sender(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(value, GetArena());
}
inline std::string* TransactionProto::_internal_mutable_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sender_.Mutable( GetArena());
}
inline std::string* TransactionProto::release_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:alyncoin.TransactionProto.sender)
  return _impl_.sender_.Release();
}
inline void TransactionProto::set_allocated_sender(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:alyncoin.TransactionProto.sender)
}

// string recipient = 2;
inline void TransactionProto::clear_recipient() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_.ClearToEmpty();
}
inline const std::string& TransactionProto::recipient() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.recipient)
  return _internal_recipient();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransactionProto::set_recipient(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.recipient)
}
inline std::string* TransactionProto::mutable_recipient() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recipient();
  // @@protoc_insertion_point(field_mutable:alyncoin.TransactionProto.recipient)
  return _s;
}
inline const std::string& TransactionProto::_internal_recipient() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recipient_.Get();
}
inline void TransactionProto::_internal_set_recipient(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_.Set(value, GetArena());
}
inline std::string* TransactionProto::_internal_mutable_recipient() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recipient_.Mutable( GetArena());
}
inline std::string* TransactionProto::release_recipient() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:alyncoin.TransactionProto.recipient)
  return _impl_.recipient_.Release();
}
inline void TransactionProto::set_allocated_recipient(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recipient_.IsDefault()) {
    _impl_.recipient_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:alyncoin.TransactionProto.recipient)
}

// double amount = 3;
inline void TransactionProto::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = 0;
}
inline double TransactionProto::amount() const {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.amount)
  return _internal_amount();
}
inline void TransactionProto::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.amount)
}
inline double TransactionProto::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline void TransactionProto::_internal_set_amount(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = value;
}

// uint64 timestamp = 4;
inline void TransactionProto::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t TransactionProto::timestamp() const {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.timestamp)
  return _internal_timestamp();
}
inline void TransactionProto::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.timestamp)
}
inline ::uint64_t TransactionProto::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void TransactionProto::_internal_set_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// bytes signature_dilithium = 5;
inline void TransactionProto::clear_signature_dilithium() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_dilithium_.ClearToEmpty();
}
inline const std::string& TransactionProto::signature_dilithium() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.signature_dilithium)
  return _internal_signature_dilithium();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransactionProto::set_signature_dilithium(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_dilithium_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.signature_dilithium)
}
inline std::string* TransactionProto::mutable_signature_dilithium() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_signature_dilithium();
  // @@protoc_insertion_point(field_mutable:alyncoin.TransactionProto.signature_dilithium)
  return _s;
}
inline const std::string& TransactionProto::_internal_signature_dilithium() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signature_dilithium_.Get();
}
inline void TransactionProto::_internal_set_signature_dilithium(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_dilithium_.Set(value, GetArena());
}
inline std::string* TransactionProto::_internal_mutable_signature_dilithium() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.signature_dilithium_.Mutable( GetArena());
}
inline std::string* TransactionProto::release_signature_dilithium() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:alyncoin.TransactionProto.signature_dilithium)
  return _impl_.signature_dilithium_.Release();
}
inline void TransactionProto::set_allocated_signature_dilithium(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_dilithium_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.signature_dilithium_.IsDefault()) {
    _impl_.signature_dilithium_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:alyncoin.TransactionProto.signature_dilithium)
}

// bytes signature_falcon = 6;
inline void TransactionProto::clear_signature_falcon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_falcon_.ClearToEmpty();
}
inline const std::string& TransactionProto::signature_falcon() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.signature_falcon)
  return _internal_signature_falcon();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransactionProto::set_signature_falcon(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_falcon_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.signature_falcon)
}
inline std::string* TransactionProto::mutable_signature_falcon() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_signature_falcon();
  // @@protoc_insertion_point(field_mutable:alyncoin.TransactionProto.signature_falcon)
  return _s;
}
inline const std::string& TransactionProto::_internal_signature_falcon() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signature_falcon_.Get();
}
inline void TransactionProto::_internal_set_signature_falcon(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_falcon_.Set(value, GetArena());
}
inline std::string* TransactionProto::_internal_mutable_signature_falcon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.signature_falcon_.Mutable( GetArena());
}
inline std::string* TransactionProto::release_signature_falcon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:alyncoin.TransactionProto.signature_falcon)
  return _impl_.signature_falcon_.Release();
}
inline void TransactionProto::set_allocated_signature_falcon(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_falcon_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.signature_falcon_.IsDefault()) {
    _impl_.signature_falcon_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:alyncoin.TransactionProto.signature_falcon)
}

// bytes zkproof = 7;
inline void TransactionProto::clear_zkproof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zkproof_.ClearToEmpty();
}
inline const std::string& TransactionProto::zkproof() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.zkproof)
  return _internal_zkproof();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransactionProto::set_zkproof(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zkproof_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.zkproof)
}
inline std::string* TransactionProto::mutable_zkproof() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_zkproof();
  // @@protoc_insertion_point(field_mutable:alyncoin.TransactionProto.zkproof)
  return _s;
}
inline const std::string& TransactionProto::_internal_zkproof() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.zkproof_.Get();
}
inline void TransactionProto::_internal_set_zkproof(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zkproof_.Set(value, GetArena());
}
inline std::string* TransactionProto::_internal_mutable_zkproof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.zkproof_.Mutable( GetArena());
}
inline std::string* TransactionProto::release_zkproof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:alyncoin.TransactionProto.zkproof)
  return _impl_.zkproof_.Release();
}
inline void TransactionProto::set_allocated_zkproof(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zkproof_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.zkproof_.IsDefault()) {
    _impl_.zkproof_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:alyncoin.TransactionProto.zkproof)
}

// bytes sender_pubkey_dilithium = 8;
inline void TransactionProto::clear_sender_pubkey_dilithium() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_pubkey_dilithium_.ClearToEmpty();
}
inline const std::string& TransactionProto::sender_pubkey_dilithium() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.sender_pubkey_dilithium)
  return _internal_sender_pubkey_dilithium();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransactionProto::set_sender_pubkey_dilithium(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_pubkey_dilithium_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.sender_pubkey_dilithium)
}
inline std::string* TransactionProto::mutable_sender_pubkey_dilithium() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender_pubkey_dilithium();
  // @@protoc_insertion_point(field_mutable:alyncoin.TransactionProto.sender_pubkey_dilithium)
  return _s;
}
inline const std::string& TransactionProto::_internal_sender_pubkey_dilithium() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_pubkey_dilithium_.Get();
}
inline void TransactionProto::_internal_set_sender_pubkey_dilithium(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_pubkey_dilithium_.Set(value, GetArena());
}
inline std::string* TransactionProto::_internal_mutable_sender_pubkey_dilithium() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sender_pubkey_dilithium_.Mutable( GetArena());
}
inline std::string* TransactionProto::release_sender_pubkey_dilithium() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:alyncoin.TransactionProto.sender_pubkey_dilithium)
  return _impl_.sender_pubkey_dilithium_.Release();
}
inline void TransactionProto::set_allocated_sender_pubkey_dilithium(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_pubkey_dilithium_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sender_pubkey_dilithium_.IsDefault()) {
    _impl_.sender_pubkey_dilithium_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:alyncoin.TransactionProto.sender_pubkey_dilithium)
}

// bytes sender_pubkey_falcon = 9;
inline void TransactionProto::clear_sender_pubkey_falcon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_pubkey_falcon_.ClearToEmpty();
}
inline const std::string& TransactionProto::sender_pubkey_falcon() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.sender_pubkey_falcon)
  return _internal_sender_pubkey_falcon();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransactionProto::set_sender_pubkey_falcon(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_pubkey_falcon_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.sender_pubkey_falcon)
}
inline std::string* TransactionProto::mutable_sender_pubkey_falcon() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender_pubkey_falcon();
  // @@protoc_insertion_point(field_mutable:alyncoin.TransactionProto.sender_pubkey_falcon)
  return _s;
}
inline const std::string& TransactionProto::_internal_sender_pubkey_falcon() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_pubkey_falcon_.Get();
}
inline void TransactionProto::_internal_set_sender_pubkey_falcon(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_pubkey_falcon_.Set(value, GetArena());
}
inline std::string* TransactionProto::_internal_mutable_sender_pubkey_falcon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sender_pubkey_falcon_.Mutable( GetArena());
}
inline std::string* TransactionProto::release_sender_pubkey_falcon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:alyncoin.TransactionProto.sender_pubkey_falcon)
  return _impl_.sender_pubkey_falcon_.Release();
}
inline void TransactionProto::set_allocated_sender_pubkey_falcon(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_pubkey_falcon_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sender_pubkey_falcon_.IsDefault()) {
    _impl_.sender_pubkey_falcon_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:alyncoin.TransactionProto.sender_pubkey_falcon)
}

// string metadata = 10;
inline void TransactionProto::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& TransactionProto::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransactionProto::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.metadata)
}
inline std::string* TransactionProto::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:alyncoin.TransactionProto.metadata)
  return _s;
}
inline const std::string& TransactionProto::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.Get();
}
inline void TransactionProto::_internal_set_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(value, GetArena());
}
inline std::string* TransactionProto::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.Mutable( GetArena());
}
inline std::string* TransactionProto::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:alyncoin.TransactionProto.metadata)
  return _impl_.metadata_.Release();
}
inline void TransactionProto::set_allocated_metadata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:alyncoin.TransactionProto.metadata)
}

// string hash = 11;
inline void TransactionProto::clear_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& TransactionProto::hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransactionProto::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.hash)
}
inline std::string* TransactionProto::mutable_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:alyncoin.TransactionProto.hash)
  return _s;
}
inline const std::string& TransactionProto::_internal_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hash_.Get();
}
inline void TransactionProto::_internal_set_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.Set(value, GetArena());
}
inline std::string* TransactionProto::_internal_mutable_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hash_.Mutable( GetArena());
}
inline std::string* TransactionProto::release_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:alyncoin.TransactionProto.hash)
  return _impl_.hash_.Release();
}
inline void TransactionProto::set_allocated_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:alyncoin.TransactionProto.hash)
}

// bool is_system = 12;
inline void TransactionProto::clear_is_system() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_system_ = false;
}
inline bool TransactionProto::is_system() const {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.is_system)
  return _internal_is_system();
}
inline void TransactionProto::set_is_system(bool value) {
  _internal_set_is_system(value);
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.is_system)
}
inline bool TransactionProto::_internal_is_system() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_system_;
}
inline void TransactionProto::_internal_set_is_system(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_system_ = value;
}

// string amount_str = 13;
inline void TransactionProto::clear_amount_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_str_.ClearToEmpty();
}
inline const std::string& TransactionProto::amount_str() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.amount_str)
  return _internal_amount_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransactionProto::set_amount_str(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_str_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.amount_str)
}
inline std::string* TransactionProto::mutable_amount_str() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_amount_str();
  // @@protoc_insertion_point(field_mutable:alyncoin.TransactionProto.amount_str)
  return _s;
}
inline const std::string& TransactionProto::_internal_amount_str() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_str_.Get();
}
inline void TransactionProto::_internal_set_amount_str(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_str_.Set(value, GetArena());
}
inline std::string* TransactionProto::_internal_mutable_amount_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.amount_str_.Mutable( GetArena());
}
inline std::string* TransactionProto::release_amount_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:alyncoin.TransactionProto.amount_str)
  return _impl_.amount_str_.Release();
}
inline void TransactionProto::set_allocated_amount_str(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_str_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.amount_str_.IsDefault()) {
    _impl_.amount_str_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:alyncoin.TransactionProto.amount_str)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace alyncoin


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // transaction_5fprotos_2eproto_2epb_2eh
