// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction_protos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transaction_5fprotos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transaction_5fprotos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transaction_5fprotos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transaction_5fprotos_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transaction_5fprotos_2eproto;
namespace alyncoin {
class TransactionProto;
struct TransactionProtoDefaultTypeInternal;
extern TransactionProtoDefaultTypeInternal _TransactionProto_default_instance_;
}  // namespace alyncoin
PROTOBUF_NAMESPACE_OPEN
template<> ::alyncoin::TransactionProto* Arena::CreateMaybeMessage<::alyncoin::TransactionProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace alyncoin {

// ===================================================================

class TransactionProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:alyncoin.TransactionProto) */ {
 public:
  inline TransactionProto() : TransactionProto(nullptr) {}
  ~TransactionProto() override;
  explicit PROTOBUF_CONSTEXPR TransactionProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionProto(const TransactionProto& from);
  TransactionProto(TransactionProto&& from) noexcept
    : TransactionProto() {
    *this = ::std::move(from);
  }

  inline TransactionProto& operator=(const TransactionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionProto& operator=(TransactionProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionProto* internal_default_instance() {
    return reinterpret_cast<const TransactionProto*>(
               &_TransactionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransactionProto& a, TransactionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransactionProto& from) {
    TransactionProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "alyncoin.TransactionProto";
  }
  protected:
  explicit TransactionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kRecipientFieldNumber = 2,
    kSignatureDilithiumFieldNumber = 5,
    kSignatureFalconFieldNumber = 6,
    kZkproofFieldNumber = 7,
    kSenderPubkeyDilithiumFieldNumber = 8,
    kSenderPubkeyFalconFieldNumber = 9,
    kMetadataFieldNumber = 10,
    kHashFieldNumber = 11,
    kAmountStrFieldNumber = 13,
    kAmountFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kIsSystemFieldNumber = 12,
  };
  // string sender = 1;
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // string recipient = 2;
  void clear_recipient();
  const std::string& recipient() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recipient(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recipient();
  PROTOBUF_NODISCARD std::string* release_recipient();
  void set_allocated_recipient(std::string* recipient);
  private:
  const std::string& _internal_recipient() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient(const std::string& value);
  std::string* _internal_mutable_recipient();
  public:

  // bytes signature_dilithium = 5;
  void clear_signature_dilithium();
  const std::string& signature_dilithium() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature_dilithium(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature_dilithium();
  PROTOBUF_NODISCARD std::string* release_signature_dilithium();
  void set_allocated_signature_dilithium(std::string* signature_dilithium);
  private:
  const std::string& _internal_signature_dilithium() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature_dilithium(const std::string& value);
  std::string* _internal_mutable_signature_dilithium();
  public:

  // bytes signature_falcon = 6;
  void clear_signature_falcon();
  const std::string& signature_falcon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature_falcon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature_falcon();
  PROTOBUF_NODISCARD std::string* release_signature_falcon();
  void set_allocated_signature_falcon(std::string* signature_falcon);
  private:
  const std::string& _internal_signature_falcon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature_falcon(const std::string& value);
  std::string* _internal_mutable_signature_falcon();
  public:

  // bytes zkproof = 7;
  void clear_zkproof();
  const std::string& zkproof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zkproof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zkproof();
  PROTOBUF_NODISCARD std::string* release_zkproof();
  void set_allocated_zkproof(std::string* zkproof);
  private:
  const std::string& _internal_zkproof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zkproof(const std::string& value);
  std::string* _internal_mutable_zkproof();
  public:

  // bytes sender_pubkey_dilithium = 8;
  void clear_sender_pubkey_dilithium();
  const std::string& sender_pubkey_dilithium() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_pubkey_dilithium(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_pubkey_dilithium();
  PROTOBUF_NODISCARD std::string* release_sender_pubkey_dilithium();
  void set_allocated_sender_pubkey_dilithium(std::string* sender_pubkey_dilithium);
  private:
  const std::string& _internal_sender_pubkey_dilithium() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_pubkey_dilithium(const std::string& value);
  std::string* _internal_mutable_sender_pubkey_dilithium();
  public:

  // bytes sender_pubkey_falcon = 9;
  void clear_sender_pubkey_falcon();
  const std::string& sender_pubkey_falcon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_pubkey_falcon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_pubkey_falcon();
  PROTOBUF_NODISCARD std::string* release_sender_pubkey_falcon();
  void set_allocated_sender_pubkey_falcon(std::string* sender_pubkey_falcon);
  private:
  const std::string& _internal_sender_pubkey_falcon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_pubkey_falcon(const std::string& value);
  std::string* _internal_mutable_sender_pubkey_falcon();
  public:

  // string metadata = 10;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // string hash = 11;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string amount_str = 13;
  void clear_amount_str();
  const std::string& amount_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount_str();
  PROTOBUF_NODISCARD std::string* release_amount_str();
  void set_allocated_amount_str(std::string* amount_str);
  private:
  const std::string& _internal_amount_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount_str(const std::string& value);
  std::string* _internal_mutable_amount_str();
  public:

  // double amount = 3;
  void clear_amount();
  double amount() const;
  void set_amount(double value);
  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);
  public:

  // uint64 timestamp = 4;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // bool is_system = 12;
  void clear_is_system();
  bool is_system() const;
  void set_is_system(bool value);
  private:
  bool _internal_is_system() const;
  void _internal_set_is_system(bool value);
  public:

  // @@protoc_insertion_point(class_scope:alyncoin.TransactionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_dilithium_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_falcon_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zkproof_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_pubkey_dilithium_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_pubkey_falcon_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_str_;
    double amount_;
    uint64_t timestamp_;
    bool is_system_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transaction_5fprotos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransactionProto

// string sender = 1;
inline void TransactionProto::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& TransactionProto::sender() const {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionProto::set_sender(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.sender)
}
inline std::string* TransactionProto::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:alyncoin.TransactionProto.sender)
  return _s;
}
inline const std::string& TransactionProto::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void TransactionProto::_internal_set_sender(const std::string& value) {
  
  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionProto::_internal_mutable_sender() {
  
  return _impl_.sender_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionProto::release_sender() {
  // @@protoc_insertion_point(field_release:alyncoin.TransactionProto.sender)
  return _impl_.sender_.Release();
}
inline void TransactionProto::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  _impl_.sender_.SetAllocated(sender, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.TransactionProto.sender)
}

// string recipient = 2;
inline void TransactionProto::clear_recipient() {
  _impl_.recipient_.ClearToEmpty();
}
inline const std::string& TransactionProto::recipient() const {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.recipient)
  return _internal_recipient();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionProto::set_recipient(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recipient_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.recipient)
}
inline std::string* TransactionProto::mutable_recipient() {
  std::string* _s = _internal_mutable_recipient();
  // @@protoc_insertion_point(field_mutable:alyncoin.TransactionProto.recipient)
  return _s;
}
inline const std::string& TransactionProto::_internal_recipient() const {
  return _impl_.recipient_.Get();
}
inline void TransactionProto::_internal_set_recipient(const std::string& value) {
  
  _impl_.recipient_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionProto::_internal_mutable_recipient() {
  
  return _impl_.recipient_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionProto::release_recipient() {
  // @@protoc_insertion_point(field_release:alyncoin.TransactionProto.recipient)
  return _impl_.recipient_.Release();
}
inline void TransactionProto::set_allocated_recipient(std::string* recipient) {
  if (recipient != nullptr) {
    
  } else {
    
  }
  _impl_.recipient_.SetAllocated(recipient, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recipient_.IsDefault()) {
    _impl_.recipient_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.TransactionProto.recipient)
}

// double amount = 3;
inline void TransactionProto::clear_amount() {
  _impl_.amount_ = 0;
}
inline double TransactionProto::_internal_amount() const {
  return _impl_.amount_;
}
inline double TransactionProto::amount() const {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.amount)
  return _internal_amount();
}
inline void TransactionProto::_internal_set_amount(double value) {
  
  _impl_.amount_ = value;
}
inline void TransactionProto::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.amount)
}

// uint64 timestamp = 4;
inline void TransactionProto::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
}
inline uint64_t TransactionProto::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t TransactionProto::timestamp() const {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.timestamp)
  return _internal_timestamp();
}
inline void TransactionProto::_internal_set_timestamp(uint64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void TransactionProto::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.timestamp)
}

// bytes signature_dilithium = 5;
inline void TransactionProto::clear_signature_dilithium() {
  _impl_.signature_dilithium_.ClearToEmpty();
}
inline const std::string& TransactionProto::signature_dilithium() const {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.signature_dilithium)
  return _internal_signature_dilithium();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionProto::set_signature_dilithium(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signature_dilithium_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.signature_dilithium)
}
inline std::string* TransactionProto::mutable_signature_dilithium() {
  std::string* _s = _internal_mutable_signature_dilithium();
  // @@protoc_insertion_point(field_mutable:alyncoin.TransactionProto.signature_dilithium)
  return _s;
}
inline const std::string& TransactionProto::_internal_signature_dilithium() const {
  return _impl_.signature_dilithium_.Get();
}
inline void TransactionProto::_internal_set_signature_dilithium(const std::string& value) {
  
  _impl_.signature_dilithium_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionProto::_internal_mutable_signature_dilithium() {
  
  return _impl_.signature_dilithium_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionProto::release_signature_dilithium() {
  // @@protoc_insertion_point(field_release:alyncoin.TransactionProto.signature_dilithium)
  return _impl_.signature_dilithium_.Release();
}
inline void TransactionProto::set_allocated_signature_dilithium(std::string* signature_dilithium) {
  if (signature_dilithium != nullptr) {
    
  } else {
    
  }
  _impl_.signature_dilithium_.SetAllocated(signature_dilithium, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_dilithium_.IsDefault()) {
    _impl_.signature_dilithium_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.TransactionProto.signature_dilithium)
}

// bytes signature_falcon = 6;
inline void TransactionProto::clear_signature_falcon() {
  _impl_.signature_falcon_.ClearToEmpty();
}
inline const std::string& TransactionProto::signature_falcon() const {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.signature_falcon)
  return _internal_signature_falcon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionProto::set_signature_falcon(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signature_falcon_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.signature_falcon)
}
inline std::string* TransactionProto::mutable_signature_falcon() {
  std::string* _s = _internal_mutable_signature_falcon();
  // @@protoc_insertion_point(field_mutable:alyncoin.TransactionProto.signature_falcon)
  return _s;
}
inline const std::string& TransactionProto::_internal_signature_falcon() const {
  return _impl_.signature_falcon_.Get();
}
inline void TransactionProto::_internal_set_signature_falcon(const std::string& value) {
  
  _impl_.signature_falcon_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionProto::_internal_mutable_signature_falcon() {
  
  return _impl_.signature_falcon_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionProto::release_signature_falcon() {
  // @@protoc_insertion_point(field_release:alyncoin.TransactionProto.signature_falcon)
  return _impl_.signature_falcon_.Release();
}
inline void TransactionProto::set_allocated_signature_falcon(std::string* signature_falcon) {
  if (signature_falcon != nullptr) {
    
  } else {
    
  }
  _impl_.signature_falcon_.SetAllocated(signature_falcon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_falcon_.IsDefault()) {
    _impl_.signature_falcon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.TransactionProto.signature_falcon)
}

// bytes zkproof = 7;
inline void TransactionProto::clear_zkproof() {
  _impl_.zkproof_.ClearToEmpty();
}
inline const std::string& TransactionProto::zkproof() const {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.zkproof)
  return _internal_zkproof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionProto::set_zkproof(ArgT0&& arg0, ArgT... args) {
 
 _impl_.zkproof_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.zkproof)
}
inline std::string* TransactionProto::mutable_zkproof() {
  std::string* _s = _internal_mutable_zkproof();
  // @@protoc_insertion_point(field_mutable:alyncoin.TransactionProto.zkproof)
  return _s;
}
inline const std::string& TransactionProto::_internal_zkproof() const {
  return _impl_.zkproof_.Get();
}
inline void TransactionProto::_internal_set_zkproof(const std::string& value) {
  
  _impl_.zkproof_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionProto::_internal_mutable_zkproof() {
  
  return _impl_.zkproof_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionProto::release_zkproof() {
  // @@protoc_insertion_point(field_release:alyncoin.TransactionProto.zkproof)
  return _impl_.zkproof_.Release();
}
inline void TransactionProto::set_allocated_zkproof(std::string* zkproof) {
  if (zkproof != nullptr) {
    
  } else {
    
  }
  _impl_.zkproof_.SetAllocated(zkproof, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zkproof_.IsDefault()) {
    _impl_.zkproof_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.TransactionProto.zkproof)
}

// bytes sender_pubkey_dilithium = 8;
inline void TransactionProto::clear_sender_pubkey_dilithium() {
  _impl_.sender_pubkey_dilithium_.ClearToEmpty();
}
inline const std::string& TransactionProto::sender_pubkey_dilithium() const {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.sender_pubkey_dilithium)
  return _internal_sender_pubkey_dilithium();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionProto::set_sender_pubkey_dilithium(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_pubkey_dilithium_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.sender_pubkey_dilithium)
}
inline std::string* TransactionProto::mutable_sender_pubkey_dilithium() {
  std::string* _s = _internal_mutable_sender_pubkey_dilithium();
  // @@protoc_insertion_point(field_mutable:alyncoin.TransactionProto.sender_pubkey_dilithium)
  return _s;
}
inline const std::string& TransactionProto::_internal_sender_pubkey_dilithium() const {
  return _impl_.sender_pubkey_dilithium_.Get();
}
inline void TransactionProto::_internal_set_sender_pubkey_dilithium(const std::string& value) {
  
  _impl_.sender_pubkey_dilithium_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionProto::_internal_mutable_sender_pubkey_dilithium() {
  
  return _impl_.sender_pubkey_dilithium_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionProto::release_sender_pubkey_dilithium() {
  // @@protoc_insertion_point(field_release:alyncoin.TransactionProto.sender_pubkey_dilithium)
  return _impl_.sender_pubkey_dilithium_.Release();
}
inline void TransactionProto::set_allocated_sender_pubkey_dilithium(std::string* sender_pubkey_dilithium) {
  if (sender_pubkey_dilithium != nullptr) {
    
  } else {
    
  }
  _impl_.sender_pubkey_dilithium_.SetAllocated(sender_pubkey_dilithium, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_pubkey_dilithium_.IsDefault()) {
    _impl_.sender_pubkey_dilithium_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.TransactionProto.sender_pubkey_dilithium)
}

// bytes sender_pubkey_falcon = 9;
inline void TransactionProto::clear_sender_pubkey_falcon() {
  _impl_.sender_pubkey_falcon_.ClearToEmpty();
}
inline const std::string& TransactionProto::sender_pubkey_falcon() const {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.sender_pubkey_falcon)
  return _internal_sender_pubkey_falcon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionProto::set_sender_pubkey_falcon(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_pubkey_falcon_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.sender_pubkey_falcon)
}
inline std::string* TransactionProto::mutable_sender_pubkey_falcon() {
  std::string* _s = _internal_mutable_sender_pubkey_falcon();
  // @@protoc_insertion_point(field_mutable:alyncoin.TransactionProto.sender_pubkey_falcon)
  return _s;
}
inline const std::string& TransactionProto::_internal_sender_pubkey_falcon() const {
  return _impl_.sender_pubkey_falcon_.Get();
}
inline void TransactionProto::_internal_set_sender_pubkey_falcon(const std::string& value) {
  
  _impl_.sender_pubkey_falcon_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionProto::_internal_mutable_sender_pubkey_falcon() {
  
  return _impl_.sender_pubkey_falcon_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionProto::release_sender_pubkey_falcon() {
  // @@protoc_insertion_point(field_release:alyncoin.TransactionProto.sender_pubkey_falcon)
  return _impl_.sender_pubkey_falcon_.Release();
}
inline void TransactionProto::set_allocated_sender_pubkey_falcon(std::string* sender_pubkey_falcon) {
  if (sender_pubkey_falcon != nullptr) {
    
  } else {
    
  }
  _impl_.sender_pubkey_falcon_.SetAllocated(sender_pubkey_falcon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_pubkey_falcon_.IsDefault()) {
    _impl_.sender_pubkey_falcon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.TransactionProto.sender_pubkey_falcon)
}

// string metadata = 10;
inline void TransactionProto::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& TransactionProto::metadata() const {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionProto::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.metadata)
}
inline std::string* TransactionProto::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:alyncoin.TransactionProto.metadata)
  return _s;
}
inline const std::string& TransactionProto::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void TransactionProto::_internal_set_metadata(const std::string& value) {
  
  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionProto::_internal_mutable_metadata() {
  
  return _impl_.metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionProto::release_metadata() {
  // @@protoc_insertion_point(field_release:alyncoin.TransactionProto.metadata)
  return _impl_.metadata_.Release();
}
inline void TransactionProto::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  _impl_.metadata_.SetAllocated(metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.TransactionProto.metadata)
}

// string hash = 11;
inline void TransactionProto::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& TransactionProto::hash() const {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionProto::set_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.hash)
}
inline std::string* TransactionProto::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:alyncoin.TransactionProto.hash)
  return _s;
}
inline const std::string& TransactionProto::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void TransactionProto::_internal_set_hash(const std::string& value) {
  
  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionProto::_internal_mutable_hash() {
  
  return _impl_.hash_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionProto::release_hash() {
  // @@protoc_insertion_point(field_release:alyncoin.TransactionProto.hash)
  return _impl_.hash_.Release();
}
inline void TransactionProto::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  _impl_.hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.TransactionProto.hash)
}

// bool is_system = 12;
inline void TransactionProto::clear_is_system() {
  _impl_.is_system_ = false;
}
inline bool TransactionProto::_internal_is_system() const {
  return _impl_.is_system_;
}
inline bool TransactionProto::is_system() const {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.is_system)
  return _internal_is_system();
}
inline void TransactionProto::_internal_set_is_system(bool value) {
  
  _impl_.is_system_ = value;
}
inline void TransactionProto::set_is_system(bool value) {
  _internal_set_is_system(value);
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.is_system)
}

// string amount_str = 13;
inline void TransactionProto::clear_amount_str() {
  _impl_.amount_str_.ClearToEmpty();
}
inline const std::string& TransactionProto::amount_str() const {
  // @@protoc_insertion_point(field_get:alyncoin.TransactionProto.amount_str)
  return _internal_amount_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionProto::set_amount_str(ArgT0&& arg0, ArgT... args) {
 
 _impl_.amount_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:alyncoin.TransactionProto.amount_str)
}
inline std::string* TransactionProto::mutable_amount_str() {
  std::string* _s = _internal_mutable_amount_str();
  // @@protoc_insertion_point(field_mutable:alyncoin.TransactionProto.amount_str)
  return _s;
}
inline const std::string& TransactionProto::_internal_amount_str() const {
  return _impl_.amount_str_.Get();
}
inline void TransactionProto::_internal_set_amount_str(const std::string& value) {
  
  _impl_.amount_str_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionProto::_internal_mutable_amount_str() {
  
  return _impl_.amount_str_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionProto::release_amount_str() {
  // @@protoc_insertion_point(field_release:alyncoin.TransactionProto.amount_str)
  return _impl_.amount_str_.Release();
}
inline void TransactionProto::set_allocated_amount_str(std::string* amount_str) {
  if (amount_str != nullptr) {
    
  } else {
    
  }
  _impl_.amount_str_.SetAllocated(amount_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.amount_str_.IsDefault()) {
    _impl_.amount_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:alyncoin.TransactionProto.amount_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace alyncoin

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transaction_5fprotos_2eproto
