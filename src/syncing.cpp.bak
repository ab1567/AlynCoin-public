#include "syncing.h"
#include "generated/block_protos.pb.h"
#include "generated/sync_protos.pb.h"
#include "network.h"
#include <iostream>
#include <json/json.h>

// âœ… Request latest block
void Syncing::requestLatestBlock() {
  alyncoin::BlockRequestProto requestProto;
  requestProto.set_request_type("latest_block");

  std::string serializedData;
  requestProto.SerializeToString(&serializedData);

  std::string message = "BLOCK_REQUEST|" + serializedData;
  Network::getInstance().broadcastMessage(message);
}

// âœ… Full blockchain sync request
void Syncing::syncWithNetwork() {
  alyncoin::BlockchainSyncProto syncProto;
  syncProto.set_request_type("full_sync");

  std::string serializedData;
  syncProto.SerializeToString(&serializedData);

  std::string message = "BLOCKCHAIN_SYNC_REQUEST|" + serializedData;
  Network::getInstance().broadcastMessage(message);
}

// âœ… Propagate regular block with zk-STARK & dual signature awareness
void Syncing::propagateBlock(const Block &block) {
  alyncoin::BlockProto blockProto = block.toProtobuf();
  std::string serializedBlock;
  blockProto.SerializeToString(&serializedBlock);

  std::string message = "BLOCK_DATA|" + serializedBlock;

  Network &net = Network::getInstance();
  for (const std::string &peer : net.getPeers()) {
    if (!peer.empty()) {
      net.sendData(peer, message);
    }
  }

  std::cout << "ðŸ“¡ Propagated block (zk-STARK + Dilithium + Falcon signatures "
               "included) to peers.\n";
}

// âœ… Propagate transaction (ensure contains signatures)
void Syncing::propagateTransaction(const Transaction &tx) {
  alyncoin::TransactionProto txProto;
  tx.serializeToProtobuf(txProto);

  std::string serializedTx;
  txProto.SerializeToString(&serializedTx);

  std::string message = "TRANSACTION_DATA|" + serializedTx;
  Network::getInstance().broadcastMessage(message);

  std::cout << "ðŸ“¡ Propagated transaction to peers.\n";
}
